// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: essmodule/essmodule.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace openfmb.essmodule {

  /// <summary>Holder for reflection information generated from essmodule/essmodule.proto</summary>
  public static partial class EssmoduleReflection {

    #region Descriptor
    /// <summary>File descriptor for essmodule/essmodule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EssmoduleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chllc3Ntb2R1bGUvZXNzbW9kdWxlLnByb3RvEgllc3Ntb2R1bGUaCXVtbC5w",
            "cm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh9jb21tb25t",
            "b2R1bGUvY29tbW9ubW9kdWxlLnByb3RvIqUCCgxFc3NFdmVudFpCQVQSVgoc",
            "bG9naWNhbE5vZGVGb3JFdmVudEFuZFN0YXR1cxgBIAEoCzIqLmNvbW1vbm1v",
            "ZHVsZS5Mb2dpY2FsTm9kZUZvckV2ZW50QW5kU3RhdHVzQgSAtRgBEiYKBUJh",
            "dEhpGAIgASgLMhcuY29tbW9ubW9kdWxlLlN0YXR1c1NQUxImCgVCYXRMbxgD",
            "IAEoCzIXLmNvbW1vbm1vZHVsZS5TdGF0dXNTUFMSJgoFQmF0U3QYBCABKAsy",
            "Fy5jb21tb25tb2R1bGUuU3RhdHVzU1BTEh0KA1NvYxgFIAEoCzIQLmNvbW1v",
            "bm1vZHVsZS5NVhImCgVTdGRieRgGIAEoCzIXLmNvbW1vbm1vZHVsZS5TdGF0",
            "dXNTUFMi+gMKE0ZyZXF1ZW5jeVJlZ3VsYXRpb24SOwoWZnJlcXVlbmN5RGVh",
            "ZEJhbmRNaW51cxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVl",
            "EjoKFWZyZXF1ZW5jeURlYWRCYW5kUGx1cxgCIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5GbG9hdFZhbHVlEjoKFmZyZXF1ZW5jeVJlZ3VsYXRpb25DdGwYAyAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjYKEWZyZXF1ZW5jeVNl",
            "dFBvaW50GAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSQQoc",
            "Z3JpZEZyZXF1ZW5jeVN0YWJsZUJhbmRNaW51cxgFIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5GbG9hdFZhbHVlEkAKG2dyaWRGcmVxdWVuY3lTdGFibGVCYW5k",
            "UGx1cxgGIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjcKEm92",
            "ZXJGcmVxdWVuY3lEcm9vcBgHIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9h",
            "dFZhbHVlEjgKE3VuZGVyRnJlcXVlbmN5RHJvb3AYCCABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuRmxvYXRWYWx1ZSK2AgoLUGVha1NoYXZpbmcSNQoQYmFzZVNo",
            "YXZpbmdMaW1pdBgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVl",
            "EjIKDnBlYWtTaGF2aW5nQ3RsGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJv",
            "b2xWYWx1ZRI1ChBwZWFrU2hhdmluZ0xpbWl0GAMgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkZsb2F0VmFsdWUSQgodc29jTWFuYWdlbWVudEFsbG93ZWRIaWdo",
            "TGltaXQYBCABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRJBChxz",
            "b2NNYW5hZ2VtZW50QWxsb3dlZExvd0xpbWl0GAUgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkZsb2F0VmFsdWUimQIKCFNvY0xpbWl0EjEKDHNvY0hpZ2hMaW1p",
            "dBgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjsKFnNvY0hp",
            "Z2hMaW1pdEh5c3RlcmVzaXMYAiABKAsyGy5nb29nbGUucHJvdG9idWYuRmxv",
            "YXRWYWx1ZRIvCgtzb2NMaW1pdEN0bBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5Cb29sVmFsdWUSMAoLc29jTG93TGltaXQYBCABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuRmxvYXRWYWx1ZRI6ChVzb2NMb3dMaW1pdEh5c3RlcmVzaXMYBSAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZSKbAgoNU09DTWFuYWdl",
            "bWVudBI1ChBzb2NEZWFkQmFuZE1pbnVzGAEgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkZsb2F0VmFsdWUSNAoPc29jRGVhZEJhbmRQbHVzGAIgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkZsb2F0VmFsdWUSNAoQc29jTWFuYWdlbWVudEN0bBgD",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSNQoQc29jUG93ZXJT",
            "ZXRQb2ludBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjAK",
            "C3NvY1NldFBvaW50GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFs",
            "dWUirQIKEVZvbHRhZ2VSZWd1bGF0aW9uEjUKEG92ZXJWb2x0YWdlRHJvb3AY",
            "ASABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRI2ChF1bmRlclZv",
            "bHRhZ2VEcm9vcBgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVl",
            "EjkKFHZvbHRhZ2VEZWFkQmFuZE1pbnVzGAMgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkZsb2F0VmFsdWUSOAoTdm9sdGFnZURlYWRCYW5kUGx1cxgEIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEjQKD3ZvbHRhZ2VTZXRQb2lu",
            "dBgFIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlInwKDFZvbHRh",
            "Z2VEcm9vcBIzCg92b2x0YWdlRHJvb3BDdGwYASABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlEjcKEXZvbHRhZ2VSZWd1bGF0aW9uGAIgASgLMhwu",
            "ZXNzbW9kdWxlLlZvbHRhZ2VSZWd1bGF0aW9uInYKCVZvbHRhZ2VQSRIwCgx2",
            "b2x0YWdlUElDdGwYASABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EjcKEXZvbHRhZ2VSZWd1bGF0aW9uGAIgASgLMhwuZXNzbW9kdWxlLlZvbHRh",
            "Z2VSZWd1bGF0aW9uIr0BCg9DYXBhY2l0eUZpcm1pbmcSNgoSY2FwYWNpdHlG",
            "aXJtaW5nQ3RsGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI4",
            "ChNsaW1pdE5lZ2F0aXZlX2RwX2R0GAIgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkZsb2F0VmFsdWUSOAoTbGltaXRQb3NpdGl2ZV9kcF9kdBgDIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlItwCCgtFU1NGdW5jdGlvbhIzCg9j",
            "YXBhY2l0eUZpcm1pbmcYASABKAsyGi5lc3Ntb2R1bGUuQ2FwYWNpdHlGaXJt",
            "aW5nEjsKE2ZyZXF1ZW5jeVJlZ3VsYXRpb24YAiABKAsyHi5lc3Ntb2R1bGUu",
            "RnJlcXVlbmN5UmVndWxhdGlvbhIrCgtwZWFrU2hhdmluZxgDIAEoCzIWLmVz",
            "c21vZHVsZS5QZWFrU2hhdmluZxIlCghzb2NMaW1pdBgEIAEoCzITLmVzc21v",
            "ZHVsZS5Tb2NMaW1pdBIvCg1zb2NNYW5hZ2VtZW50GAUgASgLMhguZXNzbW9k",
            "dWxlLlNPQ01hbmFnZW1lbnQSLQoMdm9sdGFnZURyb29wGAYgASgLMhcuZXNz",
            "bW9kdWxlLlZvbHRhZ2VEcm9vcBInCgl2b2x0YWdlUEkYByABKAsyFC5lc3Nt",
            "b2R1bGUuVm9sdGFnZVBJIrsFCg5FU1NQb2ludFN0YXR1cxIyChFibGFja1N0",
            "YXJ0RW5hYmxlZBgBIAEoCzIXLmNvbW1vbm1vZHVsZS5TdGF0dXNEUFMSOQoY",
            "ZnJlcXVlbmN5U2V0UG9pbnRFbmFibGVkGAIgASgLMhcuY29tbW9ubW9kdWxl",
            "LlN0YXR1c0RQUxIoCghmdW5jdGlvbhgDIAEoCzIWLmVzc21vZHVsZS5FU1NG",
            "dW5jdGlvbhIzCgRtb2RlGAQgASgLMiUuY29tbW9ubW9kdWxlLkVOR19Hcmlk",
            "Q29ubmVjdE1vZGVLaW5kEi8KCnBjdEh6RHJvb3AYBSABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuRmxvYXRWYWx1ZRIuCglwY3RWRHJvb3AYBiABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuRmxvYXRWYWx1ZRIpCglyYW1wUmF0ZXMYByABKAsyFi5j",
            "b21tb25tb2R1bGUuUmFtcFJhdGUSOwoacmVhY3RpdmVQd3JTZXRQb2ludEVu",
            "YWJsZWQYCCABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVzRFBTEjcKFnJlYWxQ",
            "d3JTZXRQb2ludEVuYWJsZWQYCSABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVz",
            "RFBTEi8KBXN0YXRlGAogASgLMiAuY29tbW9ubW9kdWxlLk9wdGlvbmFsX1N0",
            "YXRlS2luZBIvCg5zeW5jQmFja1RvR3JpZBgLIAEoCzIXLmNvbW1vbm1vZHVs",
            "ZS5TdGF0dXNEUFMSPgoddHJhbnNUb0lzbG5kT25HcmlkTG9zc0VuYWJsZWQY",
            "DCABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVzRFBTEjcKFnZvbHRhZ2VTZXRQ",
            "b2ludEVuYWJsZWQYDSABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVzRFBTItYC",
            "ChVFU1NFdmVudEFuZFN0YXR1c1pHRU4SVgocbG9naWNhbE5vZGVGb3JFdmVu",
            "dEFuZFN0YXR1cxgBIAEoCzIqLmNvbW1vbm1vZHVsZS5Mb2dpY2FsTm9kZUZv",
            "ckV2ZW50QW5kU3RhdHVzQgSAtRgBEikKCEF1eFB3clN0GAIgASgLMhcuY29t",
            "bW9ubW9kdWxlLlN0YXR1c1NQUxI2CgtEeW5hbWljVGVzdBgDIAEoCzIhLmNv",
            "bW1vbm1vZHVsZS5FTlNfRHluYW1pY1Rlc3RLaW5kEigKB0VtZ1N0b3AYBCAB",
            "KAsyFy5jb21tb25tb2R1bGUuU3RhdHVzU1BTEigKB0duU3luU3QYBSABKAsy",
            "Fy5jb21tb25tb2R1bGUuU3RhdHVzU1BTEi4KC1BvaW50U3RhdHVzGAYgASgL",
            "MhkuZXNzbW9kdWxlLkVTU1BvaW50U3RhdHVzIlUKDEVTU0V2ZW50WkdFThJF",
            "ChVlU1NFdmVudEFuZFN0YXR1c1pHRU4YASABKAsyIC5lc3Ntb2R1bGUuRVNT",
            "RXZlbnRBbmRTdGF0dXNaR0VOQgSAtRgBIpwBCghFU1NFdmVudBIyCgpldmVu",
            "dFZhbHVlGAEgASgLMhguY29tbW9ubW9kdWxlLkV2ZW50VmFsdWVCBIC1GAES",
            "LQoMZXNzRXZlbnRaQkFUGAIgASgLMhcuZXNzbW9kdWxlLkVzc0V2ZW50WkJB",
            "VBItCgxlc3NFdmVudFpHRU4YAyABKAsyFy5lc3Ntb2R1bGUuRVNTRXZlbnRa",
            "R0VOIrIBCg9FU1NFdmVudFByb2ZpbGUSPgoQZXZlbnRNZXNzYWdlSW5mbxgB",
            "IAEoCzIeLmNvbW1vbm1vZHVsZS5FdmVudE1lc3NhZ2VJbmZvQgSAtRgBEigK",
            "A2VzcxgCIAEoCzIRLmNvbW1vbm1vZHVsZS5FU1NCCIi1GAGQtRgBEi8KCGVz",
            "c0V2ZW50GAMgASgLMhMuZXNzbW9kdWxlLkVTU0V2ZW50QgiItRgBkLUYAToE",
            "wPMYASL8AQoKRVNTUmVhZGluZxJiCiJjb25kdWN0aW5nRXF1aXBtZW50VGVy",
            "bWluYWxSZWFkaW5nGAEgASgLMjAuY29tbW9ubW9kdWxlLkNvbmR1Y3RpbmdF",
            "cXVpcG1lbnRUZXJtaW5hbFJlYWRpbmdCBIC1GAESKgoJcGhhc2VNTVROGAIg",
            "ASgLMhcuY29tbW9ubW9kdWxlLlBoYXNlTU1UThIuCgtyZWFkaW5nTU1UUhgD",
            "IAEoCzIZLmNvbW1vbm1vZHVsZS5SZWFkaW5nTU1UUhIuCgtyZWFkaW5nTU1Y",
            "VRgEIAEoCzIZLmNvbW1vbm1vZHVsZS5SZWFkaW5nTU1YVSK8AQoRRVNTUmVh",
            "ZGluZ1Byb2ZpbGUSQgoScmVhZGluZ01lc3NhZ2VJbmZvGAEgASgLMiAuY29t",
            "bW9ubW9kdWxlLlJlYWRpbmdNZXNzYWdlSW5mb0IEgLUYARIoCgNlc3MYAiAB",
            "KAsyES5jb21tb25tb2R1bGUuRVNTQgiItRgBkLUYARIzCgplc3NSZWFkaW5n",
            "GAMgASgLMhUuZXNzbW9kdWxlLkVTU1JlYWRpbmdCCIi1GAGQtRgBOgTA8xgB",
            "Io0CCg1Fc3NTdGF0dXNaQkFUElYKHGxvZ2ljYWxOb2RlRm9yRXZlbnRBbmRT",
            "dGF0dXMYASABKAsyKi5jb21tb25tb2R1bGUuTG9naWNhbE5vZGVGb3JFdmVu",
            "dEFuZFN0YXR1c0IEgLUYARImCgVCYXRTdBgCIAEoCzIXLmNvbW1vbm1vZHVs",
            "ZS5TdGF0dXNTUFMSNQoGR3JpTW9kGAMgASgLMiUuY29tbW9ubW9kdWxlLkVO",
            "R19HcmlkQ29ubmVjdE1vZGVLaW5kEh0KA1NvYxgEIAEoCzIQLmNvbW1vbm1v",
            "ZHVsZS5NVhImCgVTdGRieRgFIAEoCzIXLmNvbW1vbm1vZHVsZS5TdGF0dXNT",
            "UFMiVgoNRVNTU3RhdHVzWkdFThJFChVlU1NFdmVudEFuZFN0YXR1c1pHRU4Y",
            "ASABKAsyIC5lc3Ntb2R1bGUuRVNTRXZlbnRBbmRTdGF0dXNaR0VOQgSAtRgB",
            "IqMBCglFU1NTdGF0dXMSNAoLc3RhdHVzVmFsdWUYASABKAsyGS5jb21tb25t",
            "b2R1bGUuU3RhdHVzVmFsdWVCBIC1GAESLwoNZXNzU3RhdHVzWkJBVBgCIAEo",
            "CzIYLmVzc21vZHVsZS5Fc3NTdGF0dXNaQkFUEi8KDWVzc1N0YXR1c1pHRU4Y",
            "AyABKAsyGC5lc3Ntb2R1bGUuRVNTU3RhdHVzWkdFTiK3AQoQRVNTU3RhdHVz",
            "UHJvZmlsZRJAChFzdGF0dXNNZXNzYWdlSW5mbxgBIAEoCzIfLmNvbW1vbm1v",
            "ZHVsZS5TdGF0dXNNZXNzYWdlSW5mb0IEgLUYARIoCgNlc3MYAiABKAsyES5j",
            "b21tb25tb2R1bGUuRVNTQgiItRgBkLUYARIxCgllc3NTdGF0dXMYAyABKAsy",
            "FC5lc3Ntb2R1bGUuRVNTU3RhdHVzQgiItRgBkLUYAToEwPMYASKiBgoIRVNT",
            "UG9pbnQSMwoRYmxhY2tTdGFydEVuYWJsZWQYASABKAsyGC5jb21tb25tb2R1",
            "bGUuQ29udHJvbERQQxI6ChhmcmVxdWVuY3lTZXRQb2ludEVuYWJsZWQYAiAB",
            "KAsyGC5jb21tb25tb2R1bGUuQ29udHJvbERQQxIoCghmdW5jdGlvbhgDIAEo",
            "CzIWLmVzc21vZHVsZS5FU1NGdW5jdGlvbhIzCgRtb2RlGAQgASgLMiUuY29t",
            "bW9ubW9kdWxlLkVOR19HcmlkQ29ubmVjdE1vZGVLaW5kEi8KCnBjdEh6RHJv",
            "b3AYBSABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRIuCglwY3RW",
            "RHJvb3AYBiABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRWYWx1ZRIpCgly",
            "YW1wUmF0ZXMYByABKAsyFi5jb21tb25tb2R1bGUuUmFtcFJhdGUSPAoacmVh",
            "Y3RpdmVQd3JTZXRQb2ludEVuYWJsZWQYCCABKAsyGC5jb21tb25tb2R1bGUu",
            "Q29udHJvbERQQxI4ChZyZWFsUHdyU2V0UG9pbnRFbmFibGVkGAkgASgLMhgu",
            "Y29tbW9ubW9kdWxlLkNvbnRyb2xEUEMSJwoFcmVzZXQYCiABKAsyGC5jb21t",
            "b25tb2R1bGUuQ29udHJvbERQQxIvCgVzdGF0ZRgLIAEoCzIgLmNvbW1vbm1v",
            "ZHVsZS5PcHRpb25hbF9TdGF0ZUtpbmQSMAoOc3luY0JhY2tUb0dyaWQYDCAB",
            "KAsyGC5jb21tb25tb2R1bGUuQ29udHJvbERQQxI/Ch10cmFuc1RvSXNsbmRP",
            "bkdyaWRMb3NzRW5hYmxlZBgNIAEoCzIYLmNvbW1vbm1vZHVsZS5Db250cm9s",
            "RFBDEjgKFnZvbHRhZ2VTZXRQb2ludEVuYWJsZWQYDiABKAsyGC5jb21tb25t",
            "b2R1bGUuQ29udHJvbERQQxI7CglzdGFydFRpbWUYDyABKAsyHi5jb21tb25t",
            "b2R1bGUuQ29udHJvbFRpbWVzdGFtcEIIiLUYAZC1GAEiNwoGRVNTQ1NHEi0K",
            "BmNydlB0cxgBIAMoCzITLmVzc21vZHVsZS5FU1NQb2ludEIIiLUYAZC1GAEi",
            "RgoWRVNTQ29udHJvbFNjaGVkdWxlRlNDSBIsCgdWYWxEQ1NHGAEgASgLMhEu",
            "ZXNzbW9kdWxlLkVTU0NTR0IIiLUYAZC1GAEiiQEKDkVzc0NvbnRyb2xGU0ND",
            "EjQKC2NvbnRyb2xGU0NDGAEgASgLMhkuY29tbW9ubW9kdWxlLkNvbnRyb2xG",
            "U0NDQgSAtRgBEkEKFmVzc0NvbnRyb2xTY2hlZHVsZUZTQ0gYAiABKAsyIS5l",
            "c3Ntb2R1bGUuRVNTQ29udHJvbFNjaGVkdWxlRlNDSCKlAQoKRVNTQ29udHJv",
            "bBI2Cgxjb250cm9sVmFsdWUYASABKAsyGi5jb21tb25tb2R1bGUuQ29udHJv",
            "bFZhbHVlQgSAtRgBEiwKBWNoZWNrGAIgASgLMh0uY29tbW9ubW9kdWxlLkNo",
            "ZWNrQ29uZGl0aW9ucxIxCg5lc3NDb250cm9sRlNDQxgDIAEoCzIZLmVzc21v",
            "ZHVsZS5Fc3NDb250cm9sRlNDQyK8AQoRRVNTQ29udHJvbFByb2ZpbGUSQgoS",
            "Y29udHJvbE1lc3NhZ2VJbmZvGAEgASgLMiAuY29tbW9ubW9kdWxlLkNvbnRy",
            "b2xNZXNzYWdlSW5mb0IEgLUYARIoCgNlc3MYAiABKAsyES5jb21tb25tb2R1",
            "bGUuRVNTQgiItRgBkLUYARIzCgplc3NDb250cm9sGAMgASgLMhUuZXNzbW9k",
            "dWxlLkVTU0NvbnRyb2xCCIi1GAGQtRgBOgTA8xgBQnsKEW9wZW5mbWIuZXNz",
            "bW9kdWxlUAFaUGdpdGxhYi5jb20vb3BlbmZtYi9wc20vb3BzL3Byb3RvYnVm",
            "L2dvLW9wZW5mbWItb3BzLXByb3RvYnVmL3YyL29wZW5mbWIvZXNzbW9kdWxl",
            "qgIRb3BlbmZtYi5lc3Ntb2R1bGViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::openfmb.UmlReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::openfmb.commonmodule.CommonmoduleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.EssEventZBAT), global::openfmb.essmodule.EssEventZBAT.Parser, new[]{ "LogicalNodeForEventAndStatus", "BatHi", "BatLo", "BatSt", "Soc", "Stdby" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.FrequencyRegulation), global::openfmb.essmodule.FrequencyRegulation.Parser, new[]{ "FrequencyDeadBandMinus", "FrequencyDeadBandPlus", "FrequencyRegulationCtl", "FrequencySetPoint", "GridFrequencyStableBandMinus", "GridFrequencyStableBandPlus", "OverFrequencyDroop", "UnderFrequencyDroop" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.PeakShaving), global::openfmb.essmodule.PeakShaving.Parser, new[]{ "BaseShavingLimit", "PeakShavingCtl", "PeakShavingLimit", "SocManagementAllowedHighLimit", "SocManagementAllowedLowLimit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.SocLimit), global::openfmb.essmodule.SocLimit.Parser, new[]{ "SocHighLimit", "SocHighLimitHysteresis", "SocLimitCtl", "SocLowLimit", "SocLowLimitHysteresis" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.SOCManagement), global::openfmb.essmodule.SOCManagement.Parser, new[]{ "SocDeadBandMinus", "SocDeadBandPlus", "SocManagementCtl", "SocPowerSetPoint", "SocSetPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.VoltageRegulation), global::openfmb.essmodule.VoltageRegulation.Parser, new[]{ "OverVoltageDroop", "UnderVoltageDroop", "VoltageDeadBandMinus", "VoltageDeadBandPlus", "VoltageSetPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.VoltageDroop), global::openfmb.essmodule.VoltageDroop.Parser, new[]{ "VoltageDroopCtl", "VoltageRegulation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.VoltagePI), global::openfmb.essmodule.VoltagePI.Parser, new[]{ "VoltagePICtl", "VoltageRegulation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.CapacityFirming), global::openfmb.essmodule.CapacityFirming.Parser, new[]{ "CapacityFirmingCtl", "LimitNegativeDpDt", "LimitPositiveDpDt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSFunction), global::openfmb.essmodule.ESSFunction.Parser, new[]{ "CapacityFirming", "FrequencyRegulation", "PeakShaving", "SocLimit", "SocManagement", "VoltageDroop", "VoltagePI" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSPointStatus), global::openfmb.essmodule.ESSPointStatus.Parser, new[]{ "BlackStartEnabled", "FrequencySetPointEnabled", "Function", "Mode", "PctHzDroop", "PctVDroop", "RampRates", "ReactivePwrSetPointEnabled", "RealPwrSetPointEnabled", "State", "SyncBackToGrid", "TransToIslndOnGridLossEnabled", "VoltageSetPointEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSEventAndStatusZGEN), global::openfmb.essmodule.ESSEventAndStatusZGEN.Parser, new[]{ "LogicalNodeForEventAndStatus", "AuxPwrSt", "DynamicTest", "EmgStop", "GnSynSt", "PointStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSEventZGEN), global::openfmb.essmodule.ESSEventZGEN.Parser, new[]{ "ESSEventAndStatusZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSEvent), global::openfmb.essmodule.ESSEvent.Parser, new[]{ "EventValue", "EssEventZBAT", "EssEventZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSEventProfile), global::openfmb.essmodule.ESSEventProfile.Parser, new[]{ "EventMessageInfo", "Ess", "EssEvent" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSReading), global::openfmb.essmodule.ESSReading.Parser, new[]{ "ConductingEquipmentTerminalReading", "PhaseMMTN", "ReadingMMTR", "ReadingMMXU" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSReadingProfile), global::openfmb.essmodule.ESSReadingProfile.Parser, new[]{ "ReadingMessageInfo", "Ess", "EssReading" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.EssStatusZBAT), global::openfmb.essmodule.EssStatusZBAT.Parser, new[]{ "LogicalNodeForEventAndStatus", "BatSt", "GriMod", "Soc", "Stdby" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSStatusZGEN), global::openfmb.essmodule.ESSStatusZGEN.Parser, new[]{ "ESSEventAndStatusZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSStatus), global::openfmb.essmodule.ESSStatus.Parser, new[]{ "StatusValue", "EssStatusZBAT", "EssStatusZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSStatusProfile), global::openfmb.essmodule.ESSStatusProfile.Parser, new[]{ "StatusMessageInfo", "Ess", "EssStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSPoint), global::openfmb.essmodule.ESSPoint.Parser, new[]{ "BlackStartEnabled", "FrequencySetPointEnabled", "Function", "Mode", "PctHzDroop", "PctVDroop", "RampRates", "ReactivePwrSetPointEnabled", "RealPwrSetPointEnabled", "Reset", "State", "SyncBackToGrid", "TransToIslndOnGridLossEnabled", "VoltageSetPointEnabled", "StartTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSCSG), global::openfmb.essmodule.ESSCSG.Parser, new[]{ "CrvPts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSControlScheduleFSCH), global::openfmb.essmodule.ESSControlScheduleFSCH.Parser, new[]{ "ValDCSG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.EssControlFSCC), global::openfmb.essmodule.EssControlFSCC.Parser, new[]{ "ControlFSCC", "EssControlScheduleFSCH" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSControl), global::openfmb.essmodule.ESSControl.Parser, new[]{ "ControlValue", "Check", "EssControlFSCC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.essmodule.ESSControlProfile), global::openfmb.essmodule.ESSControlProfile.Parser, new[]{ "ControlMessageInfo", "Ess", "EssControl" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Specialized 61850 ZBAT class  LN: Battery   Name: ZBAT
  /// </summary>
  public sealed partial class EssEventZBAT : pb::IMessage<EssEventZBAT>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EssEventZBAT> _parser = new pb::MessageParser<EssEventZBAT>(() => new EssEventZBAT());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EssEventZBAT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssEventZBAT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssEventZBAT(EssEventZBAT other) : this() {
      logicalNodeForEventAndStatus_ = other.logicalNodeForEventAndStatus_ != null ? other.logicalNodeForEventAndStatus_.Clone() : null;
      batHi_ = other.batHi_ != null ? other.batHi_.Clone() : null;
      batLo_ = other.batLo_ != null ? other.batLo_.Clone() : null;
      batSt_ = other.batSt_ != null ? other.batSt_.Clone() : null;
      soc_ = other.soc_ != null ? other.soc_.Clone() : null;
      stdby_ = other.stdby_ != null ? other.stdby_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssEventZBAT Clone() {
      return new EssEventZBAT(this);
    }

    /// <summary>Field number for the "logicalNodeForEventAndStatus" field.</summary>
    public const int LogicalNodeForEventAndStatusFieldNumber = 1;
    private global::openfmb.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.LogicalNodeForEventAndStatus LogicalNodeForEventAndStatus {
      get { return logicalNodeForEventAndStatus_; }
      set {
        logicalNodeForEventAndStatus_ = value;
      }
    }

    /// <summary>Field number for the "BatHi" field.</summary>
    public const int BatHiFieldNumber = 2;
    private global::openfmb.commonmodule.StatusSPS batHi_;
    /// <summary>
    /// If true, the battery is in overcharge (voltage or current) condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS BatHi {
      get { return batHi_; }
      set {
        batHi_ = value;
      }
    }

    /// <summary>Field number for the "BatLo" field.</summary>
    public const int BatLoFieldNumber = 3;
    private global::openfmb.commonmodule.StatusSPS batLo_;
    /// <summary>
    /// If true, the battery voltage or charge has dropped below a pre-set level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS BatLo {
      get { return batLo_; }
      set {
        batLo_ = value;
      }
    }

    /// <summary>Field number for the "BatSt" field.</summary>
    public const int BatStFieldNumber = 4;
    private global::openfmb.commonmodule.StatusSPS batSt_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS BatSt {
      get { return batSt_; }
      set {
        batSt_ = value;
      }
    }

    /// <summary>Field number for the "Soc" field.</summary>
    public const int SocFieldNumber = 5;
    private global::openfmb.commonmodule.MV soc_;
    /// <summary>
    /// State of charge (in percentage)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.MV Soc {
      get { return soc_; }
      set {
        soc_ = value;
      }
    }

    /// <summary>Field number for the "Stdby" field.</summary>
    public const int StdbyFieldNumber = 6;
    private global::openfmb.commonmodule.StatusSPS stdby_;
    /// <summary>
    /// If stVal TRUE, the device is in standby.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS Stdby {
      get { return stdby_; }
      set {
        stdby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EssEventZBAT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EssEventZBAT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogicalNodeForEventAndStatus, other.LogicalNodeForEventAndStatus)) return false;
      if (!object.Equals(BatHi, other.BatHi)) return false;
      if (!object.Equals(BatLo, other.BatLo)) return false;
      if (!object.Equals(BatSt, other.BatSt)) return false;
      if (!object.Equals(Soc, other.Soc)) return false;
      if (!object.Equals(Stdby, other.Stdby)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logicalNodeForEventAndStatus_ != null) hash ^= LogicalNodeForEventAndStatus.GetHashCode();
      if (batHi_ != null) hash ^= BatHi.GetHashCode();
      if (batLo_ != null) hash ^= BatLo.GetHashCode();
      if (batSt_ != null) hash ^= BatSt.GetHashCode();
      if (soc_ != null) hash ^= Soc.GetHashCode();
      if (stdby_ != null) hash ^= Stdby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (batHi_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BatHi);
      }
      if (batLo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BatLo);
      }
      if (batSt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BatSt);
      }
      if (soc_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Soc);
      }
      if (stdby_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Stdby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (batHi_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BatHi);
      }
      if (batLo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BatLo);
      }
      if (batSt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BatSt);
      }
      if (soc_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Soc);
      }
      if (stdby_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Stdby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logicalNodeForEventAndStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalNodeForEventAndStatus);
      }
      if (batHi_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatHi);
      }
      if (batLo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatLo);
      }
      if (batSt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatSt);
      }
      if (soc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Soc);
      }
      if (stdby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stdby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EssEventZBAT other) {
      if (other == null) {
        return;
      }
      if (other.logicalNodeForEventAndStatus_ != null) {
        if (logicalNodeForEventAndStatus_ == null) {
          LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
        }
        LogicalNodeForEventAndStatus.MergeFrom(other.LogicalNodeForEventAndStatus);
      }
      if (other.batHi_ != null) {
        if (batHi_ == null) {
          BatHi = new global::openfmb.commonmodule.StatusSPS();
        }
        BatHi.MergeFrom(other.BatHi);
      }
      if (other.batLo_ != null) {
        if (batLo_ == null) {
          BatLo = new global::openfmb.commonmodule.StatusSPS();
        }
        BatLo.MergeFrom(other.BatLo);
      }
      if (other.batSt_ != null) {
        if (batSt_ == null) {
          BatSt = new global::openfmb.commonmodule.StatusSPS();
        }
        BatSt.MergeFrom(other.BatSt);
      }
      if (other.soc_ != null) {
        if (soc_ == null) {
          Soc = new global::openfmb.commonmodule.MV();
        }
        Soc.MergeFrom(other.Soc);
      }
      if (other.stdby_ != null) {
        if (stdby_ == null) {
          Stdby = new global::openfmb.commonmodule.StatusSPS();
        }
        Stdby.MergeFrom(other.Stdby);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (batHi_ == null) {
              BatHi = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatHi);
            break;
          }
          case 26: {
            if (batLo_ == null) {
              BatLo = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatLo);
            break;
          }
          case 34: {
            if (batSt_ == null) {
              BatSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatSt);
            break;
          }
          case 42: {
            if (soc_ == null) {
              Soc = new global::openfmb.commonmodule.MV();
            }
            input.ReadMessage(Soc);
            break;
          }
          case 50: {
            if (stdby_ == null) {
              Stdby = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(Stdby);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (batHi_ == null) {
              BatHi = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatHi);
            break;
          }
          case 26: {
            if (batLo_ == null) {
              BatLo = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatLo);
            break;
          }
          case 34: {
            if (batSt_ == null) {
              BatSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatSt);
            break;
          }
          case 42: {
            if (soc_ == null) {
              Soc = new global::openfmb.commonmodule.MV();
            }
            input.ReadMessage(Soc);
            break;
          }
          case 50: {
            if (stdby_ == null) {
              Stdby = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(Stdby);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to maintain frequency within dead bands.
  /// </summary>
  public sealed partial class FrequencyRegulation : pb::IMessage<FrequencyRegulation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrequencyRegulation> _parser = new pb::MessageParser<FrequencyRegulation>(() => new FrequencyRegulation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrequencyRegulation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrequencyRegulation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrequencyRegulation(FrequencyRegulation other) : this() {
      FrequencyDeadBandMinus = other.FrequencyDeadBandMinus;
      FrequencyDeadBandPlus = other.FrequencyDeadBandPlus;
      FrequencyRegulationCtl = other.FrequencyRegulationCtl;
      FrequencySetPoint = other.FrequencySetPoint;
      GridFrequencyStableBandMinus = other.GridFrequencyStableBandMinus;
      GridFrequencyStableBandPlus = other.GridFrequencyStableBandPlus;
      OverFrequencyDroop = other.OverFrequencyDroop;
      UnderFrequencyDroop = other.UnderFrequencyDroop;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrequencyRegulation Clone() {
      return new FrequencyRegulation(this);
    }

    /// <summary>Field number for the "frequencyDeadBandMinus" field.</summary>
    public const int FrequencyDeadBandMinusFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_frequencyDeadBandMinus_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? frequencyDeadBandMinus_;
    /// <summary>
    /// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
    /// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
    /// DB = frequency set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FrequencyDeadBandMinus {
      get { return frequencyDeadBandMinus_; }
      set {
        frequencyDeadBandMinus_ = value;
      }
    }


    /// <summary>Field number for the "frequencyDeadBandPlus" field.</summary>
    public const int FrequencyDeadBandPlusFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_frequencyDeadBandPlus_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? frequencyDeadBandPlus_;
    /// <summary>
    /// uint/0.01Hz  Frequency regulation is performed when the grid frequency goes beyond the dead
    /// bands. The dead bands are defined as follows: Upper DB = frequency set point + dead band plus Lower
    /// DB = frequency set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FrequencyDeadBandPlus {
      get { return frequencyDeadBandPlus_; }
      set {
        frequencyDeadBandPlus_ = value;
      }
    }


    /// <summary>Field number for the "frequencyRegulationCtl" field.</summary>
    public const int FrequencyRegulationCtlFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_frequencyRegulationCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? frequencyRegulationCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? FrequencyRegulationCtl {
      get { return frequencyRegulationCtl_; }
      set {
        frequencyRegulationCtl_ = value;
      }
    }


    /// <summary>Field number for the "frequencySetPoint" field.</summary>
    public const int FrequencySetPointFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_frequencySetPoint_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? frequencySetPoint_;
    /// <summary>
    /// uint/0.01Hz  Target frequency
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? FrequencySetPoint {
      get { return frequencySetPoint_; }
      set {
        frequencySetPoint_ = value;
      }
    }


    /// <summary>Field number for the "gridFrequencyStableBandMinus" field.</summary>
    public const int GridFrequencyStableBandMinusFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_gridFrequencyStableBandMinus_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? gridFrequencyStableBandMinus_;
    /// <summary>
    /// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
    /// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
    /// band plus Lower stable band = frequency set point – band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? GridFrequencyStableBandMinus {
      get { return gridFrequencyStableBandMinus_; }
      set {
        gridFrequencyStableBandMinus_ = value;
      }
    }


    /// <summary>Field number for the "gridFrequencyStableBandPlus" field.</summary>
    public const int GridFrequencyStableBandPlusFieldNumber = 6;
    private static readonly pb::FieldCodec<float?> _single_gridFrequencyStableBandPlus_codec = pb::FieldCodec.ForStructWrapper<float>(50);
    private float? gridFrequencyStableBandPlus_;
    /// <summary>
    /// uint/0.01Hz  Other modes of operation, such as peak shaving, smoothing or SOC management may
    /// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
    /// band plus Lower stable band = frequency set point – band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? GridFrequencyStableBandPlus {
      get { return gridFrequencyStableBandPlus_; }
      set {
        gridFrequencyStableBandPlus_ = value;
      }
    }


    /// <summary>Field number for the "overFrequencyDroop" field.</summary>
    public const int OverFrequencyDroopFieldNumber = 7;
    private static readonly pb::FieldCodec<float?> _single_overFrequencyDroop_codec = pb::FieldCodec.ForStructWrapper<float>(58);
    private float? overFrequencyDroop_;
    /// <summary>
    /// uint/0.1%  The droops define the reaction of the PCS to under/over frequency events. A droop of
    /// 1% means that the PCS will output 100% power if the frequency is 1% of the nominal frequency away
    /// from the upper or lower dead band. The minimum droop value possible is 0.8%.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OverFrequencyDroop {
      get { return overFrequencyDroop_; }
      set {
        overFrequencyDroop_ = value;
      }
    }


    /// <summary>Field number for the "underFrequencyDroop" field.</summary>
    public const int UnderFrequencyDroopFieldNumber = 8;
    private static readonly pb::FieldCodec<float?> _single_underFrequencyDroop_codec = pb::FieldCodec.ForStructWrapper<float>(66);
    private float? underFrequencyDroop_;
    /// <summary>
    /// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
    /// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
    /// upper or lower dead band. The minimum droop value possible is 0.8%.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? UnderFrequencyDroop {
      get { return underFrequencyDroop_; }
      set {
        underFrequencyDroop_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrequencyRegulation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrequencyRegulation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FrequencyDeadBandMinus, other.FrequencyDeadBandMinus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FrequencyDeadBandPlus, other.FrequencyDeadBandPlus)) return false;
      if (FrequencyRegulationCtl != other.FrequencyRegulationCtl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(FrequencySetPoint, other.FrequencySetPoint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(GridFrequencyStableBandMinus, other.GridFrequencyStableBandMinus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(GridFrequencyStableBandPlus, other.GridFrequencyStableBandPlus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OverFrequencyDroop, other.OverFrequencyDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(UnderFrequencyDroop, other.UnderFrequencyDroop)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frequencyDeadBandMinus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FrequencyDeadBandMinus);
      if (frequencyDeadBandPlus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FrequencyDeadBandPlus);
      if (frequencyRegulationCtl_ != null) hash ^= FrequencyRegulationCtl.GetHashCode();
      if (frequencySetPoint_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(FrequencySetPoint);
      if (gridFrequencyStableBandMinus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(GridFrequencyStableBandMinus);
      if (gridFrequencyStableBandPlus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(GridFrequencyStableBandPlus);
      if (overFrequencyDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OverFrequencyDroop);
      if (underFrequencyDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(UnderFrequencyDroop);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (frequencyDeadBandMinus_ != null) {
        _single_frequencyDeadBandMinus_codec.WriteTagAndValue(output, FrequencyDeadBandMinus);
      }
      if (frequencyDeadBandPlus_ != null) {
        _single_frequencyDeadBandPlus_codec.WriteTagAndValue(output, FrequencyDeadBandPlus);
      }
      if (frequencyRegulationCtl_ != null) {
        _single_frequencyRegulationCtl_codec.WriteTagAndValue(output, FrequencyRegulationCtl);
      }
      if (frequencySetPoint_ != null) {
        _single_frequencySetPoint_codec.WriteTagAndValue(output, FrequencySetPoint);
      }
      if (gridFrequencyStableBandMinus_ != null) {
        _single_gridFrequencyStableBandMinus_codec.WriteTagAndValue(output, GridFrequencyStableBandMinus);
      }
      if (gridFrequencyStableBandPlus_ != null) {
        _single_gridFrequencyStableBandPlus_codec.WriteTagAndValue(output, GridFrequencyStableBandPlus);
      }
      if (overFrequencyDroop_ != null) {
        _single_overFrequencyDroop_codec.WriteTagAndValue(output, OverFrequencyDroop);
      }
      if (underFrequencyDroop_ != null) {
        _single_underFrequencyDroop_codec.WriteTagAndValue(output, UnderFrequencyDroop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (frequencyDeadBandMinus_ != null) {
        _single_frequencyDeadBandMinus_codec.WriteTagAndValue(ref output, FrequencyDeadBandMinus);
      }
      if (frequencyDeadBandPlus_ != null) {
        _single_frequencyDeadBandPlus_codec.WriteTagAndValue(ref output, FrequencyDeadBandPlus);
      }
      if (frequencyRegulationCtl_ != null) {
        _single_frequencyRegulationCtl_codec.WriteTagAndValue(ref output, FrequencyRegulationCtl);
      }
      if (frequencySetPoint_ != null) {
        _single_frequencySetPoint_codec.WriteTagAndValue(ref output, FrequencySetPoint);
      }
      if (gridFrequencyStableBandMinus_ != null) {
        _single_gridFrequencyStableBandMinus_codec.WriteTagAndValue(ref output, GridFrequencyStableBandMinus);
      }
      if (gridFrequencyStableBandPlus_ != null) {
        _single_gridFrequencyStableBandPlus_codec.WriteTagAndValue(ref output, GridFrequencyStableBandPlus);
      }
      if (overFrequencyDroop_ != null) {
        _single_overFrequencyDroop_codec.WriteTagAndValue(ref output, OverFrequencyDroop);
      }
      if (underFrequencyDroop_ != null) {
        _single_underFrequencyDroop_codec.WriteTagAndValue(ref output, UnderFrequencyDroop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frequencyDeadBandMinus_ != null) {
        size += _single_frequencyDeadBandMinus_codec.CalculateSizeWithTag(FrequencyDeadBandMinus);
      }
      if (frequencyDeadBandPlus_ != null) {
        size += _single_frequencyDeadBandPlus_codec.CalculateSizeWithTag(FrequencyDeadBandPlus);
      }
      if (frequencyRegulationCtl_ != null) {
        size += _single_frequencyRegulationCtl_codec.CalculateSizeWithTag(FrequencyRegulationCtl);
      }
      if (frequencySetPoint_ != null) {
        size += _single_frequencySetPoint_codec.CalculateSizeWithTag(FrequencySetPoint);
      }
      if (gridFrequencyStableBandMinus_ != null) {
        size += _single_gridFrequencyStableBandMinus_codec.CalculateSizeWithTag(GridFrequencyStableBandMinus);
      }
      if (gridFrequencyStableBandPlus_ != null) {
        size += _single_gridFrequencyStableBandPlus_codec.CalculateSizeWithTag(GridFrequencyStableBandPlus);
      }
      if (overFrequencyDroop_ != null) {
        size += _single_overFrequencyDroop_codec.CalculateSizeWithTag(OverFrequencyDroop);
      }
      if (underFrequencyDroop_ != null) {
        size += _single_underFrequencyDroop_codec.CalculateSizeWithTag(UnderFrequencyDroop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrequencyRegulation other) {
      if (other == null) {
        return;
      }
      if (other.frequencyDeadBandMinus_ != null) {
        if (frequencyDeadBandMinus_ == null || other.FrequencyDeadBandMinus != 0F) {
          FrequencyDeadBandMinus = other.FrequencyDeadBandMinus;
        }
      }
      if (other.frequencyDeadBandPlus_ != null) {
        if (frequencyDeadBandPlus_ == null || other.FrequencyDeadBandPlus != 0F) {
          FrequencyDeadBandPlus = other.FrequencyDeadBandPlus;
        }
      }
      if (other.frequencyRegulationCtl_ != null) {
        if (frequencyRegulationCtl_ == null || other.FrequencyRegulationCtl != false) {
          FrequencyRegulationCtl = other.FrequencyRegulationCtl;
        }
      }
      if (other.frequencySetPoint_ != null) {
        if (frequencySetPoint_ == null || other.FrequencySetPoint != 0F) {
          FrequencySetPoint = other.FrequencySetPoint;
        }
      }
      if (other.gridFrequencyStableBandMinus_ != null) {
        if (gridFrequencyStableBandMinus_ == null || other.GridFrequencyStableBandMinus != 0F) {
          GridFrequencyStableBandMinus = other.GridFrequencyStableBandMinus;
        }
      }
      if (other.gridFrequencyStableBandPlus_ != null) {
        if (gridFrequencyStableBandPlus_ == null || other.GridFrequencyStableBandPlus != 0F) {
          GridFrequencyStableBandPlus = other.GridFrequencyStableBandPlus;
        }
      }
      if (other.overFrequencyDroop_ != null) {
        if (overFrequencyDroop_ == null || other.OverFrequencyDroop != 0F) {
          OverFrequencyDroop = other.OverFrequencyDroop;
        }
      }
      if (other.underFrequencyDroop_ != null) {
        if (underFrequencyDroop_ == null || other.UnderFrequencyDroop != 0F) {
          UnderFrequencyDroop = other.UnderFrequencyDroop;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_frequencyDeadBandMinus_codec.Read(input);
            if (frequencyDeadBandMinus_ == null || value != 0F) {
              FrequencyDeadBandMinus = value;
            }
            break;
          }
          case 18: {
            float? value = _single_frequencyDeadBandPlus_codec.Read(input);
            if (frequencyDeadBandPlus_ == null || value != 0F) {
              FrequencyDeadBandPlus = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_frequencyRegulationCtl_codec.Read(input);
            if (frequencyRegulationCtl_ == null || value != false) {
              FrequencyRegulationCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_frequencySetPoint_codec.Read(input);
            if (frequencySetPoint_ == null || value != 0F) {
              FrequencySetPoint = value;
            }
            break;
          }
          case 42: {
            float? value = _single_gridFrequencyStableBandMinus_codec.Read(input);
            if (gridFrequencyStableBandMinus_ == null || value != 0F) {
              GridFrequencyStableBandMinus = value;
            }
            break;
          }
          case 50: {
            float? value = _single_gridFrequencyStableBandPlus_codec.Read(input);
            if (gridFrequencyStableBandPlus_ == null || value != 0F) {
              GridFrequencyStableBandPlus = value;
            }
            break;
          }
          case 58: {
            float? value = _single_overFrequencyDroop_codec.Read(input);
            if (overFrequencyDroop_ == null || value != 0F) {
              OverFrequencyDroop = value;
            }
            break;
          }
          case 66: {
            float? value = _single_underFrequencyDroop_codec.Read(input);
            if (underFrequencyDroop_ == null || value != 0F) {
              UnderFrequencyDroop = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_frequencyDeadBandMinus_codec.Read(ref input);
            if (frequencyDeadBandMinus_ == null || value != 0F) {
              FrequencyDeadBandMinus = value;
            }
            break;
          }
          case 18: {
            float? value = _single_frequencyDeadBandPlus_codec.Read(ref input);
            if (frequencyDeadBandPlus_ == null || value != 0F) {
              FrequencyDeadBandPlus = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_frequencyRegulationCtl_codec.Read(ref input);
            if (frequencyRegulationCtl_ == null || value != false) {
              FrequencyRegulationCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_frequencySetPoint_codec.Read(ref input);
            if (frequencySetPoint_ == null || value != 0F) {
              FrequencySetPoint = value;
            }
            break;
          }
          case 42: {
            float? value = _single_gridFrequencyStableBandMinus_codec.Read(ref input);
            if (gridFrequencyStableBandMinus_ == null || value != 0F) {
              GridFrequencyStableBandMinus = value;
            }
            break;
          }
          case 50: {
            float? value = _single_gridFrequencyStableBandPlus_codec.Read(ref input);
            if (gridFrequencyStableBandPlus_ == null || value != 0F) {
              GridFrequencyStableBandPlus = value;
            }
            break;
          }
          case 58: {
            float? value = _single_overFrequencyDroop_codec.Read(ref input);
            if (overFrequencyDroop_ == null || value != 0F) {
              OverFrequencyDroop = value;
            }
            break;
          }
          case 66: {
            float? value = _single_underFrequencyDroop_codec.Read(ref input);
            if (underFrequencyDroop_ == null || value != 0F) {
              UnderFrequencyDroop = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to maintain power level by charging or discharging
  /// </summary>
  public sealed partial class PeakShaving : pb::IMessage<PeakShaving>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeakShaving> _parser = new pb::MessageParser<PeakShaving>(() => new PeakShaving());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeakShaving> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeakShaving() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeakShaving(PeakShaving other) : this() {
      BaseShavingLimit = other.BaseShavingLimit;
      PeakShavingCtl = other.PeakShavingCtl;
      PeakShavingLimit = other.PeakShavingLimit;
      SocManagementAllowedHighLimit = other.SocManagementAllowedHighLimit;
      SocManagementAllowedLowLimit = other.SocManagementAllowedLowLimit;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeakShaving Clone() {
      return new PeakShaving(this);
    }

    /// <summary>Field number for the "baseShavingLimit" field.</summary>
    public const int BaseShavingLimitFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_baseShavingLimit_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? baseShavingLimit_;
    /// <summary>
    /// uint/1kW  If the supervised power goes below this limit, the ESS will charge to maintain this limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? BaseShavingLimit {
      get { return baseShavingLimit_; }
      set {
        baseShavingLimit_ = value;
      }
    }


    /// <summary>Field number for the "peakShavingCtl" field.</summary>
    public const int PeakShavingCtlFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_peakShavingCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? peakShavingCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? PeakShavingCtl {
      get { return peakShavingCtl_; }
      set {
        peakShavingCtl_ = value;
      }
    }


    /// <summary>Field number for the "peakShavingLimit" field.</summary>
    public const int PeakShavingLimitFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_peakShavingLimit_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? peakShavingLimit_;
    /// <summary>
    /// uint/1kW  If the supervised power goes above this limit, the ESS will discharge to maintain this
    /// limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PeakShavingLimit {
      get { return peakShavingLimit_; }
      set {
        peakShavingLimit_ = value;
      }
    }


    /// <summary>Field number for the "socManagementAllowedHighLimit" field.</summary>
    public const int SocManagementAllowedHighLimitFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_socManagementAllowedHighLimit_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? socManagementAllowedHighLimit_;
    /// <summary>
    /// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
    /// management is allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocManagementAllowedHighLimit {
      get { return socManagementAllowedHighLimit_; }
      set {
        socManagementAllowedHighLimit_ = value;
      }
    }


    /// <summary>Field number for the "socManagementAllowedLowLimit" field.</summary>
    public const int SocManagementAllowedLowLimitFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_socManagementAllowedLowLimit_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? socManagementAllowedLowLimit_;
    /// <summary>
    /// uint/1kW  If the supervised power is between the band defined by these two limits then SOC
    /// management is allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocManagementAllowedLowLimit {
      get { return socManagementAllowedLowLimit_; }
      set {
        socManagementAllowedLowLimit_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeakShaving);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeakShaving other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(BaseShavingLimit, other.BaseShavingLimit)) return false;
      if (PeakShavingCtl != other.PeakShavingCtl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PeakShavingLimit, other.PeakShavingLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocManagementAllowedHighLimit, other.SocManagementAllowedHighLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocManagementAllowedLowLimit, other.SocManagementAllowedLowLimit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseShavingLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(BaseShavingLimit);
      if (peakShavingCtl_ != null) hash ^= PeakShavingCtl.GetHashCode();
      if (peakShavingLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PeakShavingLimit);
      if (socManagementAllowedHighLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocManagementAllowedHighLimit);
      if (socManagementAllowedLowLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocManagementAllowedLowLimit);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (baseShavingLimit_ != null) {
        _single_baseShavingLimit_codec.WriteTagAndValue(output, BaseShavingLimit);
      }
      if (peakShavingCtl_ != null) {
        _single_peakShavingCtl_codec.WriteTagAndValue(output, PeakShavingCtl);
      }
      if (peakShavingLimit_ != null) {
        _single_peakShavingLimit_codec.WriteTagAndValue(output, PeakShavingLimit);
      }
      if (socManagementAllowedHighLimit_ != null) {
        _single_socManagementAllowedHighLimit_codec.WriteTagAndValue(output, SocManagementAllowedHighLimit);
      }
      if (socManagementAllowedLowLimit_ != null) {
        _single_socManagementAllowedLowLimit_codec.WriteTagAndValue(output, SocManagementAllowedLowLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (baseShavingLimit_ != null) {
        _single_baseShavingLimit_codec.WriteTagAndValue(ref output, BaseShavingLimit);
      }
      if (peakShavingCtl_ != null) {
        _single_peakShavingCtl_codec.WriteTagAndValue(ref output, PeakShavingCtl);
      }
      if (peakShavingLimit_ != null) {
        _single_peakShavingLimit_codec.WriteTagAndValue(ref output, PeakShavingLimit);
      }
      if (socManagementAllowedHighLimit_ != null) {
        _single_socManagementAllowedHighLimit_codec.WriteTagAndValue(ref output, SocManagementAllowedHighLimit);
      }
      if (socManagementAllowedLowLimit_ != null) {
        _single_socManagementAllowedLowLimit_codec.WriteTagAndValue(ref output, SocManagementAllowedLowLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseShavingLimit_ != null) {
        size += _single_baseShavingLimit_codec.CalculateSizeWithTag(BaseShavingLimit);
      }
      if (peakShavingCtl_ != null) {
        size += _single_peakShavingCtl_codec.CalculateSizeWithTag(PeakShavingCtl);
      }
      if (peakShavingLimit_ != null) {
        size += _single_peakShavingLimit_codec.CalculateSizeWithTag(PeakShavingLimit);
      }
      if (socManagementAllowedHighLimit_ != null) {
        size += _single_socManagementAllowedHighLimit_codec.CalculateSizeWithTag(SocManagementAllowedHighLimit);
      }
      if (socManagementAllowedLowLimit_ != null) {
        size += _single_socManagementAllowedLowLimit_codec.CalculateSizeWithTag(SocManagementAllowedLowLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeakShaving other) {
      if (other == null) {
        return;
      }
      if (other.baseShavingLimit_ != null) {
        if (baseShavingLimit_ == null || other.BaseShavingLimit != 0F) {
          BaseShavingLimit = other.BaseShavingLimit;
        }
      }
      if (other.peakShavingCtl_ != null) {
        if (peakShavingCtl_ == null || other.PeakShavingCtl != false) {
          PeakShavingCtl = other.PeakShavingCtl;
        }
      }
      if (other.peakShavingLimit_ != null) {
        if (peakShavingLimit_ == null || other.PeakShavingLimit != 0F) {
          PeakShavingLimit = other.PeakShavingLimit;
        }
      }
      if (other.socManagementAllowedHighLimit_ != null) {
        if (socManagementAllowedHighLimit_ == null || other.SocManagementAllowedHighLimit != 0F) {
          SocManagementAllowedHighLimit = other.SocManagementAllowedHighLimit;
        }
      }
      if (other.socManagementAllowedLowLimit_ != null) {
        if (socManagementAllowedLowLimit_ == null || other.SocManagementAllowedLowLimit != 0F) {
          SocManagementAllowedLowLimit = other.SocManagementAllowedLowLimit;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_baseShavingLimit_codec.Read(input);
            if (baseShavingLimit_ == null || value != 0F) {
              BaseShavingLimit = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_peakShavingCtl_codec.Read(input);
            if (peakShavingCtl_ == null || value != false) {
              PeakShavingCtl = value;
            }
            break;
          }
          case 26: {
            float? value = _single_peakShavingLimit_codec.Read(input);
            if (peakShavingLimit_ == null || value != 0F) {
              PeakShavingLimit = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socManagementAllowedHighLimit_codec.Read(input);
            if (socManagementAllowedHighLimit_ == null || value != 0F) {
              SocManagementAllowedHighLimit = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socManagementAllowedLowLimit_codec.Read(input);
            if (socManagementAllowedLowLimit_ == null || value != 0F) {
              SocManagementAllowedLowLimit = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_baseShavingLimit_codec.Read(ref input);
            if (baseShavingLimit_ == null || value != 0F) {
              BaseShavingLimit = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_peakShavingCtl_codec.Read(ref input);
            if (peakShavingCtl_ == null || value != false) {
              PeakShavingCtl = value;
            }
            break;
          }
          case 26: {
            float? value = _single_peakShavingLimit_codec.Read(ref input);
            if (peakShavingLimit_ == null || value != 0F) {
              PeakShavingLimit = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socManagementAllowedHighLimit_codec.Read(ref input);
            if (socManagementAllowedHighLimit_ == null || value != 0F) {
              SocManagementAllowedHighLimit = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socManagementAllowedLowLimit_codec.Read(ref input);
            if (socManagementAllowedLowLimit_ == null || value != 0F) {
              SocManagementAllowedLowLimit = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
  /// </summary>
  public sealed partial class SocLimit : pb::IMessage<SocLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SocLimit> _parser = new pb::MessageParser<SocLimit>(() => new SocLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SocLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocLimit(SocLimit other) : this() {
      SocHighLimit = other.SocHighLimit;
      SocHighLimitHysteresis = other.SocHighLimitHysteresis;
      SocLimitCtl = other.SocLimitCtl;
      SocLowLimit = other.SocLowLimit;
      SocLowLimitHysteresis = other.SocLowLimitHysteresis;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SocLimit Clone() {
      return new SocLimit(this);
    }

    /// <summary>Field number for the "socHighLimit" field.</summary>
    public const int SocHighLimitFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_socHighLimit_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? socHighLimit_;
    /// <summary>
    /// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
    /// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
    /// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
    /// discharging is blocked until the hysteresis is overcome.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocHighLimit {
      get { return socHighLimit_; }
      set {
        socHighLimit_ = value;
      }
    }


    /// <summary>Field number for the "socHighLimitHysteresis" field.</summary>
    public const int SocHighLimitHysteresisFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_socHighLimitHysteresis_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? socHighLimitHysteresis_;
    /// <summary>
    /// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
    /// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
    /// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
    /// discharging is blocked until the hysteresis is overcome.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocHighLimitHysteresis {
      get { return socHighLimitHysteresis_; }
      set {
        socHighLimitHysteresis_ = value;
      }
    }


    /// <summary>Field number for the "socLimitCtl" field.</summary>
    public const int SocLimitCtlFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_socLimitCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? socLimitCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SocLimitCtl {
      get { return socLimitCtl_; }
      set {
        socLimitCtl_ = value;
      }
    }


    /// <summary>Field number for the "socLowLimit" field.</summary>
    public const int SocLowLimitFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_socLowLimit_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? socLowLimit_;
    /// <summary>
    /// uint/1%  These limits define the operational range of the battery. If a lineup reaches the SOC
    /// high limit, the inverter’s output is reduced to 0. Charging is then blocked until the hysteresis is
    /// overcome. The same logic applies to the SOC low limit, except that after the ramp down is complete,
    /// discharging is blocked until the hysteresis is overcome.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocLowLimit {
      get { return socLowLimit_; }
      set {
        socLowLimit_ = value;
      }
    }


    /// <summary>Field number for the "socLowLimitHysteresis" field.</summary>
    public const int SocLowLimitHysteresisFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_socLowLimitHysteresis_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? socLowLimitHysteresis_;
    /// <summary>
    /// uint/1%  These hysteresis define the release conditions for the block charge or discharge
    /// initiated by the SOC limits.For example, assume a SOC low limit of 10% and a SOC low limit
    /// hysteresis of 2% and that discharging is blocked because the batteries SOC reached the SOC low
    /// limit, discharging will only be allowed again after the battery’s SOC reaches 13%.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocLowLimitHysteresis {
      get { return socLowLimitHysteresis_; }
      set {
        socLowLimitHysteresis_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SocLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SocLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocHighLimit, other.SocHighLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocHighLimitHysteresis, other.SocHighLimitHysteresis)) return false;
      if (SocLimitCtl != other.SocLimitCtl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocLowLimit, other.SocLowLimit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocLowLimitHysteresis, other.SocLowLimitHysteresis)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (socHighLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocHighLimit);
      if (socHighLimitHysteresis_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocHighLimitHysteresis);
      if (socLimitCtl_ != null) hash ^= SocLimitCtl.GetHashCode();
      if (socLowLimit_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocLowLimit);
      if (socLowLimitHysteresis_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocLowLimitHysteresis);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (socHighLimit_ != null) {
        _single_socHighLimit_codec.WriteTagAndValue(output, SocHighLimit);
      }
      if (socHighLimitHysteresis_ != null) {
        _single_socHighLimitHysteresis_codec.WriteTagAndValue(output, SocHighLimitHysteresis);
      }
      if (socLimitCtl_ != null) {
        _single_socLimitCtl_codec.WriteTagAndValue(output, SocLimitCtl);
      }
      if (socLowLimit_ != null) {
        _single_socLowLimit_codec.WriteTagAndValue(output, SocLowLimit);
      }
      if (socLowLimitHysteresis_ != null) {
        _single_socLowLimitHysteresis_codec.WriteTagAndValue(output, SocLowLimitHysteresis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (socHighLimit_ != null) {
        _single_socHighLimit_codec.WriteTagAndValue(ref output, SocHighLimit);
      }
      if (socHighLimitHysteresis_ != null) {
        _single_socHighLimitHysteresis_codec.WriteTagAndValue(ref output, SocHighLimitHysteresis);
      }
      if (socLimitCtl_ != null) {
        _single_socLimitCtl_codec.WriteTagAndValue(ref output, SocLimitCtl);
      }
      if (socLowLimit_ != null) {
        _single_socLowLimit_codec.WriteTagAndValue(ref output, SocLowLimit);
      }
      if (socLowLimitHysteresis_ != null) {
        _single_socLowLimitHysteresis_codec.WriteTagAndValue(ref output, SocLowLimitHysteresis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (socHighLimit_ != null) {
        size += _single_socHighLimit_codec.CalculateSizeWithTag(SocHighLimit);
      }
      if (socHighLimitHysteresis_ != null) {
        size += _single_socHighLimitHysteresis_codec.CalculateSizeWithTag(SocHighLimitHysteresis);
      }
      if (socLimitCtl_ != null) {
        size += _single_socLimitCtl_codec.CalculateSizeWithTag(SocLimitCtl);
      }
      if (socLowLimit_ != null) {
        size += _single_socLowLimit_codec.CalculateSizeWithTag(SocLowLimit);
      }
      if (socLowLimitHysteresis_ != null) {
        size += _single_socLowLimitHysteresis_codec.CalculateSizeWithTag(SocLowLimitHysteresis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SocLimit other) {
      if (other == null) {
        return;
      }
      if (other.socHighLimit_ != null) {
        if (socHighLimit_ == null || other.SocHighLimit != 0F) {
          SocHighLimit = other.SocHighLimit;
        }
      }
      if (other.socHighLimitHysteresis_ != null) {
        if (socHighLimitHysteresis_ == null || other.SocHighLimitHysteresis != 0F) {
          SocHighLimitHysteresis = other.SocHighLimitHysteresis;
        }
      }
      if (other.socLimitCtl_ != null) {
        if (socLimitCtl_ == null || other.SocLimitCtl != false) {
          SocLimitCtl = other.SocLimitCtl;
        }
      }
      if (other.socLowLimit_ != null) {
        if (socLowLimit_ == null || other.SocLowLimit != 0F) {
          SocLowLimit = other.SocLowLimit;
        }
      }
      if (other.socLowLimitHysteresis_ != null) {
        if (socLowLimitHysteresis_ == null || other.SocLowLimitHysteresis != 0F) {
          SocLowLimitHysteresis = other.SocLowLimitHysteresis;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_socHighLimit_codec.Read(input);
            if (socHighLimit_ == null || value != 0F) {
              SocHighLimit = value;
            }
            break;
          }
          case 18: {
            float? value = _single_socHighLimitHysteresis_codec.Read(input);
            if (socHighLimitHysteresis_ == null || value != 0F) {
              SocHighLimitHysteresis = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_socLimitCtl_codec.Read(input);
            if (socLimitCtl_ == null || value != false) {
              SocLimitCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socLowLimit_codec.Read(input);
            if (socLowLimit_ == null || value != 0F) {
              SocLowLimit = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socLowLimitHysteresis_codec.Read(input);
            if (socLowLimitHysteresis_ == null || value != 0F) {
              SocLowLimitHysteresis = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_socHighLimit_codec.Read(ref input);
            if (socHighLimit_ == null || value != 0F) {
              SocHighLimit = value;
            }
            break;
          }
          case 18: {
            float? value = _single_socHighLimitHysteresis_codec.Read(ref input);
            if (socHighLimitHysteresis_ == null || value != 0F) {
              SocHighLimitHysteresis = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_socLimitCtl_codec.Read(ref input);
            if (socLimitCtl_ == null || value != false) {
              SocLimitCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socLowLimit_codec.Read(ref input);
            if (socLowLimit_ == null || value != 0F) {
              SocLowLimit = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socLowLimitHysteresis_codec.Read(ref input);
            if (socLowLimitHysteresis_ == null || value != 0F) {
              SocLowLimitHysteresis = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to maintain SOC within dead bands
  /// </summary>
  public sealed partial class SOCManagement : pb::IMessage<SOCManagement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SOCManagement> _parser = new pb::MessageParser<SOCManagement>(() => new SOCManagement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SOCManagement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOCManagement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOCManagement(SOCManagement other) : this() {
      SocDeadBandMinus = other.SocDeadBandMinus;
      SocDeadBandPlus = other.SocDeadBandPlus;
      SocManagementCtl = other.SocManagementCtl;
      SocPowerSetPoint = other.SocPowerSetPoint;
      SocSetPoint = other.SocSetPoint;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SOCManagement Clone() {
      return new SOCManagement(this);
    }

    /// <summary>Field number for the "socDeadBandMinus" field.</summary>
    public const int SocDeadBandMinusFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_socDeadBandMinus_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? socDeadBandMinus_;
    /// <summary>
    /// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
    /// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
    /// + dead band plus Lower DB = set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocDeadBandMinus {
      get { return socDeadBandMinus_; }
      set {
        socDeadBandMinus_ = value;
      }
    }


    /// <summary>Field number for the "socDeadBandPlus" field.</summary>
    public const int SocDeadBandPlusFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_socDeadBandPlus_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? socDeadBandPlus_;
    /// <summary>
    /// uint/1%  Define a dead band (DB) around the SOC set point. When the battery SOC goes outside the
    /// dead band, the SOC management executes and bring the SOC back to the set point. Upper DB = set point
    /// + dead band plus Lower DB = set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocDeadBandPlus {
      get { return socDeadBandPlus_; }
      set {
        socDeadBandPlus_ = value;
      }
    }


    /// <summary>Field number for the "socManagementCtl" field.</summary>
    public const int SocManagementCtlFieldNumber = 3;
    private static readonly pb::FieldCodec<bool?> _single_socManagementCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(26);
    private bool? socManagementCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SocManagementCtl {
      get { return socManagementCtl_; }
      set {
        socManagementCtl_ = value;
      }
    }


    /// <summary>Field number for the "socPowerSetPoint" field.</summary>
    public const int SocPowerSetPointFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_socPowerSetPoint_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? socPowerSetPoint_;
    /// <summary>
    /// uint/1kW  Set point used for SOC maintenance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocPowerSetPoint {
      get { return socPowerSetPoint_; }
      set {
        socPowerSetPoint_ = value;
      }
    }


    /// <summary>Field number for the "socSetPoint" field.</summary>
    public const int SocSetPointFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_socSetPoint_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? socSetPoint_;
    /// <summary>
    /// uint/1%  SOC Target in percentage (%).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? SocSetPoint {
      get { return socSetPoint_; }
      set {
        socSetPoint_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SOCManagement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SOCManagement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocDeadBandMinus, other.SocDeadBandMinus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocDeadBandPlus, other.SocDeadBandPlus)) return false;
      if (SocManagementCtl != other.SocManagementCtl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocPowerSetPoint, other.SocPowerSetPoint)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(SocSetPoint, other.SocSetPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (socDeadBandMinus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocDeadBandMinus);
      if (socDeadBandPlus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocDeadBandPlus);
      if (socManagementCtl_ != null) hash ^= SocManagementCtl.GetHashCode();
      if (socPowerSetPoint_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocPowerSetPoint);
      if (socSetPoint_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(SocSetPoint);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (socDeadBandMinus_ != null) {
        _single_socDeadBandMinus_codec.WriteTagAndValue(output, SocDeadBandMinus);
      }
      if (socDeadBandPlus_ != null) {
        _single_socDeadBandPlus_codec.WriteTagAndValue(output, SocDeadBandPlus);
      }
      if (socManagementCtl_ != null) {
        _single_socManagementCtl_codec.WriteTagAndValue(output, SocManagementCtl);
      }
      if (socPowerSetPoint_ != null) {
        _single_socPowerSetPoint_codec.WriteTagAndValue(output, SocPowerSetPoint);
      }
      if (socSetPoint_ != null) {
        _single_socSetPoint_codec.WriteTagAndValue(output, SocSetPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (socDeadBandMinus_ != null) {
        _single_socDeadBandMinus_codec.WriteTagAndValue(ref output, SocDeadBandMinus);
      }
      if (socDeadBandPlus_ != null) {
        _single_socDeadBandPlus_codec.WriteTagAndValue(ref output, SocDeadBandPlus);
      }
      if (socManagementCtl_ != null) {
        _single_socManagementCtl_codec.WriteTagAndValue(ref output, SocManagementCtl);
      }
      if (socPowerSetPoint_ != null) {
        _single_socPowerSetPoint_codec.WriteTagAndValue(ref output, SocPowerSetPoint);
      }
      if (socSetPoint_ != null) {
        _single_socSetPoint_codec.WriteTagAndValue(ref output, SocSetPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (socDeadBandMinus_ != null) {
        size += _single_socDeadBandMinus_codec.CalculateSizeWithTag(SocDeadBandMinus);
      }
      if (socDeadBandPlus_ != null) {
        size += _single_socDeadBandPlus_codec.CalculateSizeWithTag(SocDeadBandPlus);
      }
      if (socManagementCtl_ != null) {
        size += _single_socManagementCtl_codec.CalculateSizeWithTag(SocManagementCtl);
      }
      if (socPowerSetPoint_ != null) {
        size += _single_socPowerSetPoint_codec.CalculateSizeWithTag(SocPowerSetPoint);
      }
      if (socSetPoint_ != null) {
        size += _single_socSetPoint_codec.CalculateSizeWithTag(SocSetPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SOCManagement other) {
      if (other == null) {
        return;
      }
      if (other.socDeadBandMinus_ != null) {
        if (socDeadBandMinus_ == null || other.SocDeadBandMinus != 0F) {
          SocDeadBandMinus = other.SocDeadBandMinus;
        }
      }
      if (other.socDeadBandPlus_ != null) {
        if (socDeadBandPlus_ == null || other.SocDeadBandPlus != 0F) {
          SocDeadBandPlus = other.SocDeadBandPlus;
        }
      }
      if (other.socManagementCtl_ != null) {
        if (socManagementCtl_ == null || other.SocManagementCtl != false) {
          SocManagementCtl = other.SocManagementCtl;
        }
      }
      if (other.socPowerSetPoint_ != null) {
        if (socPowerSetPoint_ == null || other.SocPowerSetPoint != 0F) {
          SocPowerSetPoint = other.SocPowerSetPoint;
        }
      }
      if (other.socSetPoint_ != null) {
        if (socSetPoint_ == null || other.SocSetPoint != 0F) {
          SocSetPoint = other.SocSetPoint;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_socDeadBandMinus_codec.Read(input);
            if (socDeadBandMinus_ == null || value != 0F) {
              SocDeadBandMinus = value;
            }
            break;
          }
          case 18: {
            float? value = _single_socDeadBandPlus_codec.Read(input);
            if (socDeadBandPlus_ == null || value != 0F) {
              SocDeadBandPlus = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_socManagementCtl_codec.Read(input);
            if (socManagementCtl_ == null || value != false) {
              SocManagementCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socPowerSetPoint_codec.Read(input);
            if (socPowerSetPoint_ == null || value != 0F) {
              SocPowerSetPoint = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socSetPoint_codec.Read(input);
            if (socSetPoint_ == null || value != 0F) {
              SocSetPoint = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_socDeadBandMinus_codec.Read(ref input);
            if (socDeadBandMinus_ == null || value != 0F) {
              SocDeadBandMinus = value;
            }
            break;
          }
          case 18: {
            float? value = _single_socDeadBandPlus_codec.Read(ref input);
            if (socDeadBandPlus_ == null || value != 0F) {
              SocDeadBandPlus = value;
            }
            break;
          }
          case 26: {
            bool? value = _single_socManagementCtl_codec.Read(ref input);
            if (socManagementCtl_ == null || value != false) {
              SocManagementCtl = value;
            }
            break;
          }
          case 34: {
            float? value = _single_socPowerSetPoint_codec.Read(ref input);
            if (socPowerSetPoint_ == null || value != 0F) {
              SocPowerSetPoint = value;
            }
            break;
          }
          case 42: {
            float? value = _single_socSetPoint_codec.Read(ref input);
            if (socSetPoint_ == null || value != 0F) {
              SocSetPoint = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Voltage regulation function
  /// </summary>
  public sealed partial class VoltageRegulation : pb::IMessage<VoltageRegulation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VoltageRegulation> _parser = new pb::MessageParser<VoltageRegulation>(() => new VoltageRegulation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoltageRegulation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageRegulation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageRegulation(VoltageRegulation other) : this() {
      OverVoltageDroop = other.OverVoltageDroop;
      UnderVoltageDroop = other.UnderVoltageDroop;
      VoltageDeadBandMinus = other.VoltageDeadBandMinus;
      VoltageDeadBandPlus = other.VoltageDeadBandPlus;
      VoltageSetPoint = other.VoltageSetPoint;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageRegulation Clone() {
      return new VoltageRegulation(this);
    }

    /// <summary>Field number for the "overVoltageDroop" field.</summary>
    public const int OverVoltageDroopFieldNumber = 1;
    private static readonly pb::FieldCodec<float?> _single_overVoltageDroop_codec = pb::FieldCodec.ForStructWrapper<float>(10);
    private float? overVoltageDroop_;
    /// <summary>
    /// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
    /// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
    /// upper or lower dead band. The minimum droop value possible is 0.8%.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? OverVoltageDroop {
      get { return overVoltageDroop_; }
      set {
        overVoltageDroop_ = value;
      }
    }


    /// <summary>Field number for the "underVoltageDroop" field.</summary>
    public const int UnderVoltageDroopFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_underVoltageDroop_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? underVoltageDroop_;
    /// <summary>
    /// uint/0.1%  The droops define the reaction of the PCS to under/over voltage events. A droop of 1%
    /// means that the PCS will output 100% power if the voltage is 1% of the nominal voltage away from the
    /// upper or lower dead band. The minimum droop value possible is 0.8%.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? UnderVoltageDroop {
      get { return underVoltageDroop_; }
      set {
        underVoltageDroop_ = value;
      }
    }


    /// <summary>Field number for the "voltageDeadBandMinus" field.</summary>
    public const int VoltageDeadBandMinusFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_voltageDeadBandMinus_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? voltageDeadBandMinus_;
    /// <summary>
    /// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
    /// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
    /// set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? VoltageDeadBandMinus {
      get { return voltageDeadBandMinus_; }
      set {
        voltageDeadBandMinus_ = value;
      }
    }


    /// <summary>Field number for the "voltageDeadBandPlus" field.</summary>
    public const int VoltageDeadBandPlusFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_voltageDeadBandPlus_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? voltageDeadBandPlus_;
    /// <summary>
    /// uint/0.1V  Voltage regulation is performed when the grid voltage goes beyond the dead bands. The
    /// dead bands are defined as follows: Upper DB = voltage set point + dead band plus Lower DB = voltage
    /// set point – dead band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? VoltageDeadBandPlus {
      get { return voltageDeadBandPlus_; }
      set {
        voltageDeadBandPlus_ = value;
      }
    }


    /// <summary>Field number for the "voltageSetPoint" field.</summary>
    public const int VoltageSetPointFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_voltageSetPoint_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? voltageSetPoint_;
    /// <summary>
    /// uint/0.1V  Other modes of operation, such as peak shaving, smoothing or SOC management may
    /// operate if the grid frequency is within the stable band. Upper stable band = frequency set point +
    /// band plus Lower stable band = frequency set point – band minus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? VoltageSetPoint {
      get { return voltageSetPoint_; }
      set {
        voltageSetPoint_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoltageRegulation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoltageRegulation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(OverVoltageDroop, other.OverVoltageDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(UnderVoltageDroop, other.UnderVoltageDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(VoltageDeadBandMinus, other.VoltageDeadBandMinus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(VoltageDeadBandPlus, other.VoltageDeadBandPlus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(VoltageSetPoint, other.VoltageSetPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (overVoltageDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(OverVoltageDroop);
      if (underVoltageDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(UnderVoltageDroop);
      if (voltageDeadBandMinus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(VoltageDeadBandMinus);
      if (voltageDeadBandPlus_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(VoltageDeadBandPlus);
      if (voltageSetPoint_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(VoltageSetPoint);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (overVoltageDroop_ != null) {
        _single_overVoltageDroop_codec.WriteTagAndValue(output, OverVoltageDroop);
      }
      if (underVoltageDroop_ != null) {
        _single_underVoltageDroop_codec.WriteTagAndValue(output, UnderVoltageDroop);
      }
      if (voltageDeadBandMinus_ != null) {
        _single_voltageDeadBandMinus_codec.WriteTagAndValue(output, VoltageDeadBandMinus);
      }
      if (voltageDeadBandPlus_ != null) {
        _single_voltageDeadBandPlus_codec.WriteTagAndValue(output, VoltageDeadBandPlus);
      }
      if (voltageSetPoint_ != null) {
        _single_voltageSetPoint_codec.WriteTagAndValue(output, VoltageSetPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (overVoltageDroop_ != null) {
        _single_overVoltageDroop_codec.WriteTagAndValue(ref output, OverVoltageDroop);
      }
      if (underVoltageDroop_ != null) {
        _single_underVoltageDroop_codec.WriteTagAndValue(ref output, UnderVoltageDroop);
      }
      if (voltageDeadBandMinus_ != null) {
        _single_voltageDeadBandMinus_codec.WriteTagAndValue(ref output, VoltageDeadBandMinus);
      }
      if (voltageDeadBandPlus_ != null) {
        _single_voltageDeadBandPlus_codec.WriteTagAndValue(ref output, VoltageDeadBandPlus);
      }
      if (voltageSetPoint_ != null) {
        _single_voltageSetPoint_codec.WriteTagAndValue(ref output, VoltageSetPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (overVoltageDroop_ != null) {
        size += _single_overVoltageDroop_codec.CalculateSizeWithTag(OverVoltageDroop);
      }
      if (underVoltageDroop_ != null) {
        size += _single_underVoltageDroop_codec.CalculateSizeWithTag(UnderVoltageDroop);
      }
      if (voltageDeadBandMinus_ != null) {
        size += _single_voltageDeadBandMinus_codec.CalculateSizeWithTag(VoltageDeadBandMinus);
      }
      if (voltageDeadBandPlus_ != null) {
        size += _single_voltageDeadBandPlus_codec.CalculateSizeWithTag(VoltageDeadBandPlus);
      }
      if (voltageSetPoint_ != null) {
        size += _single_voltageSetPoint_codec.CalculateSizeWithTag(VoltageSetPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoltageRegulation other) {
      if (other == null) {
        return;
      }
      if (other.overVoltageDroop_ != null) {
        if (overVoltageDroop_ == null || other.OverVoltageDroop != 0F) {
          OverVoltageDroop = other.OverVoltageDroop;
        }
      }
      if (other.underVoltageDroop_ != null) {
        if (underVoltageDroop_ == null || other.UnderVoltageDroop != 0F) {
          UnderVoltageDroop = other.UnderVoltageDroop;
        }
      }
      if (other.voltageDeadBandMinus_ != null) {
        if (voltageDeadBandMinus_ == null || other.VoltageDeadBandMinus != 0F) {
          VoltageDeadBandMinus = other.VoltageDeadBandMinus;
        }
      }
      if (other.voltageDeadBandPlus_ != null) {
        if (voltageDeadBandPlus_ == null || other.VoltageDeadBandPlus != 0F) {
          VoltageDeadBandPlus = other.VoltageDeadBandPlus;
        }
      }
      if (other.voltageSetPoint_ != null) {
        if (voltageSetPoint_ == null || other.VoltageSetPoint != 0F) {
          VoltageSetPoint = other.VoltageSetPoint;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            float? value = _single_overVoltageDroop_codec.Read(input);
            if (overVoltageDroop_ == null || value != 0F) {
              OverVoltageDroop = value;
            }
            break;
          }
          case 18: {
            float? value = _single_underVoltageDroop_codec.Read(input);
            if (underVoltageDroop_ == null || value != 0F) {
              UnderVoltageDroop = value;
            }
            break;
          }
          case 26: {
            float? value = _single_voltageDeadBandMinus_codec.Read(input);
            if (voltageDeadBandMinus_ == null || value != 0F) {
              VoltageDeadBandMinus = value;
            }
            break;
          }
          case 34: {
            float? value = _single_voltageDeadBandPlus_codec.Read(input);
            if (voltageDeadBandPlus_ == null || value != 0F) {
              VoltageDeadBandPlus = value;
            }
            break;
          }
          case 42: {
            float? value = _single_voltageSetPoint_codec.Read(input);
            if (voltageSetPoint_ == null || value != 0F) {
              VoltageSetPoint = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            float? value = _single_overVoltageDroop_codec.Read(ref input);
            if (overVoltageDroop_ == null || value != 0F) {
              OverVoltageDroop = value;
            }
            break;
          }
          case 18: {
            float? value = _single_underVoltageDroop_codec.Read(ref input);
            if (underVoltageDroop_ == null || value != 0F) {
              UnderVoltageDroop = value;
            }
            break;
          }
          case 26: {
            float? value = _single_voltageDeadBandMinus_codec.Read(ref input);
            if (voltageDeadBandMinus_ == null || value != 0F) {
              VoltageDeadBandMinus = value;
            }
            break;
          }
          case 34: {
            float? value = _single_voltageDeadBandPlus_codec.Read(ref input);
            if (voltageDeadBandPlus_ == null || value != 0F) {
              VoltageDeadBandPlus = value;
            }
            break;
          }
          case 42: {
            float? value = _single_voltageSetPoint_codec.Read(ref input);
            if (voltageSetPoint_ == null || value != 0F) {
              VoltageSetPoint = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to maintain voltage within droop dead bands.
  /// </summary>
  public sealed partial class VoltageDroop : pb::IMessage<VoltageDroop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VoltageDroop> _parser = new pb::MessageParser<VoltageDroop>(() => new VoltageDroop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoltageDroop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageDroop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageDroop(VoltageDroop other) : this() {
      VoltageDroopCtl = other.VoltageDroopCtl;
      voltageRegulation_ = other.voltageRegulation_ != null ? other.voltageRegulation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltageDroop Clone() {
      return new VoltageDroop(this);
    }

    /// <summary>Field number for the "voltageDroopCtl" field.</summary>
    public const int VoltageDroopCtlFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_voltageDroopCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? voltageDroopCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? VoltageDroopCtl {
      get { return voltageDroopCtl_; }
      set {
        voltageDroopCtl_ = value;
      }
    }


    /// <summary>Field number for the "voltageRegulation" field.</summary>
    public const int VoltageRegulationFieldNumber = 2;
    private global::openfmb.essmodule.VoltageRegulation voltageRegulation_;
    /// <summary>
    /// Voltage regulation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.VoltageRegulation VoltageRegulation {
      get { return voltageRegulation_; }
      set {
        voltageRegulation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoltageDroop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoltageDroop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VoltageDroopCtl != other.VoltageDroopCtl) return false;
      if (!object.Equals(VoltageRegulation, other.VoltageRegulation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voltageDroopCtl_ != null) hash ^= VoltageDroopCtl.GetHashCode();
      if (voltageRegulation_ != null) hash ^= VoltageRegulation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (voltageDroopCtl_ != null) {
        _single_voltageDroopCtl_codec.WriteTagAndValue(output, VoltageDroopCtl);
      }
      if (voltageRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VoltageRegulation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (voltageDroopCtl_ != null) {
        _single_voltageDroopCtl_codec.WriteTagAndValue(ref output, VoltageDroopCtl);
      }
      if (voltageRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VoltageRegulation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voltageDroopCtl_ != null) {
        size += _single_voltageDroopCtl_codec.CalculateSizeWithTag(VoltageDroopCtl);
      }
      if (voltageRegulation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageRegulation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoltageDroop other) {
      if (other == null) {
        return;
      }
      if (other.voltageDroopCtl_ != null) {
        if (voltageDroopCtl_ == null || other.VoltageDroopCtl != false) {
          VoltageDroopCtl = other.VoltageDroopCtl;
        }
      }
      if (other.voltageRegulation_ != null) {
        if (voltageRegulation_ == null) {
          VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
        }
        VoltageRegulation.MergeFrom(other.VoltageRegulation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_voltageDroopCtl_codec.Read(input);
            if (voltageDroopCtl_ == null || value != false) {
              VoltageDroopCtl = value;
            }
            break;
          }
          case 18: {
            if (voltageRegulation_ == null) {
              VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
            }
            input.ReadMessage(VoltageRegulation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bool? value = _single_voltageDroopCtl_codec.Read(ref input);
            if (voltageDroopCtl_ == null || value != false) {
              VoltageDroopCtl = value;
            }
            break;
          }
          case 18: {
            if (voltageRegulation_ == null) {
              VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
            }
            input.ReadMessage(VoltageRegulation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to maintain voltage within dead bands.
  /// </summary>
  public sealed partial class VoltagePI : pb::IMessage<VoltagePI>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VoltagePI> _parser = new pb::MessageParser<VoltagePI>(() => new VoltagePI());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoltagePI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltagePI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltagePI(VoltagePI other) : this() {
      VoltagePICtl = other.VoltagePICtl;
      voltageRegulation_ = other.voltageRegulation_ != null ? other.voltageRegulation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoltagePI Clone() {
      return new VoltagePI(this);
    }

    /// <summary>Field number for the "voltagePICtl" field.</summary>
    public const int VoltagePICtlFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_voltagePICtl_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? voltagePICtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? VoltagePICtl {
      get { return voltagePICtl_; }
      set {
        voltagePICtl_ = value;
      }
    }


    /// <summary>Field number for the "voltageRegulation" field.</summary>
    public const int VoltageRegulationFieldNumber = 2;
    private global::openfmb.essmodule.VoltageRegulation voltageRegulation_;
    /// <summary>
    /// Voltage regulation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.VoltageRegulation VoltageRegulation {
      get { return voltageRegulation_; }
      set {
        voltageRegulation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoltagePI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoltagePI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VoltagePICtl != other.VoltagePICtl) return false;
      if (!object.Equals(VoltageRegulation, other.VoltageRegulation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voltagePICtl_ != null) hash ^= VoltagePICtl.GetHashCode();
      if (voltageRegulation_ != null) hash ^= VoltageRegulation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (voltagePICtl_ != null) {
        _single_voltagePICtl_codec.WriteTagAndValue(output, VoltagePICtl);
      }
      if (voltageRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VoltageRegulation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (voltagePICtl_ != null) {
        _single_voltagePICtl_codec.WriteTagAndValue(ref output, VoltagePICtl);
      }
      if (voltageRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(VoltageRegulation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voltagePICtl_ != null) {
        size += _single_voltagePICtl_codec.CalculateSizeWithTag(VoltagePICtl);
      }
      if (voltageRegulation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageRegulation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoltagePI other) {
      if (other == null) {
        return;
      }
      if (other.voltagePICtl_ != null) {
        if (voltagePICtl_ == null || other.VoltagePICtl != false) {
          VoltagePICtl = other.VoltagePICtl;
        }
      }
      if (other.voltageRegulation_ != null) {
        if (voltageRegulation_ == null) {
          VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
        }
        VoltageRegulation.MergeFrom(other.VoltageRegulation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_voltagePICtl_codec.Read(input);
            if (voltagePICtl_ == null || value != false) {
              VoltagePICtl = value;
            }
            break;
          }
          case 18: {
            if (voltageRegulation_ == null) {
              VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
            }
            input.ReadMessage(VoltageRegulation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bool? value = _single_voltagePICtl_codec.Read(ref input);
            if (voltagePICtl_ == null || value != false) {
              VoltagePICtl = value;
            }
            break;
          }
          case 18: {
            if (voltageRegulation_ == null) {
              VoltageRegulation = new global::openfmb.essmodule.VoltageRegulation();
            }
            input.ReadMessage(VoltageRegulation);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
  /// </summary>
  public sealed partial class CapacityFirming : pb::IMessage<CapacityFirming>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CapacityFirming> _parser = new pb::MessageParser<CapacityFirming>(() => new CapacityFirming());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CapacityFirming> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityFirming() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityFirming(CapacityFirming other) : this() {
      CapacityFirmingCtl = other.CapacityFirmingCtl;
      LimitNegativeDpDt = other.LimitNegativeDpDt;
      LimitPositiveDpDt = other.LimitPositiveDpDt;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CapacityFirming Clone() {
      return new CapacityFirming(this);
    }

    /// <summary>Field number for the "capacityFirmingCtl" field.</summary>
    public const int CapacityFirmingCtlFieldNumber = 1;
    private static readonly pb::FieldCodec<bool?> _single_capacityFirmingCtl_codec = pb::FieldCodec.ForStructWrapper<bool>(10);
    private bool? capacityFirmingCtl_;
    /// <summary>
    /// Control value (TRUE or FALSE)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? CapacityFirmingCtl {
      get { return capacityFirmingCtl_; }
      set {
        capacityFirmingCtl_ = value;
      }
    }


    /// <summary>Field number for the "limitNegative_dp_dt" field.</summary>
    public const int LimitNegativeDpDtFieldNumber = 2;
    private static readonly pb::FieldCodec<float?> _single_limitNegativeDpDt_codec = pb::FieldCodec.ForStructWrapper<float>(18);
    private float? limitNegativeDpDt_;
    /// <summary>
    /// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
    /// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
    /// the PCC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? LimitNegativeDpDt {
      get { return limitNegativeDpDt_; }
      set {
        limitNegativeDpDt_ = value;
      }
    }


    /// <summary>Field number for the "limitPositive_dp_dt" field.</summary>
    public const int LimitPositiveDpDtFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_limitPositiveDpDt_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? limitPositiveDpDt_;
    /// <summary>
    /// uint/1kW/min  If the supervised power increases at a rate higher that the rate defined by these
    /// limits, the ESS will discharge/charge at an opposite dp/dt to reduce (smooth) the rate of change at
    /// the PCC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? LimitPositiveDpDt {
      get { return limitPositiveDpDt_; }
      set {
        limitPositiveDpDt_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CapacityFirming);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CapacityFirming other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CapacityFirmingCtl != other.CapacityFirmingCtl) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(LimitNegativeDpDt, other.LimitNegativeDpDt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(LimitPositiveDpDt, other.LimitPositiveDpDt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (capacityFirmingCtl_ != null) hash ^= CapacityFirmingCtl.GetHashCode();
      if (limitNegativeDpDt_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(LimitNegativeDpDt);
      if (limitPositiveDpDt_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(LimitPositiveDpDt);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (capacityFirmingCtl_ != null) {
        _single_capacityFirmingCtl_codec.WriteTagAndValue(output, CapacityFirmingCtl);
      }
      if (limitNegativeDpDt_ != null) {
        _single_limitNegativeDpDt_codec.WriteTagAndValue(output, LimitNegativeDpDt);
      }
      if (limitPositiveDpDt_ != null) {
        _single_limitPositiveDpDt_codec.WriteTagAndValue(output, LimitPositiveDpDt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (capacityFirmingCtl_ != null) {
        _single_capacityFirmingCtl_codec.WriteTagAndValue(ref output, CapacityFirmingCtl);
      }
      if (limitNegativeDpDt_ != null) {
        _single_limitNegativeDpDt_codec.WriteTagAndValue(ref output, LimitNegativeDpDt);
      }
      if (limitPositiveDpDt_ != null) {
        _single_limitPositiveDpDt_codec.WriteTagAndValue(ref output, LimitPositiveDpDt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (capacityFirmingCtl_ != null) {
        size += _single_capacityFirmingCtl_codec.CalculateSizeWithTag(CapacityFirmingCtl);
      }
      if (limitNegativeDpDt_ != null) {
        size += _single_limitNegativeDpDt_codec.CalculateSizeWithTag(LimitNegativeDpDt);
      }
      if (limitPositiveDpDt_ != null) {
        size += _single_limitPositiveDpDt_codec.CalculateSizeWithTag(LimitPositiveDpDt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CapacityFirming other) {
      if (other == null) {
        return;
      }
      if (other.capacityFirmingCtl_ != null) {
        if (capacityFirmingCtl_ == null || other.CapacityFirmingCtl != false) {
          CapacityFirmingCtl = other.CapacityFirmingCtl;
        }
      }
      if (other.limitNegativeDpDt_ != null) {
        if (limitNegativeDpDt_ == null || other.LimitNegativeDpDt != 0F) {
          LimitNegativeDpDt = other.LimitNegativeDpDt;
        }
      }
      if (other.limitPositiveDpDt_ != null) {
        if (limitPositiveDpDt_ == null || other.LimitPositiveDpDt != 0F) {
          LimitPositiveDpDt = other.LimitPositiveDpDt;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bool? value = _single_capacityFirmingCtl_codec.Read(input);
            if (capacityFirmingCtl_ == null || value != false) {
              CapacityFirmingCtl = value;
            }
            break;
          }
          case 18: {
            float? value = _single_limitNegativeDpDt_codec.Read(input);
            if (limitNegativeDpDt_ == null || value != 0F) {
              LimitNegativeDpDt = value;
            }
            break;
          }
          case 26: {
            float? value = _single_limitPositiveDpDt_codec.Read(input);
            if (limitPositiveDpDt_ == null || value != 0F) {
              LimitPositiveDpDt = value;
            }
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bool? value = _single_capacityFirmingCtl_codec.Read(ref input);
            if (capacityFirmingCtl_ == null || value != false) {
              CapacityFirmingCtl = value;
            }
            break;
          }
          case 18: {
            float? value = _single_limitNegativeDpDt_codec.Read(ref input);
            if (limitNegativeDpDt_ == null || value != 0F) {
              LimitNegativeDpDt = value;
            }
            break;
          }
          case 26: {
            float? value = _single_limitPositiveDpDt_codec.Read(ref input);
            if (limitPositiveDpDt_ == null || value != 0F) {
              LimitPositiveDpDt = value;
            }
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS inverter high level functions.
  /// </summary>
  public sealed partial class ESSFunction : pb::IMessage<ESSFunction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSFunction> _parser = new pb::MessageParser<ESSFunction>(() => new ESSFunction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSFunction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSFunction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSFunction(ESSFunction other) : this() {
      capacityFirming_ = other.capacityFirming_ != null ? other.capacityFirming_.Clone() : null;
      frequencyRegulation_ = other.frequencyRegulation_ != null ? other.frequencyRegulation_.Clone() : null;
      peakShaving_ = other.peakShaving_ != null ? other.peakShaving_.Clone() : null;
      socLimit_ = other.socLimit_ != null ? other.socLimit_.Clone() : null;
      socManagement_ = other.socManagement_ != null ? other.socManagement_.Clone() : null;
      voltageDroop_ = other.voltageDroop_ != null ? other.voltageDroop_.Clone() : null;
      voltagePI_ = other.voltagePI_ != null ? other.voltagePI_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSFunction Clone() {
      return new ESSFunction(this);
    }

    /// <summary>Field number for the "capacityFirming" field.</summary>
    public const int CapacityFirmingFieldNumber = 1;
    private global::openfmb.essmodule.CapacityFirming capacityFirming_;
    /// <summary>
    /// ESS inverter high level function to reduce (smooth) charging or discharging rate of change.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.CapacityFirming CapacityFirming {
      get { return capacityFirming_; }
      set {
        capacityFirming_ = value;
      }
    }

    /// <summary>Field number for the "frequencyRegulation" field.</summary>
    public const int FrequencyRegulationFieldNumber = 2;
    private global::openfmb.essmodule.FrequencyRegulation frequencyRegulation_;
    /// <summary>
    /// ESS inverter high level function to maintain frequency within dead bands.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.FrequencyRegulation FrequencyRegulation {
      get { return frequencyRegulation_; }
      set {
        frequencyRegulation_ = value;
      }
    }

    /// <summary>Field number for the "peakShaving" field.</summary>
    public const int PeakShavingFieldNumber = 3;
    private global::openfmb.essmodule.PeakShaving peakShaving_;
    /// <summary>
    /// ESS inverter high level function to maintain power level by charging or discharging
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.PeakShaving PeakShaving {
      get { return peakShaving_; }
      set {
        peakShaving_ = value;
      }
    }

    /// <summary>Field number for the "socLimit" field.</summary>
    public const int SocLimitFieldNumber = 4;
    private global::openfmb.essmodule.SocLimit socLimit_;
    /// <summary>
    /// ESS inverter high level function to shut down ESS if SOC exceeds high or low limits.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.SocLimit SocLimit {
      get { return socLimit_; }
      set {
        socLimit_ = value;
      }
    }

    /// <summary>Field number for the "socManagement" field.</summary>
    public const int SocManagementFieldNumber = 5;
    private global::openfmb.essmodule.SOCManagement socManagement_;
    /// <summary>
    /// ESS inverter high level function to maintain SOC within dead bands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.SOCManagement SocManagement {
      get { return socManagement_; }
      set {
        socManagement_ = value;
      }
    }

    /// <summary>Field number for the "voltageDroop" field.</summary>
    public const int VoltageDroopFieldNumber = 6;
    private global::openfmb.essmodule.VoltageDroop voltageDroop_;
    /// <summary>
    /// ESS inverter high level function to maintain voltage within droop dead bands.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.VoltageDroop VoltageDroop {
      get { return voltageDroop_; }
      set {
        voltageDroop_ = value;
      }
    }

    /// <summary>Field number for the "voltagePI" field.</summary>
    public const int VoltagePIFieldNumber = 7;
    private global::openfmb.essmodule.VoltagePI voltagePI_;
    /// <summary>
    /// ESS inverter high level function to maintain voltage within dead bands.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.VoltagePI VoltagePI {
      get { return voltagePI_; }
      set {
        voltagePI_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSFunction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSFunction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CapacityFirming, other.CapacityFirming)) return false;
      if (!object.Equals(FrequencyRegulation, other.FrequencyRegulation)) return false;
      if (!object.Equals(PeakShaving, other.PeakShaving)) return false;
      if (!object.Equals(SocLimit, other.SocLimit)) return false;
      if (!object.Equals(SocManagement, other.SocManagement)) return false;
      if (!object.Equals(VoltageDroop, other.VoltageDroop)) return false;
      if (!object.Equals(VoltagePI, other.VoltagePI)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (capacityFirming_ != null) hash ^= CapacityFirming.GetHashCode();
      if (frequencyRegulation_ != null) hash ^= FrequencyRegulation.GetHashCode();
      if (peakShaving_ != null) hash ^= PeakShaving.GetHashCode();
      if (socLimit_ != null) hash ^= SocLimit.GetHashCode();
      if (socManagement_ != null) hash ^= SocManagement.GetHashCode();
      if (voltageDroop_ != null) hash ^= VoltageDroop.GetHashCode();
      if (voltagePI_ != null) hash ^= VoltagePI.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (capacityFirming_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CapacityFirming);
      }
      if (frequencyRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencyRegulation);
      }
      if (peakShaving_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PeakShaving);
      }
      if (socLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SocLimit);
      }
      if (socManagement_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SocManagement);
      }
      if (voltageDroop_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VoltageDroop);
      }
      if (voltagePI_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(VoltagePI);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (capacityFirming_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CapacityFirming);
      }
      if (frequencyRegulation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencyRegulation);
      }
      if (peakShaving_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PeakShaving);
      }
      if (socLimit_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SocLimit);
      }
      if (socManagement_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(SocManagement);
      }
      if (voltageDroop_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(VoltageDroop);
      }
      if (voltagePI_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(VoltagePI);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (capacityFirming_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CapacityFirming);
      }
      if (frequencyRegulation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrequencyRegulation);
      }
      if (peakShaving_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PeakShaving);
      }
      if (socLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocLimit);
      }
      if (socManagement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SocManagement);
      }
      if (voltageDroop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageDroop);
      }
      if (voltagePI_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltagePI);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSFunction other) {
      if (other == null) {
        return;
      }
      if (other.capacityFirming_ != null) {
        if (capacityFirming_ == null) {
          CapacityFirming = new global::openfmb.essmodule.CapacityFirming();
        }
        CapacityFirming.MergeFrom(other.CapacityFirming);
      }
      if (other.frequencyRegulation_ != null) {
        if (frequencyRegulation_ == null) {
          FrequencyRegulation = new global::openfmb.essmodule.FrequencyRegulation();
        }
        FrequencyRegulation.MergeFrom(other.FrequencyRegulation);
      }
      if (other.peakShaving_ != null) {
        if (peakShaving_ == null) {
          PeakShaving = new global::openfmb.essmodule.PeakShaving();
        }
        PeakShaving.MergeFrom(other.PeakShaving);
      }
      if (other.socLimit_ != null) {
        if (socLimit_ == null) {
          SocLimit = new global::openfmb.essmodule.SocLimit();
        }
        SocLimit.MergeFrom(other.SocLimit);
      }
      if (other.socManagement_ != null) {
        if (socManagement_ == null) {
          SocManagement = new global::openfmb.essmodule.SOCManagement();
        }
        SocManagement.MergeFrom(other.SocManagement);
      }
      if (other.voltageDroop_ != null) {
        if (voltageDroop_ == null) {
          VoltageDroop = new global::openfmb.essmodule.VoltageDroop();
        }
        VoltageDroop.MergeFrom(other.VoltageDroop);
      }
      if (other.voltagePI_ != null) {
        if (voltagePI_ == null) {
          VoltagePI = new global::openfmb.essmodule.VoltagePI();
        }
        VoltagePI.MergeFrom(other.VoltagePI);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (capacityFirming_ == null) {
              CapacityFirming = new global::openfmb.essmodule.CapacityFirming();
            }
            input.ReadMessage(CapacityFirming);
            break;
          }
          case 18: {
            if (frequencyRegulation_ == null) {
              FrequencyRegulation = new global::openfmb.essmodule.FrequencyRegulation();
            }
            input.ReadMessage(FrequencyRegulation);
            break;
          }
          case 26: {
            if (peakShaving_ == null) {
              PeakShaving = new global::openfmb.essmodule.PeakShaving();
            }
            input.ReadMessage(PeakShaving);
            break;
          }
          case 34: {
            if (socLimit_ == null) {
              SocLimit = new global::openfmb.essmodule.SocLimit();
            }
            input.ReadMessage(SocLimit);
            break;
          }
          case 42: {
            if (socManagement_ == null) {
              SocManagement = new global::openfmb.essmodule.SOCManagement();
            }
            input.ReadMessage(SocManagement);
            break;
          }
          case 50: {
            if (voltageDroop_ == null) {
              VoltageDroop = new global::openfmb.essmodule.VoltageDroop();
            }
            input.ReadMessage(VoltageDroop);
            break;
          }
          case 58: {
            if (voltagePI_ == null) {
              VoltagePI = new global::openfmb.essmodule.VoltagePI();
            }
            input.ReadMessage(VoltagePI);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (capacityFirming_ == null) {
              CapacityFirming = new global::openfmb.essmodule.CapacityFirming();
            }
            input.ReadMessage(CapacityFirming);
            break;
          }
          case 18: {
            if (frequencyRegulation_ == null) {
              FrequencyRegulation = new global::openfmb.essmodule.FrequencyRegulation();
            }
            input.ReadMessage(FrequencyRegulation);
            break;
          }
          case 26: {
            if (peakShaving_ == null) {
              PeakShaving = new global::openfmb.essmodule.PeakShaving();
            }
            input.ReadMessage(PeakShaving);
            break;
          }
          case 34: {
            if (socLimit_ == null) {
              SocLimit = new global::openfmb.essmodule.SocLimit();
            }
            input.ReadMessage(SocLimit);
            break;
          }
          case 42: {
            if (socManagement_ == null) {
              SocManagement = new global::openfmb.essmodule.SOCManagement();
            }
            input.ReadMessage(SocManagement);
            break;
          }
          case 50: {
            if (voltageDroop_ == null) {
              VoltageDroop = new global::openfmb.essmodule.VoltageDroop();
            }
            input.ReadMessage(VoltageDroop);
            break;
          }
          case 58: {
            if (voltagePI_ == null) {
              VoltagePI = new global::openfmb.essmodule.VoltagePI();
            }
            input.ReadMessage(VoltagePI);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Point definition (Point)
  /// </summary>
  public sealed partial class ESSPointStatus : pb::IMessage<ESSPointStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSPointStatus> _parser = new pb::MessageParser<ESSPointStatus>(() => new ESSPointStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSPointStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPointStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPointStatus(ESSPointStatus other) : this() {
      blackStartEnabled_ = other.blackStartEnabled_ != null ? other.blackStartEnabled_.Clone() : null;
      frequencySetPointEnabled_ = other.frequencySetPointEnabled_ != null ? other.frequencySetPointEnabled_.Clone() : null;
      function_ = other.function_ != null ? other.function_.Clone() : null;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      PctHzDroop = other.PctHzDroop;
      PctVDroop = other.PctVDroop;
      rampRates_ = other.rampRates_ != null ? other.rampRates_.Clone() : null;
      reactivePwrSetPointEnabled_ = other.reactivePwrSetPointEnabled_ != null ? other.reactivePwrSetPointEnabled_.Clone() : null;
      realPwrSetPointEnabled_ = other.realPwrSetPointEnabled_ != null ? other.realPwrSetPointEnabled_.Clone() : null;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      syncBackToGrid_ = other.syncBackToGrid_ != null ? other.syncBackToGrid_.Clone() : null;
      transToIslndOnGridLossEnabled_ = other.transToIslndOnGridLossEnabled_ != null ? other.transToIslndOnGridLossEnabled_.Clone() : null;
      voltageSetPointEnabled_ = other.voltageSetPointEnabled_ != null ? other.voltageSetPointEnabled_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPointStatus Clone() {
      return new ESSPointStatus(this);
    }

    /// <summary>Field number for the "blackStartEnabled" field.</summary>
    public const int BlackStartEnabledFieldNumber = 1;
    private global::openfmb.commonmodule.StatusDPS blackStartEnabled_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS BlackStartEnabled {
      get { return blackStartEnabled_; }
      set {
        blackStartEnabled_ = value;
      }
    }

    /// <summary>Field number for the "frequencySetPointEnabled" field.</summary>
    public const int FrequencySetPointEnabledFieldNumber = 2;
    private global::openfmb.commonmodule.StatusDPS frequencySetPointEnabled_;
    /// <summary>
    /// Enable frequency set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS FrequencySetPointEnabled {
      get { return frequencySetPointEnabled_; }
      set {
        frequencySetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private global::openfmb.essmodule.ESSFunction function_;
    /// <summary>
    /// ESS function parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSFunction Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind mode_;
    /// <summary>
    /// Grid connect mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "pctHzDroop" field.</summary>
    public const int PctHzDroopFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_pctHzDroop_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? pctHzDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctHzDroop {
      get { return pctHzDroop_; }
      set {
        pctHzDroop_ = value;
      }
    }


    /// <summary>Field number for the "pctVDroop" field.</summary>
    public const int PctVDroopFieldNumber = 6;
    private static readonly pb::FieldCodec<float?> _single_pctVDroop_codec = pb::FieldCodec.ForStructWrapper<float>(50);
    private float? pctVDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctVDroop {
      get { return pctVDroop_; }
      set {
        pctVDroop_ = value;
      }
    }


    /// <summary>Field number for the "rampRates" field.</summary>
    public const int RampRatesFieldNumber = 7;
    private global::openfmb.commonmodule.RampRate rampRates_;
    /// <summary>
    /// Ramp rates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.RampRate RampRates {
      get { return rampRates_; }
      set {
        rampRates_ = value;
      }
    }

    /// <summary>Field number for the "reactivePwrSetPointEnabled" field.</summary>
    public const int ReactivePwrSetPointEnabledFieldNumber = 8;
    private global::openfmb.commonmodule.StatusDPS reactivePwrSetPointEnabled_;
    /// <summary>
    /// Enable reactive power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS ReactivePwrSetPointEnabled {
      get { return reactivePwrSetPointEnabled_; }
      set {
        reactivePwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "realPwrSetPointEnabled" field.</summary>
    public const int RealPwrSetPointEnabledFieldNumber = 9;
    private global::openfmb.commonmodule.StatusDPS realPwrSetPointEnabled_;
    /// <summary>
    /// Enable real power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS RealPwrSetPointEnabled {
      get { return realPwrSetPointEnabled_; }
      set {
        realPwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 10;
    private global::openfmb.commonmodule.Optional_StateKind state_;
    /// <summary>
    /// ESS state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.Optional_StateKind State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "syncBackToGrid" field.</summary>
    public const int SyncBackToGridFieldNumber = 11;
    private global::openfmb.commonmodule.StatusDPS syncBackToGrid_;
    /// <summary>
    /// Synchronize back to grid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS SyncBackToGrid {
      get { return syncBackToGrid_; }
      set {
        syncBackToGrid_ = value;
      }
    }

    /// <summary>Field number for the "transToIslndOnGridLossEnabled" field.</summary>
    public const int TransToIslndOnGridLossEnabledFieldNumber = 12;
    private global::openfmb.commonmodule.StatusDPS transToIslndOnGridLossEnabled_;
    /// <summary>
    /// Transition to island on grid loss enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS TransToIslndOnGridLossEnabled {
      get { return transToIslndOnGridLossEnabled_; }
      set {
        transToIslndOnGridLossEnabled_ = value;
      }
    }

    /// <summary>Field number for the "voltageSetPointEnabled" field.</summary>
    public const int VoltageSetPointEnabledFieldNumber = 13;
    private global::openfmb.commonmodule.StatusDPS voltageSetPointEnabled_;
    /// <summary>
    /// Enable voltage set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusDPS VoltageSetPointEnabled {
      get { return voltageSetPointEnabled_; }
      set {
        voltageSetPointEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSPointStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSPointStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlackStartEnabled, other.BlackStartEnabled)) return false;
      if (!object.Equals(FrequencySetPointEnabled, other.FrequencySetPointEnabled)) return false;
      if (!object.Equals(Function, other.Function)) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctHzDroop, other.PctHzDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctVDroop, other.PctVDroop)) return false;
      if (!object.Equals(RampRates, other.RampRates)) return false;
      if (!object.Equals(ReactivePwrSetPointEnabled, other.ReactivePwrSetPointEnabled)) return false;
      if (!object.Equals(RealPwrSetPointEnabled, other.RealPwrSetPointEnabled)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(SyncBackToGrid, other.SyncBackToGrid)) return false;
      if (!object.Equals(TransToIslndOnGridLossEnabled, other.TransToIslndOnGridLossEnabled)) return false;
      if (!object.Equals(VoltageSetPointEnabled, other.VoltageSetPointEnabled)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blackStartEnabled_ != null) hash ^= BlackStartEnabled.GetHashCode();
      if (frequencySetPointEnabled_ != null) hash ^= FrequencySetPointEnabled.GetHashCode();
      if (function_ != null) hash ^= Function.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (pctHzDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctHzDroop);
      if (pctVDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctVDroop);
      if (rampRates_ != null) hash ^= RampRates.GetHashCode();
      if (reactivePwrSetPointEnabled_ != null) hash ^= ReactivePwrSetPointEnabled.GetHashCode();
      if (realPwrSetPointEnabled_ != null) hash ^= RealPwrSetPointEnabled.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (syncBackToGrid_ != null) hash ^= SyncBackToGrid.GetHashCode();
      if (transToIslndOnGridLossEnabled_ != null) hash ^= TransToIslndOnGridLossEnabled.GetHashCode();
      if (voltageSetPointEnabled_ != null) hash ^= VoltageSetPointEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (blackStartEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Function);
      }
      if (mode_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(State);
      }
      if (syncBackToGrid_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (blackStartEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Function);
      }
      if (mode_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(ref output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(ref output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(State);
      }
      if (syncBackToGrid_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blackStartEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (pctHzDroop_ != null) {
        size += _single_pctHzDroop_codec.CalculateSizeWithTag(PctHzDroop);
      }
      if (pctVDroop_ != null) {
        size += _single_pctVDroop_codec.CalculateSizeWithTag(PctVDroop);
      }
      if (rampRates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (syncBackToGrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSPointStatus other) {
      if (other == null) {
        return;
      }
      if (other.blackStartEnabled_ != null) {
        if (blackStartEnabled_ == null) {
          BlackStartEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        BlackStartEnabled.MergeFrom(other.BlackStartEnabled);
      }
      if (other.frequencySetPointEnabled_ != null) {
        if (frequencySetPointEnabled_ == null) {
          FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        FrequencySetPointEnabled.MergeFrom(other.FrequencySetPointEnabled);
      }
      if (other.function_ != null) {
        if (function_ == null) {
          Function = new global::openfmb.essmodule.ESSFunction();
        }
        Function.MergeFrom(other.Function);
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.pctHzDroop_ != null) {
        if (pctHzDroop_ == null || other.PctHzDroop != 0F) {
          PctHzDroop = other.PctHzDroop;
        }
      }
      if (other.pctVDroop_ != null) {
        if (pctVDroop_ == null || other.PctVDroop != 0F) {
          PctVDroop = other.PctVDroop;
        }
      }
      if (other.rampRates_ != null) {
        if (rampRates_ == null) {
          RampRates = new global::openfmb.commonmodule.RampRate();
        }
        RampRates.MergeFrom(other.RampRates);
      }
      if (other.reactivePwrSetPointEnabled_ != null) {
        if (reactivePwrSetPointEnabled_ == null) {
          ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        ReactivePwrSetPointEnabled.MergeFrom(other.ReactivePwrSetPointEnabled);
      }
      if (other.realPwrSetPointEnabled_ != null) {
        if (realPwrSetPointEnabled_ == null) {
          RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        RealPwrSetPointEnabled.MergeFrom(other.RealPwrSetPointEnabled);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::openfmb.commonmodule.Optional_StateKind();
        }
        State.MergeFrom(other.State);
      }
      if (other.syncBackToGrid_ != null) {
        if (syncBackToGrid_ == null) {
          SyncBackToGrid = new global::openfmb.commonmodule.StatusDPS();
        }
        SyncBackToGrid.MergeFrom(other.SyncBackToGrid);
      }
      if (other.transToIslndOnGridLossEnabled_ != null) {
        if (transToIslndOnGridLossEnabled_ == null) {
          TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        TransToIslndOnGridLossEnabled.MergeFrom(other.TransToIslndOnGridLossEnabled);
      }
      if (other.voltageSetPointEnabled_ != null) {
        if (voltageSetPointEnabled_ == null) {
          VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
        }
        VoltageSetPointEnabled.MergeFrom(other.VoltageSetPointEnabled);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (blackStartEnabled_ == null) {
              BlackStartEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(BlackStartEnabled);
            break;
          }
          case 18: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 26: {
            if (function_ == null) {
              Function = new global::openfmb.essmodule.ESSFunction();
            }
            input.ReadMessage(Function);
            break;
          }
          case 34: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 42: {
            float? value = _single_pctHzDroop_codec.Read(input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 50: {
            float? value = _single_pctVDroop_codec.Read(input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 58: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 66: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 74: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 82: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 90: {
            if (syncBackToGrid_ == null) {
              SyncBackToGrid = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(SyncBackToGrid);
            break;
          }
          case 98: {
            if (transToIslndOnGridLossEnabled_ == null) {
              TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(TransToIslndOnGridLossEnabled);
            break;
          }
          case 106: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (blackStartEnabled_ == null) {
              BlackStartEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(BlackStartEnabled);
            break;
          }
          case 18: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 26: {
            if (function_ == null) {
              Function = new global::openfmb.essmodule.ESSFunction();
            }
            input.ReadMessage(Function);
            break;
          }
          case 34: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 42: {
            float? value = _single_pctHzDroop_codec.Read(ref input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 50: {
            float? value = _single_pctVDroop_codec.Read(ref input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 58: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 66: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 74: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 82: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 90: {
            if (syncBackToGrid_ == null) {
              SyncBackToGrid = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(SyncBackToGrid);
            break;
          }
          case 98: {
            if (transToIslndOnGridLossEnabled_ == null) {
              TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(TransToIslndOnGridLossEnabled);
            break;
          }
          case 106: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusDPS();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN class
  /// </summary>
  public sealed partial class ESSEventAndStatusZGEN : pb::IMessage<ESSEventAndStatusZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSEventAndStatusZGEN> _parser = new pb::MessageParser<ESSEventAndStatusZGEN>(() => new ESSEventAndStatusZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSEventAndStatusZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventAndStatusZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventAndStatusZGEN(ESSEventAndStatusZGEN other) : this() {
      logicalNodeForEventAndStatus_ = other.logicalNodeForEventAndStatus_ != null ? other.logicalNodeForEventAndStatus_.Clone() : null;
      auxPwrSt_ = other.auxPwrSt_ != null ? other.auxPwrSt_.Clone() : null;
      dynamicTest_ = other.dynamicTest_ != null ? other.dynamicTest_.Clone() : null;
      emgStop_ = other.emgStop_ != null ? other.emgStop_.Clone() : null;
      gnSynSt_ = other.gnSynSt_ != null ? other.gnSynSt_.Clone() : null;
      pointStatus_ = other.pointStatus_ != null ? other.pointStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventAndStatusZGEN Clone() {
      return new ESSEventAndStatusZGEN(this);
    }

    /// <summary>Field number for the "logicalNodeForEventAndStatus" field.</summary>
    public const int LogicalNodeForEventAndStatusFieldNumber = 1;
    private global::openfmb.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.LogicalNodeForEventAndStatus LogicalNodeForEventAndStatus {
      get { return logicalNodeForEventAndStatus_; }
      set {
        logicalNodeForEventAndStatus_ = value;
      }
    }

    /// <summary>Field number for the "AuxPwrSt" field.</summary>
    public const int AuxPwrStFieldNumber = 2;
    private global::openfmb.commonmodule.StatusSPS auxPwrSt_;
    /// <summary>
    /// DC Power On/Off Status; True = DC power on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS AuxPwrSt {
      get { return auxPwrSt_; }
      set {
        auxPwrSt_ = value;
      }
    }

    /// <summary>Field number for the "DynamicTest" field.</summary>
    public const int DynamicTestFieldNumber = 3;
    private global::openfmb.commonmodule.ENS_DynamicTestKind dynamicTest_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENS_DynamicTestKind DynamicTest {
      get { return dynamicTest_; }
      set {
        dynamicTest_ = value;
      }
    }

    /// <summary>Field number for the "EmgStop" field.</summary>
    public const int EmgStopFieldNumber = 4;
    private global::openfmb.commonmodule.StatusSPS emgStop_;
    /// <summary>
    /// Emergency stop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS EmgStop {
      get { return emgStop_; }
      set {
        emgStop_ = value;
      }
    }

    /// <summary>Field number for the "GnSynSt" field.</summary>
    public const int GnSynStFieldNumber = 5;
    private global::openfmb.commonmodule.StatusSPS gnSynSt_;
    /// <summary>
    /// Generator is synchronized to EPS, or not; True = Synchronized
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS GnSynSt {
      get { return gnSynSt_; }
      set {
        gnSynSt_ = value;
      }
    }

    /// <summary>Field number for the "PointStatus" field.</summary>
    public const int PointStatusFieldNumber = 6;
    private global::openfmb.essmodule.ESSPointStatus pointStatus_;
    /// <summary>
    /// Point status
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSPointStatus PointStatus {
      get { return pointStatus_; }
      set {
        pointStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSEventAndStatusZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSEventAndStatusZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogicalNodeForEventAndStatus, other.LogicalNodeForEventAndStatus)) return false;
      if (!object.Equals(AuxPwrSt, other.AuxPwrSt)) return false;
      if (!object.Equals(DynamicTest, other.DynamicTest)) return false;
      if (!object.Equals(EmgStop, other.EmgStop)) return false;
      if (!object.Equals(GnSynSt, other.GnSynSt)) return false;
      if (!object.Equals(PointStatus, other.PointStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logicalNodeForEventAndStatus_ != null) hash ^= LogicalNodeForEventAndStatus.GetHashCode();
      if (auxPwrSt_ != null) hash ^= AuxPwrSt.GetHashCode();
      if (dynamicTest_ != null) hash ^= DynamicTest.GetHashCode();
      if (emgStop_ != null) hash ^= EmgStop.GetHashCode();
      if (gnSynSt_ != null) hash ^= GnSynSt.GetHashCode();
      if (pointStatus_ != null) hash ^= PointStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicTest);
      }
      if (emgStop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EmgStop);
      }
      if (gnSynSt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GnSynSt);
      }
      if (pointStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PointStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicTest);
      }
      if (emgStop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EmgStop);
      }
      if (gnSynSt_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GnSynSt);
      }
      if (pointStatus_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(PointStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logicalNodeForEventAndStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicTest);
      }
      if (emgStop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmgStop);
      }
      if (gnSynSt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GnSynSt);
      }
      if (pointStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSEventAndStatusZGEN other) {
      if (other == null) {
        return;
      }
      if (other.logicalNodeForEventAndStatus_ != null) {
        if (logicalNodeForEventAndStatus_ == null) {
          LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
        }
        LogicalNodeForEventAndStatus.MergeFrom(other.LogicalNodeForEventAndStatus);
      }
      if (other.auxPwrSt_ != null) {
        if (auxPwrSt_ == null) {
          AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
        }
        AuxPwrSt.MergeFrom(other.AuxPwrSt);
      }
      if (other.dynamicTest_ != null) {
        if (dynamicTest_ == null) {
          DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
        }
        DynamicTest.MergeFrom(other.DynamicTest);
      }
      if (other.emgStop_ != null) {
        if (emgStop_ == null) {
          EmgStop = new global::openfmb.commonmodule.StatusSPS();
        }
        EmgStop.MergeFrom(other.EmgStop);
      }
      if (other.gnSynSt_ != null) {
        if (gnSynSt_ == null) {
          GnSynSt = new global::openfmb.commonmodule.StatusSPS();
        }
        GnSynSt.MergeFrom(other.GnSynSt);
      }
      if (other.pointStatus_ != null) {
        if (pointStatus_ == null) {
          PointStatus = new global::openfmb.essmodule.ESSPointStatus();
        }
        PointStatus.MergeFrom(other.PointStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (auxPwrSt_ == null) {
              AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(AuxPwrSt);
            break;
          }
          case 26: {
            if (dynamicTest_ == null) {
              DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
            }
            input.ReadMessage(DynamicTest);
            break;
          }
          case 34: {
            if (emgStop_ == null) {
              EmgStop = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(EmgStop);
            break;
          }
          case 42: {
            if (gnSynSt_ == null) {
              GnSynSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(GnSynSt);
            break;
          }
          case 50: {
            if (pointStatus_ == null) {
              PointStatus = new global::openfmb.essmodule.ESSPointStatus();
            }
            input.ReadMessage(PointStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (auxPwrSt_ == null) {
              AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(AuxPwrSt);
            break;
          }
          case 26: {
            if (dynamicTest_ == null) {
              DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
            }
            input.ReadMessage(DynamicTest);
            break;
          }
          case 34: {
            if (emgStop_ == null) {
              EmgStop = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(EmgStop);
            break;
          }
          case 42: {
            if (gnSynSt_ == null) {
              GnSynSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(GnSynSt);
            break;
          }
          case 50: {
            if (pointStatus_ == null) {
              PointStatus = new global::openfmb.essmodule.ESSPointStatus();
            }
            input.ReadMessage(PointStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN class for ESS event profile
  /// </summary>
  public sealed partial class ESSEventZGEN : pb::IMessage<ESSEventZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSEventZGEN> _parser = new pb::MessageParser<ESSEventZGEN>(() => new ESSEventZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSEventZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventZGEN(ESSEventZGEN other) : this() {
      eSSEventAndStatusZGEN_ = other.eSSEventAndStatusZGEN_ != null ? other.eSSEventAndStatusZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventZGEN Clone() {
      return new ESSEventZGEN(this);
    }

    /// <summary>Field number for the "eSSEventAndStatusZGEN" field.</summary>
    public const int ESSEventAndStatusZGENFieldNumber = 1;
    private global::openfmb.essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSEventAndStatusZGEN ESSEventAndStatusZGEN {
      get { return eSSEventAndStatusZGEN_; }
      set {
        eSSEventAndStatusZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSEventZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSEventZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ESSEventAndStatusZGEN, other.ESSEventAndStatusZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eSSEventAndStatusZGEN_ != null) hash ^= ESSEventAndStatusZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eSSEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eSSEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eSSEventAndStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSEventZGEN other) {
      if (other == null) {
        return;
      }
      if (other.eSSEventAndStatusZGEN_ != null) {
        if (eSSEventAndStatusZGEN_ == null) {
          ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
        }
        ESSEventAndStatusZGEN.MergeFrom(other.ESSEventAndStatusZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eSSEventAndStatusZGEN_ == null) {
              ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
            }
            input.ReadMessage(ESSEventAndStatusZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eSSEventAndStatusZGEN_ == null) {
              ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
            }
            input.ReadMessage(ESSEventAndStatusZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS event
  /// </summary>
  public sealed partial class ESSEvent : pb::IMessage<ESSEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSEvent> _parser = new pb::MessageParser<ESSEvent>(() => new ESSEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEvent(ESSEvent other) : this() {
      eventValue_ = other.eventValue_ != null ? other.eventValue_.Clone() : null;
      essEventZBAT_ = other.essEventZBAT_ != null ? other.essEventZBAT_.Clone() : null;
      essEventZGEN_ = other.essEventZGEN_ != null ? other.essEventZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEvent Clone() {
      return new ESSEvent(this);
    }

    /// <summary>Field number for the "eventValue" field.</summary>
    public const int EventValueFieldNumber = 1;
    private global::openfmb.commonmodule.EventValue eventValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.EventValue EventValue {
      get { return eventValue_; }
      set {
        eventValue_ = value;
      }
    }

    /// <summary>Field number for the "essEventZBAT" field.</summary>
    public const int EssEventZBATFieldNumber = 2;
    private global::openfmb.essmodule.EssEventZBAT essEventZBAT_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.EssEventZBAT EssEventZBAT {
      get { return essEventZBAT_; }
      set {
        essEventZBAT_ = value;
      }
    }

    /// <summary>Field number for the "essEventZGEN" field.</summary>
    public const int EssEventZGENFieldNumber = 3;
    private global::openfmb.essmodule.ESSEventZGEN essEventZGEN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSEventZGEN EssEventZGEN {
      get { return essEventZGEN_; }
      set {
        essEventZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventValue, other.EventValue)) return false;
      if (!object.Equals(EssEventZBAT, other.EssEventZBAT)) return false;
      if (!object.Equals(EssEventZGEN, other.EssEventZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventValue_ != null) hash ^= EventValue.GetHashCode();
      if (essEventZBAT_ != null) hash ^= EssEventZBAT.GetHashCode();
      if (essEventZGEN_ != null) hash ^= EssEventZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventValue);
      }
      if (essEventZBAT_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssEventZBAT);
      }
      if (essEventZGEN_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssEventZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventValue);
      }
      if (essEventZBAT_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssEventZBAT);
      }
      if (essEventZGEN_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssEventZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventValue);
      }
      if (essEventZBAT_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssEventZBAT);
      }
      if (essEventZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssEventZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSEvent other) {
      if (other == null) {
        return;
      }
      if (other.eventValue_ != null) {
        if (eventValue_ == null) {
          EventValue = new global::openfmb.commonmodule.EventValue();
        }
        EventValue.MergeFrom(other.EventValue);
      }
      if (other.essEventZBAT_ != null) {
        if (essEventZBAT_ == null) {
          EssEventZBAT = new global::openfmb.essmodule.EssEventZBAT();
        }
        EssEventZBAT.MergeFrom(other.EssEventZBAT);
      }
      if (other.essEventZGEN_ != null) {
        if (essEventZGEN_ == null) {
          EssEventZGEN = new global::openfmb.essmodule.ESSEventZGEN();
        }
        EssEventZGEN.MergeFrom(other.EssEventZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eventValue_ == null) {
              EventValue = new global::openfmb.commonmodule.EventValue();
            }
            input.ReadMessage(EventValue);
            break;
          }
          case 18: {
            if (essEventZBAT_ == null) {
              EssEventZBAT = new global::openfmb.essmodule.EssEventZBAT();
            }
            input.ReadMessage(EssEventZBAT);
            break;
          }
          case 26: {
            if (essEventZGEN_ == null) {
              EssEventZGEN = new global::openfmb.essmodule.ESSEventZGEN();
            }
            input.ReadMessage(EssEventZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eventValue_ == null) {
              EventValue = new global::openfmb.commonmodule.EventValue();
            }
            input.ReadMessage(EventValue);
            break;
          }
          case 18: {
            if (essEventZBAT_ == null) {
              EssEventZBAT = new global::openfmb.essmodule.EssEventZBAT();
            }
            input.ReadMessage(EssEventZBAT);
            break;
          }
          case 26: {
            if (essEventZGEN_ == null) {
              EssEventZGEN = new global::openfmb.essmodule.ESSEventZGEN();
            }
            input.ReadMessage(EssEventZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS event profile
  /// </summary>
  public sealed partial class ESSEventProfile : pb::IMessage<ESSEventProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSEventProfile> _parser = new pb::MessageParser<ESSEventProfile>(() => new ESSEventProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSEventProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventProfile(ESSEventProfile other) : this() {
      eventMessageInfo_ = other.eventMessageInfo_ != null ? other.eventMessageInfo_.Clone() : null;
      ess_ = other.ess_ != null ? other.ess_.Clone() : null;
      essEvent_ = other.essEvent_ != null ? other.essEvent_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSEventProfile Clone() {
      return new ESSEventProfile(this);
    }

    /// <summary>Field number for the "eventMessageInfo" field.</summary>
    public const int EventMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.EventMessageInfo eventMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.EventMessageInfo EventMessageInfo {
      get { return eventMessageInfo_; }
      set {
        eventMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "ess" field.</summary>
    public const int EssFieldNumber = 2;
    private global::openfmb.commonmodule.ESS ess_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ESS Ess {
      get { return ess_; }
      set {
        ess_ = value;
      }
    }

    /// <summary>Field number for the "essEvent" field.</summary>
    public const int EssEventFieldNumber = 3;
    private global::openfmb.essmodule.ESSEvent essEvent_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSEvent EssEvent {
      get { return essEvent_; }
      set {
        essEvent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSEventProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSEventProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventMessageInfo, other.EventMessageInfo)) return false;
      if (!object.Equals(Ess, other.Ess)) return false;
      if (!object.Equals(EssEvent, other.EssEvent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventMessageInfo_ != null) hash ^= EventMessageInfo.GetHashCode();
      if (ess_ != null) hash ^= Ess.GetHashCode();
      if (essEvent_ != null) hash ^= EssEvent.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essEvent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essEvent_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssEvent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventMessageInfo);
      }
      if (ess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ess);
      }
      if (essEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssEvent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSEventProfile other) {
      if (other == null) {
        return;
      }
      if (other.eventMessageInfo_ != null) {
        if (eventMessageInfo_ == null) {
          EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
        }
        EventMessageInfo.MergeFrom(other.EventMessageInfo);
      }
      if (other.ess_ != null) {
        if (ess_ == null) {
          Ess = new global::openfmb.commonmodule.ESS();
        }
        Ess.MergeFrom(other.Ess);
      }
      if (other.essEvent_ != null) {
        if (essEvent_ == null) {
          EssEvent = new global::openfmb.essmodule.ESSEvent();
        }
        EssEvent.MergeFrom(other.EssEvent);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eventMessageInfo_ == null) {
              EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
            }
            input.ReadMessage(EventMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essEvent_ == null) {
              EssEvent = new global::openfmb.essmodule.ESSEvent();
            }
            input.ReadMessage(EssEvent);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eventMessageInfo_ == null) {
              EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
            }
            input.ReadMessage(EventMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essEvent_ == null) {
              EssEvent = new global::openfmb.essmodule.ESSEvent();
            }
            input.ReadMessage(EssEvent);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS reading value
  /// </summary>
  public sealed partial class ESSReading : pb::IMessage<ESSReading>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSReading> _parser = new pb::MessageParser<ESSReading>(() => new ESSReading());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSReading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReading(ESSReading other) : this() {
      conductingEquipmentTerminalReading_ = other.conductingEquipmentTerminalReading_ != null ? other.conductingEquipmentTerminalReading_.Clone() : null;
      phaseMMTN_ = other.phaseMMTN_ != null ? other.phaseMMTN_.Clone() : null;
      readingMMTR_ = other.readingMMTR_ != null ? other.readingMMTR_.Clone() : null;
      readingMMXU_ = other.readingMMXU_ != null ? other.readingMMXU_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReading Clone() {
      return new ESSReading(this);
    }

    /// <summary>Field number for the "conductingEquipmentTerminalReading" field.</summary>
    public const int ConductingEquipmentTerminalReadingFieldNumber = 1;
    private global::openfmb.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ConductingEquipmentTerminalReading ConductingEquipmentTerminalReading {
      get { return conductingEquipmentTerminalReading_; }
      set {
        conductingEquipmentTerminalReading_ = value;
      }
    }

    /// <summary>Field number for the "phaseMMTN" field.</summary>
    public const int PhaseMMTNFieldNumber = 2;
    private global::openfmb.commonmodule.PhaseMMTN phaseMMTN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PhaseMMTN PhaseMMTN {
      get { return phaseMMTN_; }
      set {
        phaseMMTN_ = value;
      }
    }

    /// <summary>Field number for the "readingMMTR" field.</summary>
    public const int ReadingMMTRFieldNumber = 3;
    private global::openfmb.commonmodule.ReadingMMTR readingMMTR_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMMTR ReadingMMTR {
      get { return readingMMTR_; }
      set {
        readingMMTR_ = value;
      }
    }

    /// <summary>Field number for the "readingMMXU" field.</summary>
    public const int ReadingMMXUFieldNumber = 4;
    private global::openfmb.commonmodule.ReadingMMXU readingMMXU_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMMXU ReadingMMXU {
      get { return readingMMXU_; }
      set {
        readingMMXU_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSReading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSReading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConductingEquipmentTerminalReading, other.ConductingEquipmentTerminalReading)) return false;
      if (!object.Equals(PhaseMMTN, other.PhaseMMTN)) return false;
      if (!object.Equals(ReadingMMTR, other.ReadingMMTR)) return false;
      if (!object.Equals(ReadingMMXU, other.ReadingMMXU)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conductingEquipmentTerminalReading_ != null) hash ^= ConductingEquipmentTerminalReading.GetHashCode();
      if (phaseMMTN_ != null) hash ^= PhaseMMTN.GetHashCode();
      if (readingMMTR_ != null) hash ^= ReadingMMTR.GetHashCode();
      if (readingMMXU_ != null) hash ^= ReadingMMXU.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (conductingEquipmentTerminalReading_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadingMMXU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (conductingEquipmentTerminalReading_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadingMMXU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conductingEquipmentTerminalReading_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMMXU);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSReading other) {
      if (other == null) {
        return;
      }
      if (other.conductingEquipmentTerminalReading_ != null) {
        if (conductingEquipmentTerminalReading_ == null) {
          ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
        }
        ConductingEquipmentTerminalReading.MergeFrom(other.ConductingEquipmentTerminalReading);
      }
      if (other.phaseMMTN_ != null) {
        if (phaseMMTN_ == null) {
          PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
        }
        PhaseMMTN.MergeFrom(other.PhaseMMTN);
      }
      if (other.readingMMTR_ != null) {
        if (readingMMTR_ == null) {
          ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
        }
        ReadingMMTR.MergeFrom(other.ReadingMMTR);
      }
      if (other.readingMMXU_ != null) {
        if (readingMMXU_ == null) {
          ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
        }
        ReadingMMXU.MergeFrom(other.ReadingMMXU);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (conductingEquipmentTerminalReading_ == null) {
              ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
            }
            input.ReadMessage(ConductingEquipmentTerminalReading);
            break;
          }
          case 18: {
            if (phaseMMTN_ == null) {
              PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
            }
            input.ReadMessage(PhaseMMTN);
            break;
          }
          case 26: {
            if (readingMMTR_ == null) {
              ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
            }
            input.ReadMessage(ReadingMMTR);
            break;
          }
          case 34: {
            if (readingMMXU_ == null) {
              ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
            }
            input.ReadMessage(ReadingMMXU);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (conductingEquipmentTerminalReading_ == null) {
              ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
            }
            input.ReadMessage(ConductingEquipmentTerminalReading);
            break;
          }
          case 18: {
            if (phaseMMTN_ == null) {
              PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
            }
            input.ReadMessage(PhaseMMTN);
            break;
          }
          case 26: {
            if (readingMMTR_ == null) {
              ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
            }
            input.ReadMessage(ReadingMMTR);
            break;
          }
          case 34: {
            if (readingMMXU_ == null) {
              ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
            }
            input.ReadMessage(ReadingMMXU);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS reading profile
  /// </summary>
  public sealed partial class ESSReadingProfile : pb::IMessage<ESSReadingProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSReadingProfile> _parser = new pb::MessageParser<ESSReadingProfile>(() => new ESSReadingProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSReadingProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReadingProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReadingProfile(ESSReadingProfile other) : this() {
      readingMessageInfo_ = other.readingMessageInfo_ != null ? other.readingMessageInfo_.Clone() : null;
      ess_ = other.ess_ != null ? other.ess_.Clone() : null;
      essReading_ = other.essReading_ != null ? other.essReading_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSReadingProfile Clone() {
      return new ESSReadingProfile(this);
    }

    /// <summary>Field number for the "readingMessageInfo" field.</summary>
    public const int ReadingMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ReadingMessageInfo readingMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMessageInfo ReadingMessageInfo {
      get { return readingMessageInfo_; }
      set {
        readingMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "ess" field.</summary>
    public const int EssFieldNumber = 2;
    private global::openfmb.commonmodule.ESS ess_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ESS Ess {
      get { return ess_; }
      set {
        ess_ = value;
      }
    }

    /// <summary>Field number for the "essReading" field.</summary>
    public const int EssReadingFieldNumber = 3;
    private global::openfmb.essmodule.ESSReading essReading_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSReading EssReading {
      get { return essReading_; }
      set {
        essReading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSReadingProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSReadingProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReadingMessageInfo, other.ReadingMessageInfo)) return false;
      if (!object.Equals(Ess, other.Ess)) return false;
      if (!object.Equals(EssReading, other.EssReading)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (readingMessageInfo_ != null) hash ^= ReadingMessageInfo.GetHashCode();
      if (ess_ != null) hash ^= Ess.GetHashCode();
      if (essReading_ != null) hash ^= EssReading.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (readingMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadingMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essReading_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssReading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (readingMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadingMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essReading_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssReading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (readingMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMessageInfo);
      }
      if (ess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ess);
      }
      if (essReading_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssReading);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSReadingProfile other) {
      if (other == null) {
        return;
      }
      if (other.readingMessageInfo_ != null) {
        if (readingMessageInfo_ == null) {
          ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
        }
        ReadingMessageInfo.MergeFrom(other.ReadingMessageInfo);
      }
      if (other.ess_ != null) {
        if (ess_ == null) {
          Ess = new global::openfmb.commonmodule.ESS();
        }
        Ess.MergeFrom(other.Ess);
      }
      if (other.essReading_ != null) {
        if (essReading_ == null) {
          EssReading = new global::openfmb.essmodule.ESSReading();
        }
        EssReading.MergeFrom(other.EssReading);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (readingMessageInfo_ == null) {
              ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
            }
            input.ReadMessage(ReadingMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essReading_ == null) {
              EssReading = new global::openfmb.essmodule.ESSReading();
            }
            input.ReadMessage(EssReading);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (readingMessageInfo_ == null) {
              ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
            }
            input.ReadMessage(ReadingMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essReading_ == null) {
              EssReading = new global::openfmb.essmodule.ESSReading();
            }
            input.ReadMessage(EssReading);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZBAT
  /// </summary>
  public sealed partial class EssStatusZBAT : pb::IMessage<EssStatusZBAT>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EssStatusZBAT> _parser = new pb::MessageParser<EssStatusZBAT>(() => new EssStatusZBAT());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EssStatusZBAT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssStatusZBAT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssStatusZBAT(EssStatusZBAT other) : this() {
      logicalNodeForEventAndStatus_ = other.logicalNodeForEventAndStatus_ != null ? other.logicalNodeForEventAndStatus_.Clone() : null;
      batSt_ = other.batSt_ != null ? other.batSt_.Clone() : null;
      griMod_ = other.griMod_ != null ? other.griMod_.Clone() : null;
      soc_ = other.soc_ != null ? other.soc_.Clone() : null;
      stdby_ = other.stdby_ != null ? other.stdby_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssStatusZBAT Clone() {
      return new EssStatusZBAT(this);
    }

    /// <summary>Field number for the "logicalNodeForEventAndStatus" field.</summary>
    public const int LogicalNodeForEventAndStatusFieldNumber = 1;
    private global::openfmb.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.LogicalNodeForEventAndStatus LogicalNodeForEventAndStatus {
      get { return logicalNodeForEventAndStatus_; }
      set {
        logicalNodeForEventAndStatus_ = value;
      }
    }

    /// <summary>Field number for the "BatSt" field.</summary>
    public const int BatStFieldNumber = 2;
    private global::openfmb.commonmodule.StatusSPS batSt_;
    /// <summary>
    /// Battery system status &amp;ndash; True: on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS BatSt {
      get { return batSt_; }
      set {
        batSt_ = value;
      }
    }

    /// <summary>Field number for the "GriMod" field.</summary>
    public const int GriModFieldNumber = 3;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind griMod_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind GriMod {
      get { return griMod_; }
      set {
        griMod_ = value;
      }
    }

    /// <summary>Field number for the "Soc" field.</summary>
    public const int SocFieldNumber = 4;
    private global::openfmb.commonmodule.MV soc_;
    /// <summary>
    /// State of charge (in percentage)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.MV Soc {
      get { return soc_; }
      set {
        soc_ = value;
      }
    }

    /// <summary>Field number for the "Stdby" field.</summary>
    public const int StdbyFieldNumber = 5;
    private global::openfmb.commonmodule.StatusSPS stdby_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS Stdby {
      get { return stdby_; }
      set {
        stdby_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EssStatusZBAT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EssStatusZBAT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogicalNodeForEventAndStatus, other.LogicalNodeForEventAndStatus)) return false;
      if (!object.Equals(BatSt, other.BatSt)) return false;
      if (!object.Equals(GriMod, other.GriMod)) return false;
      if (!object.Equals(Soc, other.Soc)) return false;
      if (!object.Equals(Stdby, other.Stdby)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logicalNodeForEventAndStatus_ != null) hash ^= LogicalNodeForEventAndStatus.GetHashCode();
      if (batSt_ != null) hash ^= BatSt.GetHashCode();
      if (griMod_ != null) hash ^= GriMod.GetHashCode();
      if (soc_ != null) hash ^= Soc.GetHashCode();
      if (stdby_ != null) hash ^= Stdby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (batSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BatSt);
      }
      if (griMod_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GriMod);
      }
      if (soc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Soc);
      }
      if (stdby_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Stdby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (batSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BatSt);
      }
      if (griMod_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GriMod);
      }
      if (soc_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Soc);
      }
      if (stdby_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Stdby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logicalNodeForEventAndStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalNodeForEventAndStatus);
      }
      if (batSt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatSt);
      }
      if (griMod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GriMod);
      }
      if (soc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Soc);
      }
      if (stdby_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stdby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EssStatusZBAT other) {
      if (other == null) {
        return;
      }
      if (other.logicalNodeForEventAndStatus_ != null) {
        if (logicalNodeForEventAndStatus_ == null) {
          LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
        }
        LogicalNodeForEventAndStatus.MergeFrom(other.LogicalNodeForEventAndStatus);
      }
      if (other.batSt_ != null) {
        if (batSt_ == null) {
          BatSt = new global::openfmb.commonmodule.StatusSPS();
        }
        BatSt.MergeFrom(other.BatSt);
      }
      if (other.griMod_ != null) {
        if (griMod_ == null) {
          GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        GriMod.MergeFrom(other.GriMod);
      }
      if (other.soc_ != null) {
        if (soc_ == null) {
          Soc = new global::openfmb.commonmodule.MV();
        }
        Soc.MergeFrom(other.Soc);
      }
      if (other.stdby_ != null) {
        if (stdby_ == null) {
          Stdby = new global::openfmb.commonmodule.StatusSPS();
        }
        Stdby.MergeFrom(other.Stdby);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (batSt_ == null) {
              BatSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatSt);
            break;
          }
          case 26: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
          case 34: {
            if (soc_ == null) {
              Soc = new global::openfmb.commonmodule.MV();
            }
            input.ReadMessage(Soc);
            break;
          }
          case 42: {
            if (stdby_ == null) {
              Stdby = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(Stdby);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (batSt_ == null) {
              BatSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(BatSt);
            break;
          }
          case 26: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
          case 34: {
            if (soc_ == null) {
              Soc = new global::openfmb.commonmodule.MV();
            }
            input.ReadMessage(Soc);
            break;
          }
          case 42: {
            if (stdby_ == null) {
              Stdby = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(Stdby);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN class
  /// </summary>
  public sealed partial class ESSStatusZGEN : pb::IMessage<ESSStatusZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSStatusZGEN> _parser = new pb::MessageParser<ESSStatusZGEN>(() => new ESSStatusZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSStatusZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusZGEN(ESSStatusZGEN other) : this() {
      eSSEventAndStatusZGEN_ = other.eSSEventAndStatusZGEN_ != null ? other.eSSEventAndStatusZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusZGEN Clone() {
      return new ESSStatusZGEN(this);
    }

    /// <summary>Field number for the "eSSEventAndStatusZGEN" field.</summary>
    public const int ESSEventAndStatusZGENFieldNumber = 1;
    private global::openfmb.essmodule.ESSEventAndStatusZGEN eSSEventAndStatusZGEN_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSEventAndStatusZGEN ESSEventAndStatusZGEN {
      get { return eSSEventAndStatusZGEN_; }
      set {
        eSSEventAndStatusZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSStatusZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSStatusZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ESSEventAndStatusZGEN, other.ESSEventAndStatusZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eSSEventAndStatusZGEN_ != null) hash ^= ESSEventAndStatusZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eSSEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eSSEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eSSEventAndStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ESSEventAndStatusZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSStatusZGEN other) {
      if (other == null) {
        return;
      }
      if (other.eSSEventAndStatusZGEN_ != null) {
        if (eSSEventAndStatusZGEN_ == null) {
          ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
        }
        ESSEventAndStatusZGEN.MergeFrom(other.ESSEventAndStatusZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eSSEventAndStatusZGEN_ == null) {
              ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
            }
            input.ReadMessage(ESSEventAndStatusZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eSSEventAndStatusZGEN_ == null) {
              ESSEventAndStatusZGEN = new global::openfmb.essmodule.ESSEventAndStatusZGEN();
            }
            input.ReadMessage(ESSEventAndStatusZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS status
  /// </summary>
  public sealed partial class ESSStatus : pb::IMessage<ESSStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSStatus> _parser = new pb::MessageParser<ESSStatus>(() => new ESSStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatus(ESSStatus other) : this() {
      statusValue_ = other.statusValue_ != null ? other.statusValue_.Clone() : null;
      essStatusZBAT_ = other.essStatusZBAT_ != null ? other.essStatusZBAT_.Clone() : null;
      essStatusZGEN_ = other.essStatusZGEN_ != null ? other.essStatusZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatus Clone() {
      return new ESSStatus(this);
    }

    /// <summary>Field number for the "statusValue" field.</summary>
    public const int StatusValueFieldNumber = 1;
    private global::openfmb.commonmodule.StatusValue statusValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusValue StatusValue {
      get { return statusValue_; }
      set {
        statusValue_ = value;
      }
    }

    /// <summary>Field number for the "essStatusZBAT" field.</summary>
    public const int EssStatusZBATFieldNumber = 2;
    private global::openfmb.essmodule.EssStatusZBAT essStatusZBAT_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.EssStatusZBAT EssStatusZBAT {
      get { return essStatusZBAT_; }
      set {
        essStatusZBAT_ = value;
      }
    }

    /// <summary>Field number for the "essStatusZGEN" field.</summary>
    public const int EssStatusZGENFieldNumber = 3;
    private global::openfmb.essmodule.ESSStatusZGEN essStatusZGEN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSStatusZGEN EssStatusZGEN {
      get { return essStatusZGEN_; }
      set {
        essStatusZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusValue, other.StatusValue)) return false;
      if (!object.Equals(EssStatusZBAT, other.EssStatusZBAT)) return false;
      if (!object.Equals(EssStatusZGEN, other.EssStatusZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusValue_ != null) hash ^= StatusValue.GetHashCode();
      if (essStatusZBAT_ != null) hash ^= EssStatusZBAT.GetHashCode();
      if (essStatusZGEN_ != null) hash ^= EssStatusZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (statusValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusValue);
      }
      if (essStatusZBAT_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssStatusZBAT);
      }
      if (essStatusZGEN_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (statusValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusValue);
      }
      if (essStatusZBAT_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssStatusZBAT);
      }
      if (essStatusZGEN_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusValue);
      }
      if (essStatusZBAT_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssStatusZBAT);
      }
      if (essStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssStatusZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSStatus other) {
      if (other == null) {
        return;
      }
      if (other.statusValue_ != null) {
        if (statusValue_ == null) {
          StatusValue = new global::openfmb.commonmodule.StatusValue();
        }
        StatusValue.MergeFrom(other.StatusValue);
      }
      if (other.essStatusZBAT_ != null) {
        if (essStatusZBAT_ == null) {
          EssStatusZBAT = new global::openfmb.essmodule.EssStatusZBAT();
        }
        EssStatusZBAT.MergeFrom(other.EssStatusZBAT);
      }
      if (other.essStatusZGEN_ != null) {
        if (essStatusZGEN_ == null) {
          EssStatusZGEN = new global::openfmb.essmodule.ESSStatusZGEN();
        }
        EssStatusZGEN.MergeFrom(other.EssStatusZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statusValue_ == null) {
              StatusValue = new global::openfmb.commonmodule.StatusValue();
            }
            input.ReadMessage(StatusValue);
            break;
          }
          case 18: {
            if (essStatusZBAT_ == null) {
              EssStatusZBAT = new global::openfmb.essmodule.EssStatusZBAT();
            }
            input.ReadMessage(EssStatusZBAT);
            break;
          }
          case 26: {
            if (essStatusZGEN_ == null) {
              EssStatusZGEN = new global::openfmb.essmodule.ESSStatusZGEN();
            }
            input.ReadMessage(EssStatusZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (statusValue_ == null) {
              StatusValue = new global::openfmb.commonmodule.StatusValue();
            }
            input.ReadMessage(StatusValue);
            break;
          }
          case 18: {
            if (essStatusZBAT_ == null) {
              EssStatusZBAT = new global::openfmb.essmodule.EssStatusZBAT();
            }
            input.ReadMessage(EssStatusZBAT);
            break;
          }
          case 26: {
            if (essStatusZGEN_ == null) {
              EssStatusZGEN = new global::openfmb.essmodule.ESSStatusZGEN();
            }
            input.ReadMessage(EssStatusZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS status profile
  /// </summary>
  public sealed partial class ESSStatusProfile : pb::IMessage<ESSStatusProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSStatusProfile> _parser = new pb::MessageParser<ESSStatusProfile>(() => new ESSStatusProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSStatusProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusProfile(ESSStatusProfile other) : this() {
      statusMessageInfo_ = other.statusMessageInfo_ != null ? other.statusMessageInfo_.Clone() : null;
      ess_ = other.ess_ != null ? other.ess_.Clone() : null;
      essStatus_ = other.essStatus_ != null ? other.essStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSStatusProfile Clone() {
      return new ESSStatusProfile(this);
    }

    /// <summary>Field number for the "statusMessageInfo" field.</summary>
    public const int StatusMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.StatusMessageInfo statusMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusMessageInfo StatusMessageInfo {
      get { return statusMessageInfo_; }
      set {
        statusMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "ess" field.</summary>
    public const int EssFieldNumber = 2;
    private global::openfmb.commonmodule.ESS ess_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ESS Ess {
      get { return ess_; }
      set {
        ess_ = value;
      }
    }

    /// <summary>Field number for the "essStatus" field.</summary>
    public const int EssStatusFieldNumber = 3;
    private global::openfmb.essmodule.ESSStatus essStatus_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSStatus EssStatus {
      get { return essStatus_; }
      set {
        essStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSStatusProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSStatusProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusMessageInfo, other.StatusMessageInfo)) return false;
      if (!object.Equals(Ess, other.Ess)) return false;
      if (!object.Equals(EssStatus, other.EssStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusMessageInfo_ != null) hash ^= StatusMessageInfo.GetHashCode();
      if (ess_ != null) hash ^= Ess.GetHashCode();
      if (essStatus_ != null) hash ^= EssStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (statusMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (statusMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusMessageInfo);
      }
      if (ess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ess);
      }
      if (essStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSStatusProfile other) {
      if (other == null) {
        return;
      }
      if (other.statusMessageInfo_ != null) {
        if (statusMessageInfo_ == null) {
          StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
        }
        StatusMessageInfo.MergeFrom(other.StatusMessageInfo);
      }
      if (other.ess_ != null) {
        if (ess_ == null) {
          Ess = new global::openfmb.commonmodule.ESS();
        }
        Ess.MergeFrom(other.Ess);
      }
      if (other.essStatus_ != null) {
        if (essStatus_ == null) {
          EssStatus = new global::openfmb.essmodule.ESSStatus();
        }
        EssStatus.MergeFrom(other.EssStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statusMessageInfo_ == null) {
              StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
            }
            input.ReadMessage(StatusMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essStatus_ == null) {
              EssStatus = new global::openfmb.essmodule.ESSStatus();
            }
            input.ReadMessage(EssStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (statusMessageInfo_ == null) {
              StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
            }
            input.ReadMessage(StatusMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essStatus_ == null) {
              EssStatus = new global::openfmb.essmodule.ESSStatus();
            }
            input.ReadMessage(EssStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Point definition (Point)
  /// </summary>
  public sealed partial class ESSPoint : pb::IMessage<ESSPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSPoint> _parser = new pb::MessageParser<ESSPoint>(() => new ESSPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPoint(ESSPoint other) : this() {
      blackStartEnabled_ = other.blackStartEnabled_ != null ? other.blackStartEnabled_.Clone() : null;
      frequencySetPointEnabled_ = other.frequencySetPointEnabled_ != null ? other.frequencySetPointEnabled_.Clone() : null;
      function_ = other.function_ != null ? other.function_.Clone() : null;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      PctHzDroop = other.PctHzDroop;
      PctVDroop = other.PctVDroop;
      rampRates_ = other.rampRates_ != null ? other.rampRates_.Clone() : null;
      reactivePwrSetPointEnabled_ = other.reactivePwrSetPointEnabled_ != null ? other.reactivePwrSetPointEnabled_.Clone() : null;
      realPwrSetPointEnabled_ = other.realPwrSetPointEnabled_ != null ? other.realPwrSetPointEnabled_.Clone() : null;
      reset_ = other.reset_ != null ? other.reset_.Clone() : null;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      syncBackToGrid_ = other.syncBackToGrid_ != null ? other.syncBackToGrid_.Clone() : null;
      transToIslndOnGridLossEnabled_ = other.transToIslndOnGridLossEnabled_ != null ? other.transToIslndOnGridLossEnabled_.Clone() : null;
      voltageSetPointEnabled_ = other.voltageSetPointEnabled_ != null ? other.voltageSetPointEnabled_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSPoint Clone() {
      return new ESSPoint(this);
    }

    /// <summary>Field number for the "blackStartEnabled" field.</summary>
    public const int BlackStartEnabledFieldNumber = 1;
    private global::openfmb.commonmodule.ControlDPC blackStartEnabled_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC BlackStartEnabled {
      get { return blackStartEnabled_; }
      set {
        blackStartEnabled_ = value;
      }
    }

    /// <summary>Field number for the "frequencySetPointEnabled" field.</summary>
    public const int FrequencySetPointEnabledFieldNumber = 2;
    private global::openfmb.commonmodule.ControlDPC frequencySetPointEnabled_;
    /// <summary>
    /// Enable frequency set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC FrequencySetPointEnabled {
      get { return frequencySetPointEnabled_; }
      set {
        frequencySetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "function" field.</summary>
    public const int FunctionFieldNumber = 3;
    private global::openfmb.essmodule.ESSFunction function_;
    /// <summary>
    /// ESS function parameter
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSFunction Function {
      get { return function_; }
      set {
        function_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 4;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind mode_;
    /// <summary>
    /// Grid connect mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "pctHzDroop" field.</summary>
    public const int PctHzDroopFieldNumber = 5;
    private static readonly pb::FieldCodec<float?> _single_pctHzDroop_codec = pb::FieldCodec.ForStructWrapper<float>(42);
    private float? pctHzDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctHzDroop {
      get { return pctHzDroop_; }
      set {
        pctHzDroop_ = value;
      }
    }


    /// <summary>Field number for the "pctVDroop" field.</summary>
    public const int PctVDroopFieldNumber = 6;
    private static readonly pb::FieldCodec<float?> _single_pctVDroop_codec = pb::FieldCodec.ForStructWrapper<float>(50);
    private float? pctVDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctVDroop {
      get { return pctVDroop_; }
      set {
        pctVDroop_ = value;
      }
    }


    /// <summary>Field number for the "rampRates" field.</summary>
    public const int RampRatesFieldNumber = 7;
    private global::openfmb.commonmodule.RampRate rampRates_;
    /// <summary>
    /// Ramp rates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.RampRate RampRates {
      get { return rampRates_; }
      set {
        rampRates_ = value;
      }
    }

    /// <summary>Field number for the "reactivePwrSetPointEnabled" field.</summary>
    public const int ReactivePwrSetPointEnabledFieldNumber = 8;
    private global::openfmb.commonmodule.ControlDPC reactivePwrSetPointEnabled_;
    /// <summary>
    /// Enable reactive power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC ReactivePwrSetPointEnabled {
      get { return reactivePwrSetPointEnabled_; }
      set {
        reactivePwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "realPwrSetPointEnabled" field.</summary>
    public const int RealPwrSetPointEnabledFieldNumber = 9;
    private global::openfmb.commonmodule.ControlDPC realPwrSetPointEnabled_;
    /// <summary>
    /// Enable real power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC RealPwrSetPointEnabled {
      get { return realPwrSetPointEnabled_; }
      set {
        realPwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 10;
    private global::openfmb.commonmodule.ControlDPC reset_;
    /// <summary>
    /// Reset device
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC Reset {
      get { return reset_; }
      set {
        reset_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 11;
    private global::openfmb.commonmodule.Optional_StateKind state_;
    /// <summary>
    /// ESS state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.Optional_StateKind State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "syncBackToGrid" field.</summary>
    public const int SyncBackToGridFieldNumber = 12;
    private global::openfmb.commonmodule.ControlDPC syncBackToGrid_;
    /// <summary>
    /// Synchronize back to grid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC SyncBackToGrid {
      get { return syncBackToGrid_; }
      set {
        syncBackToGrid_ = value;
      }
    }

    /// <summary>Field number for the "transToIslndOnGridLossEnabled" field.</summary>
    public const int TransToIslndOnGridLossEnabledFieldNumber = 13;
    private global::openfmb.commonmodule.ControlDPC transToIslndOnGridLossEnabled_;
    /// <summary>
    /// Transition to island on grid loss enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC TransToIslndOnGridLossEnabled {
      get { return transToIslndOnGridLossEnabled_; }
      set {
        transToIslndOnGridLossEnabled_ = value;
      }
    }

    /// <summary>Field number for the "voltageSetPointEnabled" field.</summary>
    public const int VoltageSetPointEnabledFieldNumber = 14;
    private global::openfmb.commonmodule.ControlDPC voltageSetPointEnabled_;
    /// <summary>
    /// Enable voltage set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlDPC VoltageSetPointEnabled {
      get { return voltageSetPointEnabled_; }
      set {
        voltageSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 15;
    private global::openfmb.commonmodule.ControlTimestamp startTime_;
    /// <summary>
    /// Start time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlackStartEnabled, other.BlackStartEnabled)) return false;
      if (!object.Equals(FrequencySetPointEnabled, other.FrequencySetPointEnabled)) return false;
      if (!object.Equals(Function, other.Function)) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctHzDroop, other.PctHzDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctVDroop, other.PctVDroop)) return false;
      if (!object.Equals(RampRates, other.RampRates)) return false;
      if (!object.Equals(ReactivePwrSetPointEnabled, other.ReactivePwrSetPointEnabled)) return false;
      if (!object.Equals(RealPwrSetPointEnabled, other.RealPwrSetPointEnabled)) return false;
      if (!object.Equals(Reset, other.Reset)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(SyncBackToGrid, other.SyncBackToGrid)) return false;
      if (!object.Equals(TransToIslndOnGridLossEnabled, other.TransToIslndOnGridLossEnabled)) return false;
      if (!object.Equals(VoltageSetPointEnabled, other.VoltageSetPointEnabled)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blackStartEnabled_ != null) hash ^= BlackStartEnabled.GetHashCode();
      if (frequencySetPointEnabled_ != null) hash ^= FrequencySetPointEnabled.GetHashCode();
      if (function_ != null) hash ^= Function.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (pctHzDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctHzDroop);
      if (pctVDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctVDroop);
      if (rampRates_ != null) hash ^= RampRates.GetHashCode();
      if (reactivePwrSetPointEnabled_ != null) hash ^= ReactivePwrSetPointEnabled.GetHashCode();
      if (realPwrSetPointEnabled_ != null) hash ^= RealPwrSetPointEnabled.GetHashCode();
      if (reset_ != null) hash ^= Reset.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (syncBackToGrid_ != null) hash ^= SyncBackToGrid.GetHashCode();
      if (transToIslndOnGridLossEnabled_ != null) hash ^= TransToIslndOnGridLossEnabled.GetHashCode();
      if (voltageSetPointEnabled_ != null) hash ^= VoltageSetPointEnabled.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (blackStartEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Function);
      }
      if (mode_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Reset);
      }
      if (state_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(State);
      }
      if (syncBackToGrid_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (blackStartEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Function);
      }
      if (mode_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(ref output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(ref output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Reset);
      }
      if (state_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(State);
      }
      if (syncBackToGrid_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blackStartEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackStartEnabled);
      }
      if (frequencySetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrequencySetPointEnabled);
      }
      if (function_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Function);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (pctHzDroop_ != null) {
        size += _single_pctHzDroop_codec.CalculateSizeWithTag(PctHzDroop);
      }
      if (pctVDroop_ != null) {
        size += _single_pctVDroop_codec.CalculateSizeWithTag(PctVDroop);
      }
      if (rampRates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reset);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (syncBackToGrid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SyncBackToGrid);
      }
      if (transToIslndOnGridLossEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransToIslndOnGridLossEnabled);
      }
      if (voltageSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSPoint other) {
      if (other == null) {
        return;
      }
      if (other.blackStartEnabled_ != null) {
        if (blackStartEnabled_ == null) {
          BlackStartEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        BlackStartEnabled.MergeFrom(other.BlackStartEnabled);
      }
      if (other.frequencySetPointEnabled_ != null) {
        if (frequencySetPointEnabled_ == null) {
          FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        FrequencySetPointEnabled.MergeFrom(other.FrequencySetPointEnabled);
      }
      if (other.function_ != null) {
        if (function_ == null) {
          Function = new global::openfmb.essmodule.ESSFunction();
        }
        Function.MergeFrom(other.Function);
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.pctHzDroop_ != null) {
        if (pctHzDroop_ == null || other.PctHzDroop != 0F) {
          PctHzDroop = other.PctHzDroop;
        }
      }
      if (other.pctVDroop_ != null) {
        if (pctVDroop_ == null || other.PctVDroop != 0F) {
          PctVDroop = other.PctVDroop;
        }
      }
      if (other.rampRates_ != null) {
        if (rampRates_ == null) {
          RampRates = new global::openfmb.commonmodule.RampRate();
        }
        RampRates.MergeFrom(other.RampRates);
      }
      if (other.reactivePwrSetPointEnabled_ != null) {
        if (reactivePwrSetPointEnabled_ == null) {
          ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        ReactivePwrSetPointEnabled.MergeFrom(other.ReactivePwrSetPointEnabled);
      }
      if (other.realPwrSetPointEnabled_ != null) {
        if (realPwrSetPointEnabled_ == null) {
          RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        RealPwrSetPointEnabled.MergeFrom(other.RealPwrSetPointEnabled);
      }
      if (other.reset_ != null) {
        if (reset_ == null) {
          Reset = new global::openfmb.commonmodule.ControlDPC();
        }
        Reset.MergeFrom(other.Reset);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::openfmb.commonmodule.Optional_StateKind();
        }
        State.MergeFrom(other.State);
      }
      if (other.syncBackToGrid_ != null) {
        if (syncBackToGrid_ == null) {
          SyncBackToGrid = new global::openfmb.commonmodule.ControlDPC();
        }
        SyncBackToGrid.MergeFrom(other.SyncBackToGrid);
      }
      if (other.transToIslndOnGridLossEnabled_ != null) {
        if (transToIslndOnGridLossEnabled_ == null) {
          TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        TransToIslndOnGridLossEnabled.MergeFrom(other.TransToIslndOnGridLossEnabled);
      }
      if (other.voltageSetPointEnabled_ != null) {
        if (voltageSetPointEnabled_ == null) {
          VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
        }
        VoltageSetPointEnabled.MergeFrom(other.VoltageSetPointEnabled);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::openfmb.commonmodule.ControlTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (blackStartEnabled_ == null) {
              BlackStartEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(BlackStartEnabled);
            break;
          }
          case 18: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 26: {
            if (function_ == null) {
              Function = new global::openfmb.essmodule.ESSFunction();
            }
            input.ReadMessage(Function);
            break;
          }
          case 34: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 42: {
            float? value = _single_pctHzDroop_codec.Read(input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 50: {
            float? value = _single_pctVDroop_codec.Read(input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 58: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 66: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 74: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 82: {
            if (reset_ == null) {
              Reset = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(Reset);
            break;
          }
          case 90: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 98: {
            if (syncBackToGrid_ == null) {
              SyncBackToGrid = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(SyncBackToGrid);
            break;
          }
          case 106: {
            if (transToIslndOnGridLossEnabled_ == null) {
              TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(TransToIslndOnGridLossEnabled);
            break;
          }
          case 114: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
          case 122: {
            if (startTime_ == null) {
              StartTime = new global::openfmb.commonmodule.ControlTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (blackStartEnabled_ == null) {
              BlackStartEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(BlackStartEnabled);
            break;
          }
          case 18: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 26: {
            if (function_ == null) {
              Function = new global::openfmb.essmodule.ESSFunction();
            }
            input.ReadMessage(Function);
            break;
          }
          case 34: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 42: {
            float? value = _single_pctHzDroop_codec.Read(ref input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 50: {
            float? value = _single_pctVDroop_codec.Read(ref input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 58: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 66: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 74: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 82: {
            if (reset_ == null) {
              Reset = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(Reset);
            break;
          }
          case 90: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 98: {
            if (syncBackToGrid_ == null) {
              SyncBackToGrid = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(SyncBackToGrid);
            break;
          }
          case 106: {
            if (transToIslndOnGridLossEnabled_ == null) {
              TransToIslndOnGridLossEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(TransToIslndOnGridLossEnabled);
            break;
          }
          case 114: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlDPC();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
          case 122: {
            if (startTime_ == null) {
              StartTime = new global::openfmb.commonmodule.ControlTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Curve shape setting (FC=SP) (CSG_SP)
  /// </summary>
  public sealed partial class ESSCSG : pb::IMessage<ESSCSG>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSCSG> _parser = new pb::MessageParser<ESSCSG>(() => new ESSCSG());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSCSG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSCSG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSCSG(ESSCSG other) : this() {
      crvPts_ = other.crvPts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSCSG Clone() {
      return new ESSCSG(this);
    }

    /// <summary>Field number for the "crvPts" field.</summary>
    public const int CrvPtsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::openfmb.essmodule.ESSPoint> _repeated_crvPts_codec
        = pb::FieldCodec.ForMessage(10, global::openfmb.essmodule.ESSPoint.Parser);
    private readonly pbc::RepeatedField<global::openfmb.essmodule.ESSPoint> crvPts_ = new pbc::RepeatedField<global::openfmb.essmodule.ESSPoint>();
    /// <summary>
    /// The array with the points specifying a curve shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::openfmb.essmodule.ESSPoint> CrvPts {
      get { return crvPts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSCSG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSCSG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!crvPts_.Equals(other.crvPts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= crvPts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      crvPts_.WriteTo(output, _repeated_crvPts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      crvPts_.WriteTo(ref output, _repeated_crvPts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += crvPts_.CalculateSize(_repeated_crvPts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSCSG other) {
      if (other == null) {
        return;
      }
      crvPts_.Add(other.crvPts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            crvPts_.AddEntriesFrom(input, _repeated_crvPts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            crvPts_.AddEntriesFrom(ref input, _repeated_crvPts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
  /// </summary>
  public sealed partial class ESSControlScheduleFSCH : pb::IMessage<ESSControlScheduleFSCH>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSControlScheduleFSCH> _parser = new pb::MessageParser<ESSControlScheduleFSCH>(() => new ESSControlScheduleFSCH());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSControlScheduleFSCH> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlScheduleFSCH() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlScheduleFSCH(ESSControlScheduleFSCH other) : this() {
      valDCSG_ = other.valDCSG_ != null ? other.valDCSG_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlScheduleFSCH Clone() {
      return new ESSControlScheduleFSCH(this);
    }

    /// <summary>Field number for the "ValDCSG" field.</summary>
    public const int ValDCSGFieldNumber = 1;
    private global::openfmb.essmodule.ESSCSG valDCSG_;
    /// <summary>
    /// Discrete value in ESSCSG type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSCSG ValDCSG {
      get { return valDCSG_; }
      set {
        valDCSG_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSControlScheduleFSCH);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSControlScheduleFSCH other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ValDCSG, other.ValDCSG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valDCSG_ != null) hash ^= ValDCSG.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (valDCSG_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValDCSG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (valDCSG_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValDCSG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valDCSG_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValDCSG);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSControlScheduleFSCH other) {
      if (other == null) {
        return;
      }
      if (other.valDCSG_ != null) {
        if (valDCSG_ == null) {
          ValDCSG = new global::openfmb.essmodule.ESSCSG();
        }
        ValDCSG.MergeFrom(other.ValDCSG);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (valDCSG_ == null) {
              ValDCSG = new global::openfmb.essmodule.ESSCSG();
            }
            input.ReadMessage(ValDCSG);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (valDCSG_ == null) {
              ValDCSG = new global::openfmb.essmodule.ESSCSG();
            }
            input.ReadMessage(ValDCSG);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
  /// </summary>
  public sealed partial class EssControlFSCC : pb::IMessage<EssControlFSCC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EssControlFSCC> _parser = new pb::MessageParser<EssControlFSCC>(() => new EssControlFSCC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EssControlFSCC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssControlFSCC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssControlFSCC(EssControlFSCC other) : this() {
      controlFSCC_ = other.controlFSCC_ != null ? other.controlFSCC_.Clone() : null;
      essControlScheduleFSCH_ = other.essControlScheduleFSCH_ != null ? other.essControlScheduleFSCH_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EssControlFSCC Clone() {
      return new EssControlFSCC(this);
    }

    /// <summary>Field number for the "controlFSCC" field.</summary>
    public const int ControlFSCCFieldNumber = 1;
    private global::openfmb.commonmodule.ControlFSCC controlFSCC_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlFSCC ControlFSCC {
      get { return controlFSCC_; }
      set {
        controlFSCC_ = value;
      }
    }

    /// <summary>Field number for the "essControlScheduleFSCH" field.</summary>
    public const int EssControlScheduleFSCHFieldNumber = 2;
    private global::openfmb.essmodule.ESSControlScheduleFSCH essControlScheduleFSCH_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSControlScheduleFSCH EssControlScheduleFSCH {
      get { return essControlScheduleFSCH_; }
      set {
        essControlScheduleFSCH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EssControlFSCC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EssControlFSCC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlFSCC, other.ControlFSCC)) return false;
      if (!object.Equals(EssControlScheduleFSCH, other.EssControlScheduleFSCH)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlFSCC_ != null) hash ^= ControlFSCC.GetHashCode();
      if (essControlScheduleFSCH_ != null) hash ^= EssControlScheduleFSCH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlFSCC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlFSCC);
      }
      if (essControlScheduleFSCH_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlFSCC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlFSCC);
      }
      if (essControlScheduleFSCH_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EssControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlFSCC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlFSCC);
      }
      if (essControlScheduleFSCH_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EssControlFSCC other) {
      if (other == null) {
        return;
      }
      if (other.controlFSCC_ != null) {
        if (controlFSCC_ == null) {
          ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
        }
        ControlFSCC.MergeFrom(other.ControlFSCC);
      }
      if (other.essControlScheduleFSCH_ != null) {
        if (essControlScheduleFSCH_ == null) {
          EssControlScheduleFSCH = new global::openfmb.essmodule.ESSControlScheduleFSCH();
        }
        EssControlScheduleFSCH.MergeFrom(other.EssControlScheduleFSCH);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlFSCC_ == null) {
              ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
            }
            input.ReadMessage(ControlFSCC);
            break;
          }
          case 18: {
            if (essControlScheduleFSCH_ == null) {
              EssControlScheduleFSCH = new global::openfmb.essmodule.ESSControlScheduleFSCH();
            }
            input.ReadMessage(EssControlScheduleFSCH);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlFSCC_ == null) {
              ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
            }
            input.ReadMessage(ControlFSCC);
            break;
          }
          case 18: {
            if (essControlScheduleFSCH_ == null) {
              EssControlScheduleFSCH = new global::openfmb.essmodule.ESSControlScheduleFSCH();
            }
            input.ReadMessage(EssControlScheduleFSCH);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS control class
  /// </summary>
  public sealed partial class ESSControl : pb::IMessage<ESSControl>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSControl> _parser = new pb::MessageParser<ESSControl>(() => new ESSControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControl(ESSControl other) : this() {
      controlValue_ = other.controlValue_ != null ? other.controlValue_.Clone() : null;
      check_ = other.check_ != null ? other.check_.Clone() : null;
      essControlFSCC_ = other.essControlFSCC_ != null ? other.essControlFSCC_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControl Clone() {
      return new ESSControl(this);
    }

    /// <summary>Field number for the "controlValue" field.</summary>
    public const int ControlValueFieldNumber = 1;
    private global::openfmb.commonmodule.ControlValue controlValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlValue ControlValue {
      get { return controlValue_; }
      set {
        controlValue_ = value;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 2;
    private global::openfmb.commonmodule.CheckConditions check_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.CheckConditions Check {
      get { return check_; }
      set {
        check_ = value;
      }
    }

    /// <summary>Field number for the "essControlFSCC" field.</summary>
    public const int EssControlFSCCFieldNumber = 3;
    private global::openfmb.essmodule.EssControlFSCC essControlFSCC_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.EssControlFSCC EssControlFSCC {
      get { return essControlFSCC_; }
      set {
        essControlFSCC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlValue, other.ControlValue)) return false;
      if (!object.Equals(Check, other.Check)) return false;
      if (!object.Equals(EssControlFSCC, other.EssControlFSCC)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlValue_ != null) hash ^= ControlValue.GetHashCode();
      if (check_ != null) hash ^= Check.GetHashCode();
      if (essControlFSCC_ != null) hash ^= EssControlFSCC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlValue);
      }
      if (check_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Check);
      }
      if (essControlFSCC_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssControlFSCC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlValue);
      }
      if (check_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Check);
      }
      if (essControlFSCC_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssControlFSCC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlValue);
      }
      if (check_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Check);
      }
      if (essControlFSCC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssControlFSCC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSControl other) {
      if (other == null) {
        return;
      }
      if (other.controlValue_ != null) {
        if (controlValue_ == null) {
          ControlValue = new global::openfmb.commonmodule.ControlValue();
        }
        ControlValue.MergeFrom(other.ControlValue);
      }
      if (other.check_ != null) {
        if (check_ == null) {
          Check = new global::openfmb.commonmodule.CheckConditions();
        }
        Check.MergeFrom(other.Check);
      }
      if (other.essControlFSCC_ != null) {
        if (essControlFSCC_ == null) {
          EssControlFSCC = new global::openfmb.essmodule.EssControlFSCC();
        }
        EssControlFSCC.MergeFrom(other.EssControlFSCC);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlValue_ == null) {
              ControlValue = new global::openfmb.commonmodule.ControlValue();
            }
            input.ReadMessage(ControlValue);
            break;
          }
          case 18: {
            if (check_ == null) {
              Check = new global::openfmb.commonmodule.CheckConditions();
            }
            input.ReadMessage(Check);
            break;
          }
          case 26: {
            if (essControlFSCC_ == null) {
              EssControlFSCC = new global::openfmb.essmodule.EssControlFSCC();
            }
            input.ReadMessage(EssControlFSCC);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlValue_ == null) {
              ControlValue = new global::openfmb.commonmodule.ControlValue();
            }
            input.ReadMessage(ControlValue);
            break;
          }
          case 18: {
            if (check_ == null) {
              Check = new global::openfmb.commonmodule.CheckConditions();
            }
            input.ReadMessage(Check);
            break;
          }
          case 26: {
            if (essControlFSCC_ == null) {
              EssControlFSCC = new global::openfmb.essmodule.EssControlFSCC();
            }
            input.ReadMessage(EssControlFSCC);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// ESS control profile
  /// </summary>
  public sealed partial class ESSControlProfile : pb::IMessage<ESSControlProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ESSControlProfile> _parser = new pb::MessageParser<ESSControlProfile>(() => new ESSControlProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESSControlProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.essmodule.EssmoduleReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlProfile(ESSControlProfile other) : this() {
      controlMessageInfo_ = other.controlMessageInfo_ != null ? other.controlMessageInfo_.Clone() : null;
      ess_ = other.ess_ != null ? other.ess_.Clone() : null;
      essControl_ = other.essControl_ != null ? other.essControl_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESSControlProfile Clone() {
      return new ESSControlProfile(this);
    }

    /// <summary>Field number for the "controlMessageInfo" field.</summary>
    public const int ControlMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ControlMessageInfo controlMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlMessageInfo ControlMessageInfo {
      get { return controlMessageInfo_; }
      set {
        controlMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "ess" field.</summary>
    public const int EssFieldNumber = 2;
    private global::openfmb.commonmodule.ESS ess_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ESS Ess {
      get { return ess_; }
      set {
        ess_ = value;
      }
    }

    /// <summary>Field number for the "essControl" field.</summary>
    public const int EssControlFieldNumber = 3;
    private global::openfmb.essmodule.ESSControl essControl_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.essmodule.ESSControl EssControl {
      get { return essControl_; }
      set {
        essControl_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESSControlProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESSControlProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlMessageInfo, other.ControlMessageInfo)) return false;
      if (!object.Equals(Ess, other.Ess)) return false;
      if (!object.Equals(EssControl, other.EssControl)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlMessageInfo_ != null) hash ^= ControlMessageInfo.GetHashCode();
      if (ess_ != null) hash ^= Ess.GetHashCode();
      if (essControl_ != null) hash ^= EssControl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essControl_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssControl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (ess_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Ess);
      }
      if (essControl_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EssControl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlMessageInfo);
      }
      if (ess_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ess);
      }
      if (essControl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssControl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESSControlProfile other) {
      if (other == null) {
        return;
      }
      if (other.controlMessageInfo_ != null) {
        if (controlMessageInfo_ == null) {
          ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
        }
        ControlMessageInfo.MergeFrom(other.ControlMessageInfo);
      }
      if (other.ess_ != null) {
        if (ess_ == null) {
          Ess = new global::openfmb.commonmodule.ESS();
        }
        Ess.MergeFrom(other.Ess);
      }
      if (other.essControl_ != null) {
        if (essControl_ == null) {
          EssControl = new global::openfmb.essmodule.ESSControl();
        }
        EssControl.MergeFrom(other.EssControl);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essControl_ == null) {
              EssControl = new global::openfmb.essmodule.ESSControl();
            }
            input.ReadMessage(EssControl);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (ess_ == null) {
              Ess = new global::openfmb.commonmodule.ESS();
            }
            input.ReadMessage(Ess);
            break;
          }
          case 26: {
            if (essControl_ == null) {
              EssControl = new global::openfmb.essmodule.ESSControl();
            }
            input.ReadMessage(EssControl);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
