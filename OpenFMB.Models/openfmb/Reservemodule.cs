// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: reservemodule/reservemodule.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace openfmb.reservemodule {

  /// <summary>Holder for reflection information generated from reservemodule/reservemodule.proto</summary>
  public static partial class ReservemoduleReflection {

    #region Descriptor
    /// <summary>File descriptor for reservemodule/reservemodule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReservemoduleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFyZXNlcnZlbW9kdWxlL3Jlc2VydmVtb2R1bGUucHJvdG8SDXJlc2VydmVt",
            "b2R1bGUaCXVtbC5wcm90bxofY29tbW9ubW9kdWxlL2NvbW1vbm1vZHVsZS5w",
            "cm90byLAAQoNUmVzZXJ2ZU1hcmdpbhI0Cgtsb2dpY2FsTm9kZRgBIAEoCzIZ",
            "LmNvbW1vbm1vZHVsZS5Mb2dpY2FsTm9kZUIEgLUYARIcCgFBGAIgASgLMhEu",
            "Y29tbW9ubW9kdWxlLlBNRxIdCgJWQRgDIAEoCzIRLmNvbW1vbm1vZHVsZS5Q",
            "TUcSHgoDVkFyGAQgASgLMhEuY29tbW9ubW9kdWxlLlBNRxIcCgFXGAUgASgL",
            "MhEuY29tbW9ubW9kdWxlLlBNRyKxAQoTUmVzZXJ2ZUF2YWlsYWJpbGl0eRI3",
            "ChFpbmNyZW1lbnRhbE1hcmdpbhgBIAEoCzIcLnJlc2VydmVtb2R1bGUuUmVz",
            "ZXJ2ZU1hcmdpbhIsCgZtYXJnaW4YAiABKAsyHC5yZXNlcnZlbW9kdWxlLlJl",
            "c2VydmVNYXJnaW4SMwoNc3RhbmRieU1hcmdpbhgDIAEoCzIcLnJlc2VydmVt",
            "b2R1bGUuUmVzZXJ2ZU1hcmdpbiKjAQoPQWxsb2NhdGVkTWFyZ2luEhsKCXJl",
            "cXVlc3RJRBgBIAEoCUIIiLUYAZC1GAESNQoPYWxsb2NhdGVkTWFyZ2luGAIg",
            "ASgLMhwucmVzZXJ2ZW1vZHVsZS5SZXNlcnZlTWFyZ2luEjwKFmFsbG9jYXRl",
            "ZFN0YW5kYnlNYXJnaW4YAyABKAsyHC5yZXNlcnZlbW9kdWxlLlJlc2VydmVN",
            "YXJnaW4izwMKGlJlc2VydmVBdmFpbGFiaWxpdHlQcm9maWxlEkIKEmNvbnRy",
            "b2xNZXNzYWdlSW5mbxgBIAEoCzIgLmNvbW1vbm1vZHVsZS5Db250cm9sTWVz",
            "c2FnZUluZm9CBIC1GAESNwoPYWxsb2NhdGVkTWFyZ2luGAIgASgLMh4ucmVz",
            "ZXJ2ZW1vZHVsZS5BbGxvY2F0ZWRNYXJnaW4SUQoecmVxdWVzdGVyQ2lyY3Vp",
            "dFNlZ21lbnRTZXJ2aWNlGAMgASgLMh8uY29tbW9ubW9kdWxlLkFwcGxpY2F0",
            "aW9uU3lzdGVtQgiItRgBkLUYARJJChNyZXNlcnZlQXZhaWxhYmlsaXR5GAQg",
            "ASgLMiIucmVzZXJ2ZW1vZHVsZS5SZXNlcnZlQXZhaWxhYmlsaXR5QgiItRgB",
            "kLUYARJRCh5yZXNwb25kZXJDaXJjdWl0U2VnbWVudFNlcnZpY2UYBSABKAsy",
            "Hy5jb21tb25tb2R1bGUuQXBwbGljYXRpb25TeXN0ZW1CCIi1GAGQtRgBEj0K",
            "CHRpZVBvaW50GAYgASgLMiEuY29tbW9ubW9kdWxlLkNvbmR1Y3RpbmdFcXVp",
            "cG1lbnRCCIi1GAGQtRgBOgTA8xgBIpABCg5SZXNlcnZlUmVxdWVzdBIbCgly",
            "ZXF1ZXN0SUQYASABKAlCCIi1GAGQtRgBEiwKBm1hcmdpbhgCIAEoCzIcLnJl",
            "c2VydmVtb2R1bGUuUmVzZXJ2ZU1hcmdpbhIzCg1zdGFuZGJ5TWFyZ2luGAMg",
            "ASgLMhwucmVzZXJ2ZW1vZHVsZS5SZXNlcnZlTWFyZ2luIocDChVSZXNlcnZl",
            "UmVxdWVzdFByb2ZpbGUSQgoSY29udHJvbE1lc3NhZ2VJbmZvGAEgASgLMiAu",
            "Y29tbW9ubW9kdWxlLkNvbnRyb2xNZXNzYWdlSW5mb0IEgLUYARJRCh5yZXF1",
            "ZXN0ZXJDaXJjdWl0U2VnbWVudFNlcnZpY2UYAiABKAsyHy5jb21tb25tb2R1",
            "bGUuQXBwbGljYXRpb25TeXN0ZW1CCIi1GAGQtRgBEj8KDnJlc2VydmVSZXF1",
            "ZXN0GAMgASgLMh0ucmVzZXJ2ZW1vZHVsZS5SZXNlcnZlUmVxdWVzdEIIiLUY",
            "AZC1GAESUQoecmVzcG9uZGVyQ2lyY3VpdFNlZ21lbnRTZXJ2aWNlGAQgASgL",
            "Mh8uY29tbW9ubW9kdWxlLkFwcGxpY2F0aW9uU3lzdGVtQgiItRgBkLUYARI9",
            "Cgh0aWVQb2ludBgFIAEoCzIhLmNvbW1vbm1vZHVsZS5Db25kdWN0aW5nRXF1",
            "aXBtZW50QgiItRgBkLUYAToEwPMYAUKHAQoVb3BlbmZtYi5yZXNlcnZlbW9k",
            "dWxlUAFaVGdpdGxhYi5jb20vb3BlbmZtYi9wc20vb3BzL3Byb3RvYnVmL2dv",
            "LW9wZW5mbWItb3BzLXByb3RvYnVmL3YyL29wZW5mbWIvcmVzZXJ2ZW1vZHVs",
            "ZaoCFW9wZW5mbWIucmVzZXJ2ZW1vZHVsZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::openfmb.UmlReflection.Descriptor, global::openfmb.commonmodule.CommonmoduleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.ReserveMargin), global::openfmb.reservemodule.ReserveMargin.Parser, new[]{ "LogicalNode", "A", "VA", "VAr", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.ReserveAvailability), global::openfmb.reservemodule.ReserveAvailability.Parser, new[]{ "IncrementalMargin", "Margin", "StandbyMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.AllocatedMargin), global::openfmb.reservemodule.AllocatedMargin.Parser, new[]{ "RequestID", "AllocatedMargin_", "AllocatedStandbyMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.ReserveAvailabilityProfile), global::openfmb.reservemodule.ReserveAvailabilityProfile.Parser, new[]{ "ControlMessageInfo", "AllocatedMargin", "RequesterCircuitSegmentService", "ReserveAvailability", "ResponderCircuitSegmentService", "TiePoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.ReserveRequest), global::openfmb.reservemodule.ReserveRequest.Parser, new[]{ "RequestID", "Margin", "StandbyMargin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.reservemodule.ReserveRequestProfile), global::openfmb.reservemodule.ReserveRequestProfile.Parser, new[]{ "ControlMessageInfo", "RequesterCircuitSegmentService", "ReserveRequest", "ResponderCircuitSegmentService", "TiePoint" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// [OpenFMB LN extension] Reserve margin in A, W, VAr and VA.
  /// </summary>
  public sealed partial class ReserveMargin : pb::IMessage<ReserveMargin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReserveMargin> _parser = new pb::MessageParser<ReserveMargin>(() => new ReserveMargin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveMargin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveMargin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveMargin(ReserveMargin other) : this() {
      logicalNode_ = other.logicalNode_ != null ? other.logicalNode_.Clone() : null;
      a_ = other.a_ != null ? other.a_.Clone() : null;
      vA_ = other.vA_ != null ? other.vA_.Clone() : null;
      vAr_ = other.vAr_ != null ? other.vAr_.Clone() : null;
      w_ = other.w_ != null ? other.w_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveMargin Clone() {
      return new ReserveMargin(this);
    }

    /// <summary>Field number for the "logicalNode" field.</summary>
    public const int LogicalNodeFieldNumber = 1;
    private global::openfmb.commonmodule.LogicalNode logicalNode_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.LogicalNode LogicalNode {
      get { return logicalNode_; }
      set {
        logicalNode_ = value;
      }
    }

    /// <summary>Field number for the "A" field.</summary>
    public const int AFieldNumber = 2;
    private global::openfmb.commonmodule.PMG a_;
    /// <summary>
    /// Phase to ground/phase to neutral three phase currents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PMG A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    /// <summary>Field number for the "VA" field.</summary>
    public const int VAFieldNumber = 3;
    private global::openfmb.commonmodule.PMG vA_;
    /// <summary>
    /// Phase to ground/phase to neutral apparent powers S.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PMG VA {
      get { return vA_; }
      set {
        vA_ = value;
      }
    }

    /// <summary>Field number for the "VAr" field.</summary>
    public const int VArFieldNumber = 4;
    private global::openfmb.commonmodule.PMG vAr_;
    /// <summary>
    /// Phase to ground/phase to neutral reactive powers Q.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PMG VAr {
      get { return vAr_; }
      set {
        vAr_ = value;
      }
    }

    /// <summary>Field number for the "W" field.</summary>
    public const int WFieldNumber = 5;
    private global::openfmb.commonmodule.PMG w_;
    /// <summary>
    /// Phase to ground/phase to neutral real powers P.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PMG W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveMargin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveMargin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogicalNode, other.LogicalNode)) return false;
      if (!object.Equals(A, other.A)) return false;
      if (!object.Equals(VA, other.VA)) return false;
      if (!object.Equals(VAr, other.VAr)) return false;
      if (!object.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logicalNode_ != null) hash ^= LogicalNode.GetHashCode();
      if (a_ != null) hash ^= A.GetHashCode();
      if (vA_ != null) hash ^= VA.GetHashCode();
      if (vAr_ != null) hash ^= VAr.GetHashCode();
      if (w_ != null) hash ^= W.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (logicalNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNode);
      }
      if (a_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(A);
      }
      if (vA_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(VA);
      }
      if (vAr_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VAr);
      }
      if (w_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (logicalNode_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNode);
      }
      if (a_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(A);
      }
      if (vA_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(VA);
      }
      if (vAr_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(VAr);
      }
      if (w_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logicalNode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalNode);
      }
      if (a_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(A);
      }
      if (vA_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VA);
      }
      if (vAr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VAr);
      }
      if (w_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(W);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveMargin other) {
      if (other == null) {
        return;
      }
      if (other.logicalNode_ != null) {
        if (logicalNode_ == null) {
          LogicalNode = new global::openfmb.commonmodule.LogicalNode();
        }
        LogicalNode.MergeFrom(other.LogicalNode);
      }
      if (other.a_ != null) {
        if (a_ == null) {
          A = new global::openfmb.commonmodule.PMG();
        }
        A.MergeFrom(other.A);
      }
      if (other.vA_ != null) {
        if (vA_ == null) {
          VA = new global::openfmb.commonmodule.PMG();
        }
        VA.MergeFrom(other.VA);
      }
      if (other.vAr_ != null) {
        if (vAr_ == null) {
          VAr = new global::openfmb.commonmodule.PMG();
        }
        VAr.MergeFrom(other.VAr);
      }
      if (other.w_ != null) {
        if (w_ == null) {
          W = new global::openfmb.commonmodule.PMG();
        }
        W.MergeFrom(other.W);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logicalNode_ == null) {
              LogicalNode = new global::openfmb.commonmodule.LogicalNode();
            }
            input.ReadMessage(LogicalNode);
            break;
          }
          case 18: {
            if (a_ == null) {
              A = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(A);
            break;
          }
          case 26: {
            if (vA_ == null) {
              VA = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(VA);
            break;
          }
          case 34: {
            if (vAr_ == null) {
              VAr = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(VAr);
            break;
          }
          case 42: {
            if (w_ == null) {
              W = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(W);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (logicalNode_ == null) {
              LogicalNode = new global::openfmb.commonmodule.LogicalNode();
            }
            input.ReadMessage(LogicalNode);
            break;
          }
          case 18: {
            if (a_ == null) {
              A = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(A);
            break;
          }
          case 26: {
            if (vA_ == null) {
              VA = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(VA);
            break;
          }
          case 34: {
            if (vAr_ == null) {
              VAr = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(VAr);
            break;
          }
          case 42: {
            if (w_ == null) {
              W = new global::openfmb.commonmodule.PMG();
            }
            input.ReadMessage(W);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MISSING DOCUMENTATION!!!
  /// </summary>
  public sealed partial class ReserveAvailability : pb::IMessage<ReserveAvailability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReserveAvailability> _parser = new pb::MessageParser<ReserveAvailability>(() => new ReserveAvailability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveAvailability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailability(ReserveAvailability other) : this() {
      incrementalMargin_ = other.incrementalMargin_ != null ? other.incrementalMargin_.Clone() : null;
      margin_ = other.margin_ != null ? other.margin_.Clone() : null;
      standbyMargin_ = other.standbyMargin_ != null ? other.standbyMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailability Clone() {
      return new ReserveAvailability(this);
    }

    /// <summary>Field number for the "incrementalMargin" field.</summary>
    public const int IncrementalMarginFieldNumber = 1;
    private global::openfmb.reservemodule.ReserveMargin incrementalMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin IncrementalMargin {
      get { return incrementalMargin_; }
      set {
        incrementalMargin_ = value;
      }
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 2;
    private global::openfmb.reservemodule.ReserveMargin margin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "standbyMargin" field.</summary>
    public const int StandbyMarginFieldNumber = 3;
    private global::openfmb.reservemodule.ReserveMargin standbyMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin StandbyMargin {
      get { return standbyMargin_; }
      set {
        standbyMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveAvailability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveAvailability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(IncrementalMargin, other.IncrementalMargin)) return false;
      if (!object.Equals(Margin, other.Margin)) return false;
      if (!object.Equals(StandbyMargin, other.StandbyMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (incrementalMargin_ != null) hash ^= IncrementalMargin.GetHashCode();
      if (margin_ != null) hash ^= Margin.GetHashCode();
      if (standbyMargin_ != null) hash ^= StandbyMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (incrementalMargin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IncrementalMargin);
      }
      if (margin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Margin);
      }
      if (standbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (incrementalMargin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(IncrementalMargin);
      }
      if (margin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Margin);
      }
      if (standbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (incrementalMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IncrementalMargin);
      }
      if (margin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Margin);
      }
      if (standbyMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandbyMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveAvailability other) {
      if (other == null) {
        return;
      }
      if (other.incrementalMargin_ != null) {
        if (incrementalMargin_ == null) {
          IncrementalMargin = new global::openfmb.reservemodule.ReserveMargin();
        }
        IncrementalMargin.MergeFrom(other.IncrementalMargin);
      }
      if (other.margin_ != null) {
        if (margin_ == null) {
          Margin = new global::openfmb.reservemodule.ReserveMargin();
        }
        Margin.MergeFrom(other.Margin);
      }
      if (other.standbyMargin_ != null) {
        if (standbyMargin_ == null) {
          StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
        }
        StandbyMargin.MergeFrom(other.StandbyMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (incrementalMargin_ == null) {
              IncrementalMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(IncrementalMargin);
            break;
          }
          case 18: {
            if (margin_ == null) {
              Margin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 26: {
            if (standbyMargin_ == null) {
              StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(StandbyMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (incrementalMargin_ == null) {
              IncrementalMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(IncrementalMargin);
            break;
          }
          case 18: {
            if (margin_ == null) {
              Margin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 26: {
            if (standbyMargin_ == null) {
              StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(StandbyMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MISSING DOCUMENTATION!!!
  /// </summary>
  public sealed partial class AllocatedMargin : pb::IMessage<AllocatedMargin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllocatedMargin> _parser = new pb::MessageParser<AllocatedMargin>(() => new AllocatedMargin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocatedMargin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedMargin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedMargin(AllocatedMargin other) : this() {
      requestID_ = other.requestID_;
      allocatedMargin_ = other.allocatedMargin_ != null ? other.allocatedMargin_.Clone() : null;
      allocatedStandbyMargin_ = other.allocatedStandbyMargin_ != null ? other.allocatedStandbyMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocatedMargin Clone() {
      return new AllocatedMargin(this);
    }

    /// <summary>Field number for the "requestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private string requestID_ = "";
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestID {
      get { return requestID_; }
      set {
        requestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allocatedMargin" field.</summary>
    public const int AllocatedMargin_FieldNumber = 2;
    private global::openfmb.reservemodule.ReserveMargin allocatedMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin AllocatedMargin_ {
      get { return allocatedMargin_; }
      set {
        allocatedMargin_ = value;
      }
    }

    /// <summary>Field number for the "allocatedStandbyMargin" field.</summary>
    public const int AllocatedStandbyMarginFieldNumber = 3;
    private global::openfmb.reservemodule.ReserveMargin allocatedStandbyMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin AllocatedStandbyMargin {
      get { return allocatedStandbyMargin_; }
      set {
        allocatedStandbyMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocatedMargin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocatedMargin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!object.Equals(AllocatedMargin_, other.AllocatedMargin_)) return false;
      if (!object.Equals(AllocatedStandbyMargin, other.AllocatedStandbyMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID.Length != 0) hash ^= RequestID.GetHashCode();
      if (allocatedMargin_ != null) hash ^= AllocatedMargin_.GetHashCode();
      if (allocatedStandbyMargin_ != null) hash ^= AllocatedStandbyMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestID);
      }
      if (allocatedMargin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AllocatedMargin_);
      }
      if (allocatedStandbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AllocatedStandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestID);
      }
      if (allocatedMargin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AllocatedMargin_);
      }
      if (allocatedStandbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AllocatedStandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestID);
      }
      if (allocatedMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocatedMargin_);
      }
      if (allocatedStandbyMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocatedStandbyMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocatedMargin other) {
      if (other == null) {
        return;
      }
      if (other.RequestID.Length != 0) {
        RequestID = other.RequestID;
      }
      if (other.allocatedMargin_ != null) {
        if (allocatedMargin_ == null) {
          AllocatedMargin_ = new global::openfmb.reservemodule.ReserveMargin();
        }
        AllocatedMargin_.MergeFrom(other.AllocatedMargin_);
      }
      if (other.allocatedStandbyMargin_ != null) {
        if (allocatedStandbyMargin_ == null) {
          AllocatedStandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
        }
        AllocatedStandbyMargin.MergeFrom(other.AllocatedStandbyMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestID = input.ReadString();
            break;
          }
          case 18: {
            if (allocatedMargin_ == null) {
              AllocatedMargin_ = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(AllocatedMargin_);
            break;
          }
          case 26: {
            if (allocatedStandbyMargin_ == null) {
              AllocatedStandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(AllocatedStandbyMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RequestID = input.ReadString();
            break;
          }
          case 18: {
            if (allocatedMargin_ == null) {
              AllocatedMargin_ = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(AllocatedMargin_);
            break;
          }
          case 26: {
            if (allocatedStandbyMargin_ == null) {
              AllocatedStandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(AllocatedStandbyMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Reserve availability profile
  /// </summary>
  public sealed partial class ReserveAvailabilityProfile : pb::IMessage<ReserveAvailabilityProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReserveAvailabilityProfile> _parser = new pb::MessageParser<ReserveAvailabilityProfile>(() => new ReserveAvailabilityProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveAvailabilityProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailabilityProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailabilityProfile(ReserveAvailabilityProfile other) : this() {
      controlMessageInfo_ = other.controlMessageInfo_ != null ? other.controlMessageInfo_.Clone() : null;
      allocatedMargin_ = other.allocatedMargin_ != null ? other.allocatedMargin_.Clone() : null;
      requesterCircuitSegmentService_ = other.requesterCircuitSegmentService_ != null ? other.requesterCircuitSegmentService_.Clone() : null;
      reserveAvailability_ = other.reserveAvailability_ != null ? other.reserveAvailability_.Clone() : null;
      responderCircuitSegmentService_ = other.responderCircuitSegmentService_ != null ? other.responderCircuitSegmentService_.Clone() : null;
      tiePoint_ = other.tiePoint_ != null ? other.tiePoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveAvailabilityProfile Clone() {
      return new ReserveAvailabilityProfile(this);
    }

    /// <summary>Field number for the "controlMessageInfo" field.</summary>
    public const int ControlMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ControlMessageInfo controlMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlMessageInfo ControlMessageInfo {
      get { return controlMessageInfo_; }
      set {
        controlMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "allocatedMargin" field.</summary>
    public const int AllocatedMarginFieldNumber = 2;
    private global::openfmb.reservemodule.AllocatedMargin allocatedMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.AllocatedMargin AllocatedMargin {
      get { return allocatedMargin_; }
      set {
        allocatedMargin_ = value;
      }
    }

    /// <summary>Field number for the "requesterCircuitSegmentService" field.</summary>
    public const int RequesterCircuitSegmentServiceFieldNumber = 3;
    private global::openfmb.commonmodule.ApplicationSystem requesterCircuitSegmentService_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ApplicationSystem RequesterCircuitSegmentService {
      get { return requesterCircuitSegmentService_; }
      set {
        requesterCircuitSegmentService_ = value;
      }
    }

    /// <summary>Field number for the "reserveAvailability" field.</summary>
    public const int ReserveAvailabilityFieldNumber = 4;
    private global::openfmb.reservemodule.ReserveAvailability reserveAvailability_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveAvailability ReserveAvailability {
      get { return reserveAvailability_; }
      set {
        reserveAvailability_ = value;
      }
    }

    /// <summary>Field number for the "responderCircuitSegmentService" field.</summary>
    public const int ResponderCircuitSegmentServiceFieldNumber = 5;
    private global::openfmb.commonmodule.ApplicationSystem responderCircuitSegmentService_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ApplicationSystem ResponderCircuitSegmentService {
      get { return responderCircuitSegmentService_; }
      set {
        responderCircuitSegmentService_ = value;
      }
    }

    /// <summary>Field number for the "tiePoint" field.</summary>
    public const int TiePointFieldNumber = 6;
    private global::openfmb.commonmodule.ConductingEquipment tiePoint_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ConductingEquipment TiePoint {
      get { return tiePoint_; }
      set {
        tiePoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveAvailabilityProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveAvailabilityProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlMessageInfo, other.ControlMessageInfo)) return false;
      if (!object.Equals(AllocatedMargin, other.AllocatedMargin)) return false;
      if (!object.Equals(RequesterCircuitSegmentService, other.RequesterCircuitSegmentService)) return false;
      if (!object.Equals(ReserveAvailability, other.ReserveAvailability)) return false;
      if (!object.Equals(ResponderCircuitSegmentService, other.ResponderCircuitSegmentService)) return false;
      if (!object.Equals(TiePoint, other.TiePoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlMessageInfo_ != null) hash ^= ControlMessageInfo.GetHashCode();
      if (allocatedMargin_ != null) hash ^= AllocatedMargin.GetHashCode();
      if (requesterCircuitSegmentService_ != null) hash ^= RequesterCircuitSegmentService.GetHashCode();
      if (reserveAvailability_ != null) hash ^= ReserveAvailability.GetHashCode();
      if (responderCircuitSegmentService_ != null) hash ^= ResponderCircuitSegmentService.GetHashCode();
      if (tiePoint_ != null) hash ^= TiePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (allocatedMargin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AllocatedMargin);
      }
      if (requesterCircuitSegmentService_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RequesterCircuitSegmentService);
      }
      if (reserveAvailability_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReserveAvailability);
      }
      if (responderCircuitSegmentService_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TiePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (allocatedMargin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AllocatedMargin);
      }
      if (requesterCircuitSegmentService_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RequesterCircuitSegmentService);
      }
      if (reserveAvailability_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReserveAvailability);
      }
      if (responderCircuitSegmentService_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TiePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlMessageInfo);
      }
      if (allocatedMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocatedMargin);
      }
      if (requesterCircuitSegmentService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequesterCircuitSegmentService);
      }
      if (reserveAvailability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReserveAvailability);
      }
      if (responderCircuitSegmentService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TiePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveAvailabilityProfile other) {
      if (other == null) {
        return;
      }
      if (other.controlMessageInfo_ != null) {
        if (controlMessageInfo_ == null) {
          ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
        }
        ControlMessageInfo.MergeFrom(other.ControlMessageInfo);
      }
      if (other.allocatedMargin_ != null) {
        if (allocatedMargin_ == null) {
          AllocatedMargin = new global::openfmb.reservemodule.AllocatedMargin();
        }
        AllocatedMargin.MergeFrom(other.AllocatedMargin);
      }
      if (other.requesterCircuitSegmentService_ != null) {
        if (requesterCircuitSegmentService_ == null) {
          RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
        }
        RequesterCircuitSegmentService.MergeFrom(other.RequesterCircuitSegmentService);
      }
      if (other.reserveAvailability_ != null) {
        if (reserveAvailability_ == null) {
          ReserveAvailability = new global::openfmb.reservemodule.ReserveAvailability();
        }
        ReserveAvailability.MergeFrom(other.ReserveAvailability);
      }
      if (other.responderCircuitSegmentService_ != null) {
        if (responderCircuitSegmentService_ == null) {
          ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
        }
        ResponderCircuitSegmentService.MergeFrom(other.ResponderCircuitSegmentService);
      }
      if (other.tiePoint_ != null) {
        if (tiePoint_ == null) {
          TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
        }
        TiePoint.MergeFrom(other.TiePoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (allocatedMargin_ == null) {
              AllocatedMargin = new global::openfmb.reservemodule.AllocatedMargin();
            }
            input.ReadMessage(AllocatedMargin);
            break;
          }
          case 26: {
            if (requesterCircuitSegmentService_ == null) {
              RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(RequesterCircuitSegmentService);
            break;
          }
          case 34: {
            if (reserveAvailability_ == null) {
              ReserveAvailability = new global::openfmb.reservemodule.ReserveAvailability();
            }
            input.ReadMessage(ReserveAvailability);
            break;
          }
          case 42: {
            if (responderCircuitSegmentService_ == null) {
              ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(ResponderCircuitSegmentService);
            break;
          }
          case 50: {
            if (tiePoint_ == null) {
              TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(TiePoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (allocatedMargin_ == null) {
              AllocatedMargin = new global::openfmb.reservemodule.AllocatedMargin();
            }
            input.ReadMessage(AllocatedMargin);
            break;
          }
          case 26: {
            if (requesterCircuitSegmentService_ == null) {
              RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(RequesterCircuitSegmentService);
            break;
          }
          case 34: {
            if (reserveAvailability_ == null) {
              ReserveAvailability = new global::openfmb.reservemodule.ReserveAvailability();
            }
            input.ReadMessage(ReserveAvailability);
            break;
          }
          case 42: {
            if (responderCircuitSegmentService_ == null) {
              ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(ResponderCircuitSegmentService);
            break;
          }
          case 50: {
            if (tiePoint_ == null) {
              TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(TiePoint);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MISSING DOCUMENTATION!!!
  /// </summary>
  public sealed partial class ReserveRequest : pb::IMessage<ReserveRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReserveRequest> _parser = new pb::MessageParser<ReserveRequest>(() => new ReserveRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequest(ReserveRequest other) : this() {
      requestID_ = other.requestID_;
      margin_ = other.margin_ != null ? other.margin_.Clone() : null;
      standbyMargin_ = other.standbyMargin_ != null ? other.standbyMargin_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequest Clone() {
      return new ReserveRequest(this);
    }

    /// <summary>Field number for the "requestID" field.</summary>
    public const int RequestIDFieldNumber = 1;
    private string requestID_ = "";
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RequestID {
      get { return requestID_; }
      set {
        requestID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 2;
    private global::openfmb.reservemodule.ReserveMargin margin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "standbyMargin" field.</summary>
    public const int StandbyMarginFieldNumber = 3;
    private global::openfmb.reservemodule.ReserveMargin standbyMargin_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveMargin StandbyMargin {
      get { return standbyMargin_; }
      set {
        standbyMargin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestID != other.RequestID) return false;
      if (!object.Equals(Margin, other.Margin)) return false;
      if (!object.Equals(StandbyMargin, other.StandbyMargin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestID.Length != 0) hash ^= RequestID.GetHashCode();
      if (margin_ != null) hash ^= Margin.GetHashCode();
      if (standbyMargin_ != null) hash ^= StandbyMargin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RequestID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestID);
      }
      if (margin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Margin);
      }
      if (standbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RequestID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestID);
      }
      if (margin_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Margin);
      }
      if (standbyMargin_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StandbyMargin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestID);
      }
      if (margin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Margin);
      }
      if (standbyMargin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandbyMargin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestID.Length != 0) {
        RequestID = other.RequestID;
      }
      if (other.margin_ != null) {
        if (margin_ == null) {
          Margin = new global::openfmb.reservemodule.ReserveMargin();
        }
        Margin.MergeFrom(other.Margin);
      }
      if (other.standbyMargin_ != null) {
        if (standbyMargin_ == null) {
          StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
        }
        StandbyMargin.MergeFrom(other.StandbyMargin);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RequestID = input.ReadString();
            break;
          }
          case 18: {
            if (margin_ == null) {
              Margin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 26: {
            if (standbyMargin_ == null) {
              StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(StandbyMargin);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RequestID = input.ReadString();
            break;
          }
          case 18: {
            if (margin_ == null) {
              Margin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(Margin);
            break;
          }
          case 26: {
            if (standbyMargin_ == null) {
              StandbyMargin = new global::openfmb.reservemodule.ReserveMargin();
            }
            input.ReadMessage(StandbyMargin);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Reserve availability profile
  /// </summary>
  public sealed partial class ReserveRequestProfile : pb::IMessage<ReserveRequestProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReserveRequestProfile> _parser = new pb::MessageParser<ReserveRequestProfile>(() => new ReserveRequestProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReserveRequestProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.reservemodule.ReservemoduleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequestProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequestProfile(ReserveRequestProfile other) : this() {
      controlMessageInfo_ = other.controlMessageInfo_ != null ? other.controlMessageInfo_.Clone() : null;
      requesterCircuitSegmentService_ = other.requesterCircuitSegmentService_ != null ? other.requesterCircuitSegmentService_.Clone() : null;
      reserveRequest_ = other.reserveRequest_ != null ? other.reserveRequest_.Clone() : null;
      responderCircuitSegmentService_ = other.responderCircuitSegmentService_ != null ? other.responderCircuitSegmentService_.Clone() : null;
      tiePoint_ = other.tiePoint_ != null ? other.tiePoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReserveRequestProfile Clone() {
      return new ReserveRequestProfile(this);
    }

    /// <summary>Field number for the "controlMessageInfo" field.</summary>
    public const int ControlMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ControlMessageInfo controlMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlMessageInfo ControlMessageInfo {
      get { return controlMessageInfo_; }
      set {
        controlMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "requesterCircuitSegmentService" field.</summary>
    public const int RequesterCircuitSegmentServiceFieldNumber = 2;
    private global::openfmb.commonmodule.ApplicationSystem requesterCircuitSegmentService_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ApplicationSystem RequesterCircuitSegmentService {
      get { return requesterCircuitSegmentService_; }
      set {
        requesterCircuitSegmentService_ = value;
      }
    }

    /// <summary>Field number for the "reserveRequest" field.</summary>
    public const int ReserveRequestFieldNumber = 3;
    private global::openfmb.reservemodule.ReserveRequest reserveRequest_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.reservemodule.ReserveRequest ReserveRequest {
      get { return reserveRequest_; }
      set {
        reserveRequest_ = value;
      }
    }

    /// <summary>Field number for the "responderCircuitSegmentService" field.</summary>
    public const int ResponderCircuitSegmentServiceFieldNumber = 4;
    private global::openfmb.commonmodule.ApplicationSystem responderCircuitSegmentService_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ApplicationSystem ResponderCircuitSegmentService {
      get { return responderCircuitSegmentService_; }
      set {
        responderCircuitSegmentService_ = value;
      }
    }

    /// <summary>Field number for the "tiePoint" field.</summary>
    public const int TiePointFieldNumber = 5;
    private global::openfmb.commonmodule.ConductingEquipment tiePoint_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ConductingEquipment TiePoint {
      get { return tiePoint_; }
      set {
        tiePoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReserveRequestProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReserveRequestProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlMessageInfo, other.ControlMessageInfo)) return false;
      if (!object.Equals(RequesterCircuitSegmentService, other.RequesterCircuitSegmentService)) return false;
      if (!object.Equals(ReserveRequest, other.ReserveRequest)) return false;
      if (!object.Equals(ResponderCircuitSegmentService, other.ResponderCircuitSegmentService)) return false;
      if (!object.Equals(TiePoint, other.TiePoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlMessageInfo_ != null) hash ^= ControlMessageInfo.GetHashCode();
      if (requesterCircuitSegmentService_ != null) hash ^= RequesterCircuitSegmentService.GetHashCode();
      if (reserveRequest_ != null) hash ^= ReserveRequest.GetHashCode();
      if (responderCircuitSegmentService_ != null) hash ^= ResponderCircuitSegmentService.GetHashCode();
      if (tiePoint_ != null) hash ^= TiePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (requesterCircuitSegmentService_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RequesterCircuitSegmentService);
      }
      if (reserveRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReserveRequest);
      }
      if (responderCircuitSegmentService_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TiePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (requesterCircuitSegmentService_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RequesterCircuitSegmentService);
      }
      if (reserveRequest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReserveRequest);
      }
      if (responderCircuitSegmentService_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TiePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlMessageInfo);
      }
      if (requesterCircuitSegmentService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequesterCircuitSegmentService);
      }
      if (reserveRequest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReserveRequest);
      }
      if (responderCircuitSegmentService_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponderCircuitSegmentService);
      }
      if (tiePoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TiePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReserveRequestProfile other) {
      if (other == null) {
        return;
      }
      if (other.controlMessageInfo_ != null) {
        if (controlMessageInfo_ == null) {
          ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
        }
        ControlMessageInfo.MergeFrom(other.ControlMessageInfo);
      }
      if (other.requesterCircuitSegmentService_ != null) {
        if (requesterCircuitSegmentService_ == null) {
          RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
        }
        RequesterCircuitSegmentService.MergeFrom(other.RequesterCircuitSegmentService);
      }
      if (other.reserveRequest_ != null) {
        if (reserveRequest_ == null) {
          ReserveRequest = new global::openfmb.reservemodule.ReserveRequest();
        }
        ReserveRequest.MergeFrom(other.ReserveRequest);
      }
      if (other.responderCircuitSegmentService_ != null) {
        if (responderCircuitSegmentService_ == null) {
          ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
        }
        ResponderCircuitSegmentService.MergeFrom(other.ResponderCircuitSegmentService);
      }
      if (other.tiePoint_ != null) {
        if (tiePoint_ == null) {
          TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
        }
        TiePoint.MergeFrom(other.TiePoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (requesterCircuitSegmentService_ == null) {
              RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(RequesterCircuitSegmentService);
            break;
          }
          case 26: {
            if (reserveRequest_ == null) {
              ReserveRequest = new global::openfmb.reservemodule.ReserveRequest();
            }
            input.ReadMessage(ReserveRequest);
            break;
          }
          case 34: {
            if (responderCircuitSegmentService_ == null) {
              ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(ResponderCircuitSegmentService);
            break;
          }
          case 42: {
            if (tiePoint_ == null) {
              TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(TiePoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (requesterCircuitSegmentService_ == null) {
              RequesterCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(RequesterCircuitSegmentService);
            break;
          }
          case 26: {
            if (reserveRequest_ == null) {
              ReserveRequest = new global::openfmb.reservemodule.ReserveRequest();
            }
            input.ReadMessage(ReserveRequest);
            break;
          }
          case 34: {
            if (responderCircuitSegmentService_ == null) {
              ResponderCircuitSegmentService = new global::openfmb.commonmodule.ApplicationSystem();
            }
            input.ReadMessage(ResponderCircuitSegmentService);
            break;
          }
          case 42: {
            if (tiePoint_ == null) {
              TiePoint = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(TiePoint);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
