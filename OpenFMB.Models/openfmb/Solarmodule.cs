// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: solarmodule/solarmodule.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace openfmb.solarmodule {

  /// <summary>Holder for reflection information generated from solarmodule/solarmodule.proto</summary>
  public static partial class SolarmoduleReflection {

    #region Descriptor
    /// <summary>File descriptor for solarmodule/solarmodule.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SolarmoduleReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1zb2xhcm1vZHVsZS9zb2xhcm1vZHVsZS5wcm90bxILc29sYXJtb2R1bGUa",
            "CXVtbC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh9j",
            "b21tb25tb2R1bGUvY29tbW9ubW9kdWxlLnByb3RvItIECgpTb2xhclBvaW50",
            "EjoKGGZyZXF1ZW5jeVNldFBvaW50RW5hYmxlZBgBIAEoCzIYLmNvbW1vbm1v",
            "ZHVsZS5Db250cm9sU1BDEjMKBG1vZGUYAiABKAsyJS5jb21tb25tb2R1bGUu",
            "RU5HX0dyaWRDb25uZWN0TW9kZUtpbmQSLwoKcGN0SHpEcm9vcBgDIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEi4KCXBjdFZEcm9vcBgEIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5GbG9hdFZhbHVlEikKCXJhbXBSYXRlcxgF",
            "IAEoCzIWLmNvbW1vbm1vZHVsZS5SYW1wUmF0ZRI8ChpyZWFjdGl2ZVB3clNl",
            "dFBvaW50RW5hYmxlZBgGIAEoCzIYLmNvbW1vbm1vZHVsZS5Db250cm9sU1BD",
            "EjgKFnJlYWxQd3JTZXRQb2ludEVuYWJsZWQYByABKAsyGC5jb21tb25tb2R1",
            "bGUuQ29udHJvbFNQQxInCgVyZXNldBgIIAEoCzIYLmNvbW1vbm1vZHVsZS5D",
            "b250cm9sU1BDEi8KBXN0YXRlGAkgASgLMiAuY29tbW9ubW9kdWxlLk9wdGlv",
            "bmFsX1N0YXRlS2luZBI4ChZ2b2x0YWdlU2V0UG9pbnRFbmFibGVkGAogASgL",
            "MhguY29tbW9ubW9kdWxlLkNvbnRyb2xTUEMSOwoJc3RhcnRUaW1lGAsgASgL",
            "Mh4uY29tbW9ubW9kdWxlLkNvbnRyb2xUaW1lc3RhbXBCCIi1GAGQtRgBIj0K",
            "CFNvbGFyQ1NHEjEKBmNydlB0cxgBIAMoCzIXLnNvbGFybW9kdWxlLlNvbGFy",
            "UG9pbnRCCIi1GAGQtRgBIkwKGFNvbGFyQ29udHJvbFNjaGVkdWxlRlNDSBIw",
            "CgdWYWxEQ1NHGAEgASgLMhUuc29sYXJtb2R1bGUuU29sYXJDU0dCCIi1GAGQ",
            "tRgBIpEBChBTb2xhckNvbnRyb2xGU0NDEjQKC2NvbnRyb2xGU0NDGAEgASgL",
            "MhkuY29tbW9ubW9kdWxlLkNvbnRyb2xGU0NDQgSAtRgBEkcKGFNvbGFyQ29u",
            "dHJvbFNjaGVkdWxlRlNDSBgCIAEoCzIlLnNvbGFybW9kdWxlLlNvbGFyQ29u",
            "dHJvbFNjaGVkdWxlRlNDSCKtAQoMU29sYXJDb250cm9sEjYKDGNvbnRyb2xW",
            "YWx1ZRgBIAEoCzIaLmNvbW1vbm1vZHVsZS5Db250cm9sVmFsdWVCBIC1GAES",
            "LAoFY2hlY2sYAiABKAsyHS5jb21tb25tb2R1bGUuQ2hlY2tDb25kaXRpb25z",
            "EjcKEHNvbGFyQ29udHJvbEZTQ0MYAyABKAsyHS5zb2xhcm1vZHVsZS5Tb2xh",
            "ckNvbnRyb2xGU0NDIlUKDVNvbGFySW52ZXJ0ZXISRAoTY29uZHVjdGluZ0Vx",
            "dWlwbWVudBgBIAEoCzIhLmNvbW1vbm1vZHVsZS5Db25kdWN0aW5nRXF1aXBt",
            "ZW50QgSAtRgBItcBChNTb2xhckNvbnRyb2xQcm9maWxlEkIKEmNvbnRyb2xN",
            "ZXNzYWdlSW5mbxgBIAEoCzIgLmNvbW1vbm1vZHVsZS5Db250cm9sTWVzc2Fn",
            "ZUluZm9CBIC1GAESOQoMc29sYXJDb250cm9sGAIgASgLMhkuc29sYXJtb2R1",
            "bGUuU29sYXJDb250cm9sQgiItRgBkLUYARI7Cg1zb2xhckludmVydGVyGAMg",
            "ASgLMhouc29sYXJtb2R1bGUuU29sYXJJbnZlcnRlckIIiLUYAZC1GAE6BMDz",
            "GAEi7gMKEFNvbGFyUG9pbnRTdGF0dXMSOQoYZnJlcXVlbmN5U2V0UG9pbnRF",
            "bmFibGVkGAEgASgLMhcuY29tbW9ubW9kdWxlLlN0YXR1c1NQUxIzCgRtb2Rl",
            "GAIgASgLMiUuY29tbW9ubW9kdWxlLkVOR19HcmlkQ29ubmVjdE1vZGVLaW5k",
            "Ei8KCnBjdEh6RHJvb3AYAyABKAsyGy5nb29nbGUucHJvdG9idWYuRmxvYXRW",
            "YWx1ZRIuCglwY3RWRHJvb3AYBCABKAsyGy5nb29nbGUucHJvdG9idWYuRmxv",
            "YXRWYWx1ZRIpCglyYW1wUmF0ZXMYBSABKAsyFi5jb21tb25tb2R1bGUuUmFt",
            "cFJhdGUSOwoacmVhY3RpdmVQd3JTZXRQb2ludEVuYWJsZWQYBiABKAsyFy5j",
            "b21tb25tb2R1bGUuU3RhdHVzU1BTEjcKFnJlYWxQd3JTZXRQb2ludEVuYWJs",
            "ZWQYByABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVzU1BTEi8KBXN0YXRlGAgg",
            "ASgLMiAuY29tbW9ubW9kdWxlLk9wdGlvbmFsX1N0YXRlS2luZBI3ChZ2b2x0",
            "YWdlU2V0UG9pbnRFbmFibGVkGAkgASgLMhcuY29tbW9ubW9kdWxlLlN0YXR1",
            "c1NQUyKyAgoXU29sYXJFdmVudEFuZFN0YXR1c1pHRU4SVgocbG9naWNhbE5v",
            "ZGVGb3JFdmVudEFuZFN0YXR1cxgBIAEoCzIqLmNvbW1vbm1vZHVsZS5Mb2dp",
            "Y2FsTm9kZUZvckV2ZW50QW5kU3RhdHVzQgSAtRgBEikKCEF1eFB3clN0GAIg",
            "ASgLMhcuY29tbW9ubW9kdWxlLlN0YXR1c1NQUxI2CgtEeW5hbWljVGVzdBgD",
            "IAEoCzIhLmNvbW1vbm1vZHVsZS5FTlNfRHluYW1pY1Rlc3RLaW5kEigKB0Vt",
            "Z1N0b3AYBCABKAsyFy5jb21tb25tb2R1bGUuU3RhdHVzU1BTEjIKC1BvaW50",
            "U3RhdHVzGAUgASgLMh0uc29sYXJtb2R1bGUuU29sYXJQb2ludFN0YXR1cyKU",
            "AQoOU29sYXJFdmVudFpHRU4SSwoXc29sYXJFdmVudEFuZFN0YXR1c1pHRU4Y",
            "ASABKAsyJC5zb2xhcm1vZHVsZS5Tb2xhckV2ZW50QW5kU3RhdHVzWkdFTkIE",
            "gLUYARI1CgZHcmlNb2QYAiABKAsyJS5jb21tb25tb2R1bGUuRU5HX0dyaWRD",
            "b25uZWN0TW9kZUtpbmQidQoKU29sYXJFdmVudBIyCgpldmVudFZhbHVlGAEg",
            "ASgLMhguY29tbW9ubW9kdWxlLkV2ZW50VmFsdWVCBIC1GAESMwoOc29sYXJF",
            "dmVudFpHRU4YAiABKAsyGy5zb2xhcm1vZHVsZS5Tb2xhckV2ZW50WkdFTiLN",
            "AQoRU29sYXJFdmVudFByb2ZpbGUSPgoQZXZlbnRNZXNzYWdlSW5mbxgBIAEo",
            "CzIeLmNvbW1vbm1vZHVsZS5FdmVudE1lc3NhZ2VJbmZvQgSAtRgBEjUKCnNv",
            "bGFyRXZlbnQYAiABKAsyFy5zb2xhcm1vZHVsZS5Tb2xhckV2ZW50QgiItRgB",
            "kLUYARI7Cg1zb2xhckludmVydGVyGAMgASgLMhouc29sYXJtb2R1bGUuU29s",
            "YXJJbnZlcnRlckIIiLUYAZC1GAE6BMDzGAEi/gEKDFNvbGFyUmVhZGluZxJi",
            "CiJjb25kdWN0aW5nRXF1aXBtZW50VGVybWluYWxSZWFkaW5nGAEgASgLMjAu",
            "Y29tbW9ubW9kdWxlLkNvbmR1Y3RpbmdFcXVpcG1lbnRUZXJtaW5hbFJlYWRp",
            "bmdCBIC1GAESKgoJcGhhc2VNTVROGAIgASgLMhcuY29tbW9ubW9kdWxlLlBo",
            "YXNlTU1UThIuCgtyZWFkaW5nTU1UUhgDIAEoCzIZLmNvbW1vbm1vZHVsZS5S",
            "ZWFkaW5nTU1UUhIuCgtyZWFkaW5nTU1YVRgEIAEoCzIZLmNvbW1vbm1vZHVs",
            "ZS5SZWFkaW5nTU1YVSLXAQoTU29sYXJSZWFkaW5nUHJvZmlsZRJCChJyZWFk",
            "aW5nTWVzc2FnZUluZm8YASABKAsyIC5jb21tb25tb2R1bGUuUmVhZGluZ01l",
            "c3NhZ2VJbmZvQgSAtRgBEjsKDXNvbGFySW52ZXJ0ZXIYAiABKAsyGi5zb2xh",
            "cm1vZHVsZS5Tb2xhckludmVydGVyQgiItRgBkLUYARI5Cgxzb2xhclJlYWRp",
            "bmcYAyABKAsyGS5zb2xhcm1vZHVsZS5Tb2xhclJlYWRpbmdCCIi1GAGQtRgB",
            "OgTA8xgBIpUBCg9Tb2xhclN0YXR1c1pHRU4SSwoXc29sYXJFdmVudEFuZFN0",
            "YXR1c1pHRU4YASABKAsyJC5zb2xhcm1vZHVsZS5Tb2xhckV2ZW50QW5kU3Rh",
            "dHVzWkdFTkIEgLUYARI1CgZHcmlNb2QYAiABKAsyJS5jb21tb25tb2R1bGUu",
            "RU5HX0dyaWRDb25uZWN0TW9kZUtpbmQiegoLU29sYXJTdGF0dXMSNAoLc3Rh",
            "dHVzVmFsdWUYASABKAsyGS5jb21tb25tb2R1bGUuU3RhdHVzVmFsdWVCBIC1",
            "GAESNQoPc29sYXJTdGF0dXNaR0VOGAIgASgLMhwuc29sYXJtb2R1bGUuU29s",
            "YXJTdGF0dXNaR0VOItIBChJTb2xhclN0YXR1c1Byb2ZpbGUSQAoRc3RhdHVz",
            "TWVzc2FnZUluZm8YASABKAsyHy5jb21tb25tb2R1bGUuU3RhdHVzTWVzc2Fn",
            "ZUluZm9CBIC1GAESOwoNc29sYXJJbnZlcnRlchgCIAEoCzIaLnNvbGFybW9k",
            "dWxlLlNvbGFySW52ZXJ0ZXJCCIi1GAGQtRgBEjcKC3NvbGFyU3RhdHVzGAMg",
            "ASgLMhguc29sYXJtb2R1bGUuU29sYXJTdGF0dXNCCIi1GAGQtRgBOgTA8xgB",
            "QoEBChNvcGVuZm1iLnNvbGFybW9kdWxlUAFaUmdpdGxhYi5jb20vb3BlbmZt",
            "Yi9wc20vb3BzL3Byb3RvYnVmL2dvLW9wZW5mbWItb3BzLXByb3RvYnVmL3Yy",
            "L29wZW5mbWIvc29sYXJtb2R1bGWqAhNvcGVuZm1iLnNvbGFybW9kdWxlYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::openfmb.UmlReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::openfmb.commonmodule.CommonmoduleReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarPoint), global::openfmb.solarmodule.SolarPoint.Parser, new[]{ "FrequencySetPointEnabled", "Mode", "PctHzDroop", "PctVDroop", "RampRates", "ReactivePwrSetPointEnabled", "RealPwrSetPointEnabled", "Reset", "State", "VoltageSetPointEnabled", "StartTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarCSG), global::openfmb.solarmodule.SolarCSG.Parser, new[]{ "CrvPts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarControlScheduleFSCH), global::openfmb.solarmodule.SolarControlScheduleFSCH.Parser, new[]{ "ValDCSG" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarControlFSCC), global::openfmb.solarmodule.SolarControlFSCC.Parser, new[]{ "ControlFSCC", "SolarControlScheduleFSCH" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarControl), global::openfmb.solarmodule.SolarControl.Parser, new[]{ "ControlValue", "Check", "SolarControlFSCC" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarInverter), global::openfmb.solarmodule.SolarInverter.Parser, new[]{ "ConductingEquipment" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarControlProfile), global::openfmb.solarmodule.SolarControlProfile.Parser, new[]{ "ControlMessageInfo", "SolarControl", "SolarInverter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarPointStatus), global::openfmb.solarmodule.SolarPointStatus.Parser, new[]{ "FrequencySetPointEnabled", "Mode", "PctHzDroop", "PctVDroop", "RampRates", "ReactivePwrSetPointEnabled", "RealPwrSetPointEnabled", "State", "VoltageSetPointEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarEventAndStatusZGEN), global::openfmb.solarmodule.SolarEventAndStatusZGEN.Parser, new[]{ "LogicalNodeForEventAndStatus", "AuxPwrSt", "DynamicTest", "EmgStop", "PointStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarEventZGEN), global::openfmb.solarmodule.SolarEventZGEN.Parser, new[]{ "SolarEventAndStatusZGEN", "GriMod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarEvent), global::openfmb.solarmodule.SolarEvent.Parser, new[]{ "EventValue", "SolarEventZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarEventProfile), global::openfmb.solarmodule.SolarEventProfile.Parser, new[]{ "EventMessageInfo", "SolarEvent", "SolarInverter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarReading), global::openfmb.solarmodule.SolarReading.Parser, new[]{ "ConductingEquipmentTerminalReading", "PhaseMMTN", "ReadingMMTR", "ReadingMMXU" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarReadingProfile), global::openfmb.solarmodule.SolarReadingProfile.Parser, new[]{ "ReadingMessageInfo", "SolarInverter", "SolarReading" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarStatusZGEN), global::openfmb.solarmodule.SolarStatusZGEN.Parser, new[]{ "SolarEventAndStatusZGEN", "GriMod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarStatus), global::openfmb.solarmodule.SolarStatus.Parser, new[]{ "StatusValue", "SolarStatusZGEN" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::openfmb.solarmodule.SolarStatusProfile), global::openfmb.solarmodule.SolarStatusProfile.Parser, new[]{ "StatusMessageInfo", "SolarInverter", "SolarStatus" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Point definition (Point)
  /// </summary>
  public sealed partial class SolarPoint : pb::IMessage<SolarPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarPoint> _parser = new pb::MessageParser<SolarPoint>(() => new SolarPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPoint(SolarPoint other) : this() {
      frequencySetPointEnabled_ = other.frequencySetPointEnabled_ != null ? other.frequencySetPointEnabled_.Clone() : null;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      PctHzDroop = other.PctHzDroop;
      PctVDroop = other.PctVDroop;
      rampRates_ = other.rampRates_ != null ? other.rampRates_.Clone() : null;
      reactivePwrSetPointEnabled_ = other.reactivePwrSetPointEnabled_ != null ? other.reactivePwrSetPointEnabled_.Clone() : null;
      realPwrSetPointEnabled_ = other.realPwrSetPointEnabled_ != null ? other.realPwrSetPointEnabled_.Clone() : null;
      reset_ = other.reset_ != null ? other.reset_.Clone() : null;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      voltageSetPointEnabled_ = other.voltageSetPointEnabled_ != null ? other.voltageSetPointEnabled_.Clone() : null;
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPoint Clone() {
      return new SolarPoint(this);
    }

    /// <summary>Field number for the "frequencySetPointEnabled" field.</summary>
    public const int FrequencySetPointEnabledFieldNumber = 1;
    private global::openfmb.commonmodule.ControlSPC frequencySetPointEnabled_;
    /// <summary>
    /// Enable frequency set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlSPC FrequencySetPointEnabled {
      get { return frequencySetPointEnabled_; }
      set {
        frequencySetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind mode_;
    /// <summary>
    /// Grid connect mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "pctHzDroop" field.</summary>
    public const int PctHzDroopFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_pctHzDroop_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? pctHzDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctHzDroop {
      get { return pctHzDroop_; }
      set {
        pctHzDroop_ = value;
      }
    }


    /// <summary>Field number for the "pctVDroop" field.</summary>
    public const int PctVDroopFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_pctVDroop_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? pctVDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctVDroop {
      get { return pctVDroop_; }
      set {
        pctVDroop_ = value;
      }
    }


    /// <summary>Field number for the "rampRates" field.</summary>
    public const int RampRatesFieldNumber = 5;
    private global::openfmb.commonmodule.RampRate rampRates_;
    /// <summary>
    /// Ramp rates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.RampRate RampRates {
      get { return rampRates_; }
      set {
        rampRates_ = value;
      }
    }

    /// <summary>Field number for the "reactivePwrSetPointEnabled" field.</summary>
    public const int ReactivePwrSetPointEnabledFieldNumber = 6;
    private global::openfmb.commonmodule.ControlSPC reactivePwrSetPointEnabled_;
    /// <summary>
    /// Enable reactive power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlSPC ReactivePwrSetPointEnabled {
      get { return reactivePwrSetPointEnabled_; }
      set {
        reactivePwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "realPwrSetPointEnabled" field.</summary>
    public const int RealPwrSetPointEnabledFieldNumber = 7;
    private global::openfmb.commonmodule.ControlSPC realPwrSetPointEnabled_;
    /// <summary>
    /// Enable real power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlSPC RealPwrSetPointEnabled {
      get { return realPwrSetPointEnabled_; }
      set {
        realPwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "reset" field.</summary>
    public const int ResetFieldNumber = 8;
    private global::openfmb.commonmodule.ControlSPC reset_;
    /// <summary>
    /// Reset device
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlSPC Reset {
      get { return reset_; }
      set {
        reset_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 9;
    private global::openfmb.commonmodule.Optional_StateKind state_;
    /// <summary>
    /// ESS state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.Optional_StateKind State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "voltageSetPointEnabled" field.</summary>
    public const int VoltageSetPointEnabledFieldNumber = 10;
    private global::openfmb.commonmodule.ControlSPC voltageSetPointEnabled_;
    /// <summary>
    /// Enable voltage set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlSPC VoltageSetPointEnabled {
      get { return voltageSetPointEnabled_; }
      set {
        voltageSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 11;
    private global::openfmb.commonmodule.ControlTimestamp startTime_;
    /// <summary>
    /// X-axis value (Unix time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FrequencySetPointEnabled, other.FrequencySetPointEnabled)) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctHzDroop, other.PctHzDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctVDroop, other.PctVDroop)) return false;
      if (!object.Equals(RampRates, other.RampRates)) return false;
      if (!object.Equals(ReactivePwrSetPointEnabled, other.ReactivePwrSetPointEnabled)) return false;
      if (!object.Equals(RealPwrSetPointEnabled, other.RealPwrSetPointEnabled)) return false;
      if (!object.Equals(Reset, other.Reset)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(VoltageSetPointEnabled, other.VoltageSetPointEnabled)) return false;
      if (!object.Equals(StartTime, other.StartTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frequencySetPointEnabled_ != null) hash ^= FrequencySetPointEnabled.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (pctHzDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctHzDroop);
      if (pctVDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctVDroop);
      if (rampRates_ != null) hash ^= RampRates.GetHashCode();
      if (reactivePwrSetPointEnabled_ != null) hash ^= ReactivePwrSetPointEnabled.GetHashCode();
      if (realPwrSetPointEnabled_ != null) hash ^= RealPwrSetPointEnabled.GetHashCode();
      if (reset_ != null) hash ^= Reset.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (voltageSetPointEnabled_ != null) hash ^= VoltageSetPointEnabled.GetHashCode();
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Reset);
      }
      if (state_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(State);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(ref output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(ref output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Reset);
      }
      if (state_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(State);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(StartTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frequencySetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (pctHzDroop_ != null) {
        size += _single_pctHzDroop_codec.CalculateSizeWithTag(PctHzDroop);
      }
      if (pctVDroop_ != null) {
        size += _single_pctVDroop_codec.CalculateSizeWithTag(PctVDroop);
      }
      if (rampRates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealPwrSetPointEnabled);
      }
      if (reset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reset);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (voltageSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageSetPointEnabled);
      }
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarPoint other) {
      if (other == null) {
        return;
      }
      if (other.frequencySetPointEnabled_ != null) {
        if (frequencySetPointEnabled_ == null) {
          FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
        }
        FrequencySetPointEnabled.MergeFrom(other.FrequencySetPointEnabled);
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.pctHzDroop_ != null) {
        if (pctHzDroop_ == null || other.PctHzDroop != 0F) {
          PctHzDroop = other.PctHzDroop;
        }
      }
      if (other.pctVDroop_ != null) {
        if (pctVDroop_ == null || other.PctVDroop != 0F) {
          PctVDroop = other.PctVDroop;
        }
      }
      if (other.rampRates_ != null) {
        if (rampRates_ == null) {
          RampRates = new global::openfmb.commonmodule.RampRate();
        }
        RampRates.MergeFrom(other.RampRates);
      }
      if (other.reactivePwrSetPointEnabled_ != null) {
        if (reactivePwrSetPointEnabled_ == null) {
          ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
        }
        ReactivePwrSetPointEnabled.MergeFrom(other.ReactivePwrSetPointEnabled);
      }
      if (other.realPwrSetPointEnabled_ != null) {
        if (realPwrSetPointEnabled_ == null) {
          RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
        }
        RealPwrSetPointEnabled.MergeFrom(other.RealPwrSetPointEnabled);
      }
      if (other.reset_ != null) {
        if (reset_ == null) {
          Reset = new global::openfmb.commonmodule.ControlSPC();
        }
        Reset.MergeFrom(other.Reset);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::openfmb.commonmodule.Optional_StateKind();
        }
        State.MergeFrom(other.State);
      }
      if (other.voltageSetPointEnabled_ != null) {
        if (voltageSetPointEnabled_ == null) {
          VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
        }
        VoltageSetPointEnabled.MergeFrom(other.VoltageSetPointEnabled);
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::openfmb.commonmodule.ControlTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 18: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 26: {
            float? value = _single_pctHzDroop_codec.Read(input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 34: {
            float? value = _single_pctVDroop_codec.Read(input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 42: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 50: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 58: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 66: {
            if (reset_ == null) {
              Reset = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(Reset);
            break;
          }
          case 74: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 82: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
          case 90: {
            if (startTime_ == null) {
              StartTime = new global::openfmb.commonmodule.ControlTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 18: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 26: {
            float? value = _single_pctHzDroop_codec.Read(ref input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 34: {
            float? value = _single_pctVDroop_codec.Read(ref input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 42: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 50: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 58: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 66: {
            if (reset_ == null) {
              Reset = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(Reset);
            break;
          }
          case 74: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 82: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.ControlSPC();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
          case 90: {
            if (startTime_ == null) {
              StartTime = new global::openfmb.commonmodule.ControlTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Curve shape setting (FC=SP) (CSG_SP)
  /// </summary>
  public sealed partial class SolarCSG : pb::IMessage<SolarCSG>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarCSG> _parser = new pb::MessageParser<SolarCSG>(() => new SolarCSG());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarCSG> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarCSG() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarCSG(SolarCSG other) : this() {
      crvPts_ = other.crvPts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarCSG Clone() {
      return new SolarCSG(this);
    }

    /// <summary>Field number for the "crvPts" field.</summary>
    public const int CrvPtsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::openfmb.solarmodule.SolarPoint> _repeated_crvPts_codec
        = pb::FieldCodec.ForMessage(10, global::openfmb.solarmodule.SolarPoint.Parser);
    private readonly pbc::RepeatedField<global::openfmb.solarmodule.SolarPoint> crvPts_ = new pbc::RepeatedField<global::openfmb.solarmodule.SolarPoint>();
    /// <summary>
    /// The array with the points specifying a curve shape.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::openfmb.solarmodule.SolarPoint> CrvPts {
      get { return crvPts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarCSG);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarCSG other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!crvPts_.Equals(other.crvPts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= crvPts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      crvPts_.WriteTo(output, _repeated_crvPts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      crvPts_.WriteTo(ref output, _repeated_crvPts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += crvPts_.CalculateSize(_repeated_crvPts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarCSG other) {
      if (other == null) {
        return;
      }
      crvPts_.Add(other.crvPts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            crvPts_.AddEntriesFrom(input, _repeated_crvPts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            crvPts_.AddEntriesFrom(ref input, _repeated_crvPts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// OpenFMB specialization for control schedule using:  LN: Schedule   Name: FSCH
  /// </summary>
  public sealed partial class SolarControlScheduleFSCH : pb::IMessage<SolarControlScheduleFSCH>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarControlScheduleFSCH> _parser = new pb::MessageParser<SolarControlScheduleFSCH>(() => new SolarControlScheduleFSCH());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarControlScheduleFSCH> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlScheduleFSCH() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlScheduleFSCH(SolarControlScheduleFSCH other) : this() {
      valDCSG_ = other.valDCSG_ != null ? other.valDCSG_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlScheduleFSCH Clone() {
      return new SolarControlScheduleFSCH(this);
    }

    /// <summary>Field number for the "ValDCSG" field.</summary>
    public const int ValDCSGFieldNumber = 1;
    private global::openfmb.solarmodule.SolarCSG valDCSG_;
    /// <summary>
    /// Discrete value in SolarCSG type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarCSG ValDCSG {
      get { return valDCSG_; }
      set {
        valDCSG_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarControlScheduleFSCH);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarControlScheduleFSCH other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ValDCSG, other.ValDCSG)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valDCSG_ != null) hash ^= ValDCSG.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (valDCSG_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValDCSG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (valDCSG_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ValDCSG);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valDCSG_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValDCSG);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarControlScheduleFSCH other) {
      if (other == null) {
        return;
      }
      if (other.valDCSG_ != null) {
        if (valDCSG_ == null) {
          ValDCSG = new global::openfmb.solarmodule.SolarCSG();
        }
        ValDCSG.MergeFrom(other.ValDCSG);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (valDCSG_ == null) {
              ValDCSG = new global::openfmb.solarmodule.SolarCSG();
            }
            input.ReadMessage(ValDCSG);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (valDCSG_ == null) {
              ValDCSG = new global::openfmb.solarmodule.SolarCSG();
            }
            input.ReadMessage(ValDCSG);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 FSCC class.  LN: Schedule controller   Name: FSCC
  /// </summary>
  public sealed partial class SolarControlFSCC : pb::IMessage<SolarControlFSCC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarControlFSCC> _parser = new pb::MessageParser<SolarControlFSCC>(() => new SolarControlFSCC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarControlFSCC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlFSCC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlFSCC(SolarControlFSCC other) : this() {
      controlFSCC_ = other.controlFSCC_ != null ? other.controlFSCC_.Clone() : null;
      solarControlScheduleFSCH_ = other.solarControlScheduleFSCH_ != null ? other.solarControlScheduleFSCH_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlFSCC Clone() {
      return new SolarControlFSCC(this);
    }

    /// <summary>Field number for the "controlFSCC" field.</summary>
    public const int ControlFSCCFieldNumber = 1;
    private global::openfmb.commonmodule.ControlFSCC controlFSCC_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlFSCC ControlFSCC {
      get { return controlFSCC_; }
      set {
        controlFSCC_ = value;
      }
    }

    /// <summary>Field number for the "SolarControlScheduleFSCH" field.</summary>
    public const int SolarControlScheduleFSCHFieldNumber = 2;
    private global::openfmb.solarmodule.SolarControlScheduleFSCH solarControlScheduleFSCH_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarControlScheduleFSCH SolarControlScheduleFSCH {
      get { return solarControlScheduleFSCH_; }
      set {
        solarControlScheduleFSCH_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarControlFSCC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarControlFSCC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlFSCC, other.ControlFSCC)) return false;
      if (!object.Equals(SolarControlScheduleFSCH, other.SolarControlScheduleFSCH)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlFSCC_ != null) hash ^= ControlFSCC.GetHashCode();
      if (solarControlScheduleFSCH_ != null) hash ^= SolarControlScheduleFSCH.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlFSCC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlFSCC);
      }
      if (solarControlScheduleFSCH_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlFSCC_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlFSCC);
      }
      if (solarControlScheduleFSCH_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlFSCC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlFSCC);
      }
      if (solarControlScheduleFSCH_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarControlScheduleFSCH);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarControlFSCC other) {
      if (other == null) {
        return;
      }
      if (other.controlFSCC_ != null) {
        if (controlFSCC_ == null) {
          ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
        }
        ControlFSCC.MergeFrom(other.ControlFSCC);
      }
      if (other.solarControlScheduleFSCH_ != null) {
        if (solarControlScheduleFSCH_ == null) {
          SolarControlScheduleFSCH = new global::openfmb.solarmodule.SolarControlScheduleFSCH();
        }
        SolarControlScheduleFSCH.MergeFrom(other.SolarControlScheduleFSCH);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlFSCC_ == null) {
              ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
            }
            input.ReadMessage(ControlFSCC);
            break;
          }
          case 18: {
            if (solarControlScheduleFSCH_ == null) {
              SolarControlScheduleFSCH = new global::openfmb.solarmodule.SolarControlScheduleFSCH();
            }
            input.ReadMessage(SolarControlScheduleFSCH);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlFSCC_ == null) {
              ControlFSCC = new global::openfmb.commonmodule.ControlFSCC();
            }
            input.ReadMessage(ControlFSCC);
            break;
          }
          case 18: {
            if (solarControlScheduleFSCH_ == null) {
              SolarControlScheduleFSCH = new global::openfmb.solarmodule.SolarControlScheduleFSCH();
            }
            input.ReadMessage(SolarControlScheduleFSCH);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar control
  /// </summary>
  public sealed partial class SolarControl : pb::IMessage<SolarControl>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarControl> _parser = new pb::MessageParser<SolarControl>(() => new SolarControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControl(SolarControl other) : this() {
      controlValue_ = other.controlValue_ != null ? other.controlValue_.Clone() : null;
      check_ = other.check_ != null ? other.check_.Clone() : null;
      solarControlFSCC_ = other.solarControlFSCC_ != null ? other.solarControlFSCC_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControl Clone() {
      return new SolarControl(this);
    }

    /// <summary>Field number for the "controlValue" field.</summary>
    public const int ControlValueFieldNumber = 1;
    private global::openfmb.commonmodule.ControlValue controlValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlValue ControlValue {
      get { return controlValue_; }
      set {
        controlValue_ = value;
      }
    }

    /// <summary>Field number for the "check" field.</summary>
    public const int CheckFieldNumber = 2;
    private global::openfmb.commonmodule.CheckConditions check_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.CheckConditions Check {
      get { return check_; }
      set {
        check_ = value;
      }
    }

    /// <summary>Field number for the "solarControlFSCC" field.</summary>
    public const int SolarControlFSCCFieldNumber = 3;
    private global::openfmb.solarmodule.SolarControlFSCC solarControlFSCC_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarControlFSCC SolarControlFSCC {
      get { return solarControlFSCC_; }
      set {
        solarControlFSCC_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlValue, other.ControlValue)) return false;
      if (!object.Equals(Check, other.Check)) return false;
      if (!object.Equals(SolarControlFSCC, other.SolarControlFSCC)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlValue_ != null) hash ^= ControlValue.GetHashCode();
      if (check_ != null) hash ^= Check.GetHashCode();
      if (solarControlFSCC_ != null) hash ^= SolarControlFSCC.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlValue);
      }
      if (check_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Check);
      }
      if (solarControlFSCC_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarControlFSCC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlValue);
      }
      if (check_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Check);
      }
      if (solarControlFSCC_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarControlFSCC);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlValue);
      }
      if (check_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Check);
      }
      if (solarControlFSCC_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarControlFSCC);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarControl other) {
      if (other == null) {
        return;
      }
      if (other.controlValue_ != null) {
        if (controlValue_ == null) {
          ControlValue = new global::openfmb.commonmodule.ControlValue();
        }
        ControlValue.MergeFrom(other.ControlValue);
      }
      if (other.check_ != null) {
        if (check_ == null) {
          Check = new global::openfmb.commonmodule.CheckConditions();
        }
        Check.MergeFrom(other.Check);
      }
      if (other.solarControlFSCC_ != null) {
        if (solarControlFSCC_ == null) {
          SolarControlFSCC = new global::openfmb.solarmodule.SolarControlFSCC();
        }
        SolarControlFSCC.MergeFrom(other.SolarControlFSCC);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlValue_ == null) {
              ControlValue = new global::openfmb.commonmodule.ControlValue();
            }
            input.ReadMessage(ControlValue);
            break;
          }
          case 18: {
            if (check_ == null) {
              Check = new global::openfmb.commonmodule.CheckConditions();
            }
            input.ReadMessage(Check);
            break;
          }
          case 26: {
            if (solarControlFSCC_ == null) {
              SolarControlFSCC = new global::openfmb.solarmodule.SolarControlFSCC();
            }
            input.ReadMessage(SolarControlFSCC);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlValue_ == null) {
              ControlValue = new global::openfmb.commonmodule.ControlValue();
            }
            input.ReadMessage(ControlValue);
            break;
          }
          case 18: {
            if (check_ == null) {
              Check = new global::openfmb.commonmodule.CheckConditions();
            }
            input.ReadMessage(Check);
            break;
          }
          case 26: {
            if (solarControlFSCC_ == null) {
              SolarControlFSCC = new global::openfmb.solarmodule.SolarControlFSCC();
            }
            input.ReadMessage(SolarControlFSCC);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// MISSING DOCUMENTATION!!!
  /// </summary>
  public sealed partial class SolarInverter : pb::IMessage<SolarInverter>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarInverter> _parser = new pb::MessageParser<SolarInverter>(() => new SolarInverter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarInverter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarInverter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarInverter(SolarInverter other) : this() {
      conductingEquipment_ = other.conductingEquipment_ != null ? other.conductingEquipment_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarInverter Clone() {
      return new SolarInverter(this);
    }

    /// <summary>Field number for the "conductingEquipment" field.</summary>
    public const int ConductingEquipmentFieldNumber = 1;
    private global::openfmb.commonmodule.ConductingEquipment conductingEquipment_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ConductingEquipment ConductingEquipment {
      get { return conductingEquipment_; }
      set {
        conductingEquipment_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarInverter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarInverter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConductingEquipment, other.ConductingEquipment)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conductingEquipment_ != null) hash ^= ConductingEquipment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (conductingEquipment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (conductingEquipment_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conductingEquipment_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConductingEquipment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarInverter other) {
      if (other == null) {
        return;
      }
      if (other.conductingEquipment_ != null) {
        if (conductingEquipment_ == null) {
          ConductingEquipment = new global::openfmb.commonmodule.ConductingEquipment();
        }
        ConductingEquipment.MergeFrom(other.ConductingEquipment);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (conductingEquipment_ == null) {
              ConductingEquipment = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(ConductingEquipment);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (conductingEquipment_ == null) {
              ConductingEquipment = new global::openfmb.commonmodule.ConductingEquipment();
            }
            input.ReadMessage(ConductingEquipment);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar control profile
  /// </summary>
  public sealed partial class SolarControlProfile : pb::IMessage<SolarControlProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarControlProfile> _parser = new pb::MessageParser<SolarControlProfile>(() => new SolarControlProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarControlProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlProfile(SolarControlProfile other) : this() {
      controlMessageInfo_ = other.controlMessageInfo_ != null ? other.controlMessageInfo_.Clone() : null;
      solarControl_ = other.solarControl_ != null ? other.solarControl_.Clone() : null;
      solarInverter_ = other.solarInverter_ != null ? other.solarInverter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarControlProfile Clone() {
      return new SolarControlProfile(this);
    }

    /// <summary>Field number for the "controlMessageInfo" field.</summary>
    public const int ControlMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ControlMessageInfo controlMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ControlMessageInfo ControlMessageInfo {
      get { return controlMessageInfo_; }
      set {
        controlMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "solarControl" field.</summary>
    public const int SolarControlFieldNumber = 2;
    private global::openfmb.solarmodule.SolarControl solarControl_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarControl SolarControl {
      get { return solarControl_; }
      set {
        solarControl_ = value;
      }
    }

    /// <summary>Field number for the "solarInverter" field.</summary>
    public const int SolarInverterFieldNumber = 3;
    private global::openfmb.solarmodule.SolarInverter solarInverter_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarInverter SolarInverter {
      get { return solarInverter_; }
      set {
        solarInverter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarControlProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarControlProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ControlMessageInfo, other.ControlMessageInfo)) return false;
      if (!object.Equals(SolarControl, other.SolarControl)) return false;
      if (!object.Equals(SolarInverter, other.SolarInverter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (controlMessageInfo_ != null) hash ^= ControlMessageInfo.GetHashCode();
      if (solarControl_ != null) hash ^= SolarControl.GetHashCode();
      if (solarInverter_ != null) hash ^= SolarInverter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (solarControl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarControl);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarInverter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (controlMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ControlMessageInfo);
      }
      if (solarControl_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarControl);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarInverter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (controlMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ControlMessageInfo);
      }
      if (solarControl_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarControl);
      }
      if (solarInverter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarInverter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarControlProfile other) {
      if (other == null) {
        return;
      }
      if (other.controlMessageInfo_ != null) {
        if (controlMessageInfo_ == null) {
          ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
        }
        ControlMessageInfo.MergeFrom(other.ControlMessageInfo);
      }
      if (other.solarControl_ != null) {
        if (solarControl_ == null) {
          SolarControl = new global::openfmb.solarmodule.SolarControl();
        }
        SolarControl.MergeFrom(other.SolarControl);
      }
      if (other.solarInverter_ != null) {
        if (solarInverter_ == null) {
          SolarInverter = new global::openfmb.solarmodule.SolarInverter();
        }
        SolarInverter.MergeFrom(other.SolarInverter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (solarControl_ == null) {
              SolarControl = new global::openfmb.solarmodule.SolarControl();
            }
            input.ReadMessage(SolarControl);
            break;
          }
          case 26: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (controlMessageInfo_ == null) {
              ControlMessageInfo = new global::openfmb.commonmodule.ControlMessageInfo();
            }
            input.ReadMessage(ControlMessageInfo);
            break;
          }
          case 18: {
            if (solarControl_ == null) {
              SolarControl = new global::openfmb.solarmodule.SolarControl();
            }
            input.ReadMessage(SolarControl);
            break;
          }
          case 26: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Point definition (Point)
  /// </summary>
  public sealed partial class SolarPointStatus : pb::IMessage<SolarPointStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarPointStatus> _parser = new pb::MessageParser<SolarPointStatus>(() => new SolarPointStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarPointStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPointStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPointStatus(SolarPointStatus other) : this() {
      frequencySetPointEnabled_ = other.frequencySetPointEnabled_ != null ? other.frequencySetPointEnabled_.Clone() : null;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      PctHzDroop = other.PctHzDroop;
      PctVDroop = other.PctVDroop;
      rampRates_ = other.rampRates_ != null ? other.rampRates_.Clone() : null;
      reactivePwrSetPointEnabled_ = other.reactivePwrSetPointEnabled_ != null ? other.reactivePwrSetPointEnabled_.Clone() : null;
      realPwrSetPointEnabled_ = other.realPwrSetPointEnabled_ != null ? other.realPwrSetPointEnabled_.Clone() : null;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      voltageSetPointEnabled_ = other.voltageSetPointEnabled_ != null ? other.voltageSetPointEnabled_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarPointStatus Clone() {
      return new SolarPointStatus(this);
    }

    /// <summary>Field number for the "frequencySetPointEnabled" field.</summary>
    public const int FrequencySetPointEnabledFieldNumber = 1;
    private global::openfmb.commonmodule.StatusSPS frequencySetPointEnabled_;
    /// <summary>
    /// Enable frequency set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS FrequencySetPointEnabled {
      get { return frequencySetPointEnabled_; }
      set {
        frequencySetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 2;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind mode_;
    /// <summary>
    /// Grid connect mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "pctHzDroop" field.</summary>
    public const int PctHzDroopFieldNumber = 3;
    private static readonly pb::FieldCodec<float?> _single_pctHzDroop_codec = pb::FieldCodec.ForStructWrapper<float>(26);
    private float? pctHzDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctHzDroop {
      get { return pctHzDroop_; }
      set {
        pctHzDroop_ = value;
      }
    }


    /// <summary>Field number for the "pctVDroop" field.</summary>
    public const int PctVDroopFieldNumber = 4;
    private static readonly pb::FieldCodec<float?> _single_pctVDroop_codec = pb::FieldCodec.ForStructWrapper<float>(34);
    private float? pctVDroop_;
    /// <summary>
    /// Black start enable
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float? PctVDroop {
      get { return pctVDroop_; }
      set {
        pctVDroop_ = value;
      }
    }


    /// <summary>Field number for the "rampRates" field.</summary>
    public const int RampRatesFieldNumber = 5;
    private global::openfmb.commonmodule.RampRate rampRates_;
    /// <summary>
    /// Ramp rates
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.RampRate RampRates {
      get { return rampRates_; }
      set {
        rampRates_ = value;
      }
    }

    /// <summary>Field number for the "reactivePwrSetPointEnabled" field.</summary>
    public const int ReactivePwrSetPointEnabledFieldNumber = 6;
    private global::openfmb.commonmodule.StatusSPS reactivePwrSetPointEnabled_;
    /// <summary>
    /// Enable reactive power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS ReactivePwrSetPointEnabled {
      get { return reactivePwrSetPointEnabled_; }
      set {
        reactivePwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "realPwrSetPointEnabled" field.</summary>
    public const int RealPwrSetPointEnabledFieldNumber = 7;
    private global::openfmb.commonmodule.StatusSPS realPwrSetPointEnabled_;
    /// <summary>
    /// Enable real power set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS RealPwrSetPointEnabled {
      get { return realPwrSetPointEnabled_; }
      set {
        realPwrSetPointEnabled_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::openfmb.commonmodule.Optional_StateKind state_;
    /// <summary>
    /// ESS state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.Optional_StateKind State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "voltageSetPointEnabled" field.</summary>
    public const int VoltageSetPointEnabledFieldNumber = 9;
    private global::openfmb.commonmodule.StatusSPS voltageSetPointEnabled_;
    /// <summary>
    /// Enable voltage set point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS VoltageSetPointEnabled {
      get { return voltageSetPointEnabled_; }
      set {
        voltageSetPointEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarPointStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarPointStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FrequencySetPointEnabled, other.FrequencySetPointEnabled)) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctHzDroop, other.PctHzDroop)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.Equals(PctVDroop, other.PctVDroop)) return false;
      if (!object.Equals(RampRates, other.RampRates)) return false;
      if (!object.Equals(ReactivePwrSetPointEnabled, other.ReactivePwrSetPointEnabled)) return false;
      if (!object.Equals(RealPwrSetPointEnabled, other.RealPwrSetPointEnabled)) return false;
      if (!object.Equals(State, other.State)) return false;
      if (!object.Equals(VoltageSetPointEnabled, other.VoltageSetPointEnabled)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (frequencySetPointEnabled_ != null) hash ^= FrequencySetPointEnabled.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (pctHzDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctHzDroop);
      if (pctVDroop_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableSingleEqualityComparer.GetHashCode(PctVDroop);
      if (rampRates_ != null) hash ^= RampRates.GetHashCode();
      if (reactivePwrSetPointEnabled_ != null) hash ^= ReactivePwrSetPointEnabled.GetHashCode();
      if (realPwrSetPointEnabled_ != null) hash ^= RealPwrSetPointEnabled.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (voltageSetPointEnabled_ != null) hash ^= VoltageSetPointEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(State);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (frequencySetPointEnabled_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mode);
      }
      if (pctHzDroop_ != null) {
        _single_pctHzDroop_codec.WriteTagAndValue(ref output, PctHzDroop);
      }
      if (pctVDroop_ != null) {
        _single_pctVDroop_codec.WriteTagAndValue(ref output, PctVDroop);
      }
      if (rampRates_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(State);
      }
      if (voltageSetPointEnabled_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (frequencySetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrequencySetPointEnabled);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (pctHzDroop_ != null) {
        size += _single_pctHzDroop_codec.CalculateSizeWithTag(PctHzDroop);
      }
      if (pctVDroop_ != null) {
        size += _single_pctVDroop_codec.CalculateSizeWithTag(PctVDroop);
      }
      if (rampRates_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RampRates);
      }
      if (reactivePwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReactivePwrSetPointEnabled);
      }
      if (realPwrSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RealPwrSetPointEnabled);
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (voltageSetPointEnabled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoltageSetPointEnabled);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarPointStatus other) {
      if (other == null) {
        return;
      }
      if (other.frequencySetPointEnabled_ != null) {
        if (frequencySetPointEnabled_ == null) {
          FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
        }
        FrequencySetPointEnabled.MergeFrom(other.FrequencySetPointEnabled);
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.pctHzDroop_ != null) {
        if (pctHzDroop_ == null || other.PctHzDroop != 0F) {
          PctHzDroop = other.PctHzDroop;
        }
      }
      if (other.pctVDroop_ != null) {
        if (pctVDroop_ == null || other.PctVDroop != 0F) {
          PctVDroop = other.PctVDroop;
        }
      }
      if (other.rampRates_ != null) {
        if (rampRates_ == null) {
          RampRates = new global::openfmb.commonmodule.RampRate();
        }
        RampRates.MergeFrom(other.RampRates);
      }
      if (other.reactivePwrSetPointEnabled_ != null) {
        if (reactivePwrSetPointEnabled_ == null) {
          ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
        }
        ReactivePwrSetPointEnabled.MergeFrom(other.ReactivePwrSetPointEnabled);
      }
      if (other.realPwrSetPointEnabled_ != null) {
        if (realPwrSetPointEnabled_ == null) {
          RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
        }
        RealPwrSetPointEnabled.MergeFrom(other.RealPwrSetPointEnabled);
      }
      if (other.state_ != null) {
        if (state_ == null) {
          State = new global::openfmb.commonmodule.Optional_StateKind();
        }
        State.MergeFrom(other.State);
      }
      if (other.voltageSetPointEnabled_ != null) {
        if (voltageSetPointEnabled_ == null) {
          VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
        }
        VoltageSetPointEnabled.MergeFrom(other.VoltageSetPointEnabled);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 18: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 26: {
            float? value = _single_pctHzDroop_codec.Read(input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 34: {
            float? value = _single_pctVDroop_codec.Read(input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 42: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 50: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 58: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 66: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 74: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (frequencySetPointEnabled_ == null) {
              FrequencySetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(FrequencySetPointEnabled);
            break;
          }
          case 18: {
            if (mode_ == null) {
              Mode = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(Mode);
            break;
          }
          case 26: {
            float? value = _single_pctHzDroop_codec.Read(ref input);
            if (pctHzDroop_ == null || value != 0F) {
              PctHzDroop = value;
            }
            break;
          }
          case 34: {
            float? value = _single_pctVDroop_codec.Read(ref input);
            if (pctVDroop_ == null || value != 0F) {
              PctVDroop = value;
            }
            break;
          }
          case 42: {
            if (rampRates_ == null) {
              RampRates = new global::openfmb.commonmodule.RampRate();
            }
            input.ReadMessage(RampRates);
            break;
          }
          case 50: {
            if (reactivePwrSetPointEnabled_ == null) {
              ReactivePwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(ReactivePwrSetPointEnabled);
            break;
          }
          case 58: {
            if (realPwrSetPointEnabled_ == null) {
              RealPwrSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(RealPwrSetPointEnabled);
            break;
          }
          case 66: {
            if (state_ == null) {
              State = new global::openfmb.commonmodule.Optional_StateKind();
            }
            input.ReadMessage(State);
            break;
          }
          case 74: {
            if (voltageSetPointEnabled_ == null) {
              VoltageSetPointEnabled = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(VoltageSetPointEnabled);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN class
  /// </summary>
  public sealed partial class SolarEventAndStatusZGEN : pb::IMessage<SolarEventAndStatusZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarEventAndStatusZGEN> _parser = new pb::MessageParser<SolarEventAndStatusZGEN>(() => new SolarEventAndStatusZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarEventAndStatusZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventAndStatusZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventAndStatusZGEN(SolarEventAndStatusZGEN other) : this() {
      logicalNodeForEventAndStatus_ = other.logicalNodeForEventAndStatus_ != null ? other.logicalNodeForEventAndStatus_.Clone() : null;
      auxPwrSt_ = other.auxPwrSt_ != null ? other.auxPwrSt_.Clone() : null;
      dynamicTest_ = other.dynamicTest_ != null ? other.dynamicTest_.Clone() : null;
      emgStop_ = other.emgStop_ != null ? other.emgStop_.Clone() : null;
      pointStatus_ = other.pointStatus_ != null ? other.pointStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventAndStatusZGEN Clone() {
      return new SolarEventAndStatusZGEN(this);
    }

    /// <summary>Field number for the "logicalNodeForEventAndStatus" field.</summary>
    public const int LogicalNodeForEventAndStatusFieldNumber = 1;
    private global::openfmb.commonmodule.LogicalNodeForEventAndStatus logicalNodeForEventAndStatus_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.LogicalNodeForEventAndStatus LogicalNodeForEventAndStatus {
      get { return logicalNodeForEventAndStatus_; }
      set {
        logicalNodeForEventAndStatus_ = value;
      }
    }

    /// <summary>Field number for the "AuxPwrSt" field.</summary>
    public const int AuxPwrStFieldNumber = 2;
    private global::openfmb.commonmodule.StatusSPS auxPwrSt_;
    /// <summary>
    /// DC Power On/Off Status; True = DC power on
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS AuxPwrSt {
      get { return auxPwrSt_; }
      set {
        auxPwrSt_ = value;
      }
    }

    /// <summary>Field number for the "DynamicTest" field.</summary>
    public const int DynamicTestFieldNumber = 3;
    private global::openfmb.commonmodule.ENS_DynamicTestKind dynamicTest_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENS_DynamicTestKind DynamicTest {
      get { return dynamicTest_; }
      set {
        dynamicTest_ = value;
      }
    }

    /// <summary>Field number for the "EmgStop" field.</summary>
    public const int EmgStopFieldNumber = 4;
    private global::openfmb.commonmodule.StatusSPS emgStop_;
    /// <summary>
    /// Emergency stop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusSPS EmgStop {
      get { return emgStop_; }
      set {
        emgStop_ = value;
      }
    }

    /// <summary>Field number for the "PointStatus" field.</summary>
    public const int PointStatusFieldNumber = 5;
    private global::openfmb.solarmodule.SolarPointStatus pointStatus_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarPointStatus PointStatus {
      get { return pointStatus_; }
      set {
        pointStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarEventAndStatusZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarEventAndStatusZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LogicalNodeForEventAndStatus, other.LogicalNodeForEventAndStatus)) return false;
      if (!object.Equals(AuxPwrSt, other.AuxPwrSt)) return false;
      if (!object.Equals(DynamicTest, other.DynamicTest)) return false;
      if (!object.Equals(EmgStop, other.EmgStop)) return false;
      if (!object.Equals(PointStatus, other.PointStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (logicalNodeForEventAndStatus_ != null) hash ^= LogicalNodeForEventAndStatus.GetHashCode();
      if (auxPwrSt_ != null) hash ^= AuxPwrSt.GetHashCode();
      if (dynamicTest_ != null) hash ^= DynamicTest.GetHashCode();
      if (emgStop_ != null) hash ^= EmgStop.GetHashCode();
      if (pointStatus_ != null) hash ^= PointStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicTest);
      }
      if (emgStop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EmgStop);
      }
      if (pointStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PointStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (logicalNodeForEventAndStatus_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DynamicTest);
      }
      if (emgStop_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EmgStop);
      }
      if (pointStatus_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PointStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (logicalNodeForEventAndStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LogicalNodeForEventAndStatus);
      }
      if (auxPwrSt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AuxPwrSt);
      }
      if (dynamicTest_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DynamicTest);
      }
      if (emgStop_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmgStop);
      }
      if (pointStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarEventAndStatusZGEN other) {
      if (other == null) {
        return;
      }
      if (other.logicalNodeForEventAndStatus_ != null) {
        if (logicalNodeForEventAndStatus_ == null) {
          LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
        }
        LogicalNodeForEventAndStatus.MergeFrom(other.LogicalNodeForEventAndStatus);
      }
      if (other.auxPwrSt_ != null) {
        if (auxPwrSt_ == null) {
          AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
        }
        AuxPwrSt.MergeFrom(other.AuxPwrSt);
      }
      if (other.dynamicTest_ != null) {
        if (dynamicTest_ == null) {
          DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
        }
        DynamicTest.MergeFrom(other.DynamicTest);
      }
      if (other.emgStop_ != null) {
        if (emgStop_ == null) {
          EmgStop = new global::openfmb.commonmodule.StatusSPS();
        }
        EmgStop.MergeFrom(other.EmgStop);
      }
      if (other.pointStatus_ != null) {
        if (pointStatus_ == null) {
          PointStatus = new global::openfmb.solarmodule.SolarPointStatus();
        }
        PointStatus.MergeFrom(other.PointStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (auxPwrSt_ == null) {
              AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(AuxPwrSt);
            break;
          }
          case 26: {
            if (dynamicTest_ == null) {
              DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
            }
            input.ReadMessage(DynamicTest);
            break;
          }
          case 34: {
            if (emgStop_ == null) {
              EmgStop = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(EmgStop);
            break;
          }
          case 42: {
            if (pointStatus_ == null) {
              PointStatus = new global::openfmb.solarmodule.SolarPointStatus();
            }
            input.ReadMessage(PointStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (logicalNodeForEventAndStatus_ == null) {
              LogicalNodeForEventAndStatus = new global::openfmb.commonmodule.LogicalNodeForEventAndStatus();
            }
            input.ReadMessage(LogicalNodeForEventAndStatus);
            break;
          }
          case 18: {
            if (auxPwrSt_ == null) {
              AuxPwrSt = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(AuxPwrSt);
            break;
          }
          case 26: {
            if (dynamicTest_ == null) {
              DynamicTest = new global::openfmb.commonmodule.ENS_DynamicTestKind();
            }
            input.ReadMessage(DynamicTest);
            break;
          }
          case 34: {
            if (emgStop_ == null) {
              EmgStop = new global::openfmb.commonmodule.StatusSPS();
            }
            input.ReadMessage(EmgStop);
            break;
          }
          case 42: {
            if (pointStatus_ == null) {
              PointStatus = new global::openfmb.solarmodule.SolarPointStatus();
            }
            input.ReadMessage(PointStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN class
  /// </summary>
  public sealed partial class SolarEventZGEN : pb::IMessage<SolarEventZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarEventZGEN> _parser = new pb::MessageParser<SolarEventZGEN>(() => new SolarEventZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarEventZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventZGEN(SolarEventZGEN other) : this() {
      solarEventAndStatusZGEN_ = other.solarEventAndStatusZGEN_ != null ? other.solarEventAndStatusZGEN_.Clone() : null;
      griMod_ = other.griMod_ != null ? other.griMod_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventZGEN Clone() {
      return new SolarEventZGEN(this);
    }

    /// <summary>Field number for the "solarEventAndStatusZGEN" field.</summary>
    public const int SolarEventAndStatusZGENFieldNumber = 1;
    private global::openfmb.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarEventAndStatusZGEN SolarEventAndStatusZGEN {
      get { return solarEventAndStatusZGEN_; }
      set {
        solarEventAndStatusZGEN_ = value;
      }
    }

    /// <summary>Field number for the "GriMod" field.</summary>
    public const int GriModFieldNumber = 2;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind griMod_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind GriMod {
      get { return griMod_; }
      set {
        griMod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarEventZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarEventZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SolarEventAndStatusZGEN, other.SolarEventAndStatusZGEN)) return false;
      if (!object.Equals(GriMod, other.GriMod)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (solarEventAndStatusZGEN_ != null) hash ^= SolarEventAndStatusZGEN.GetHashCode();
      if (griMod_ != null) hash ^= GriMod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (solarEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GriMod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (solarEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GriMod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (solarEventAndStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GriMod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarEventZGEN other) {
      if (other == null) {
        return;
      }
      if (other.solarEventAndStatusZGEN_ != null) {
        if (solarEventAndStatusZGEN_ == null) {
          SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
        }
        SolarEventAndStatusZGEN.MergeFrom(other.SolarEventAndStatusZGEN);
      }
      if (other.griMod_ != null) {
        if (griMod_ == null) {
          GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        GriMod.MergeFrom(other.GriMod);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (solarEventAndStatusZGEN_ == null) {
              SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
            }
            input.ReadMessage(SolarEventAndStatusZGEN);
            break;
          }
          case 18: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (solarEventAndStatusZGEN_ == null) {
              SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
            }
            input.ReadMessage(SolarEventAndStatusZGEN);
            break;
          }
          case 18: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar event
  /// </summary>
  public sealed partial class SolarEvent : pb::IMessage<SolarEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarEvent> _parser = new pb::MessageParser<SolarEvent>(() => new SolarEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEvent(SolarEvent other) : this() {
      eventValue_ = other.eventValue_ != null ? other.eventValue_.Clone() : null;
      solarEventZGEN_ = other.solarEventZGEN_ != null ? other.solarEventZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEvent Clone() {
      return new SolarEvent(this);
    }

    /// <summary>Field number for the "eventValue" field.</summary>
    public const int EventValueFieldNumber = 1;
    private global::openfmb.commonmodule.EventValue eventValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.EventValue EventValue {
      get { return eventValue_; }
      set {
        eventValue_ = value;
      }
    }

    /// <summary>Field number for the "solarEventZGEN" field.</summary>
    public const int SolarEventZGENFieldNumber = 2;
    private global::openfmb.solarmodule.SolarEventZGEN solarEventZGEN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarEventZGEN SolarEventZGEN {
      get { return solarEventZGEN_; }
      set {
        solarEventZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventValue, other.EventValue)) return false;
      if (!object.Equals(SolarEventZGEN, other.SolarEventZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventValue_ != null) hash ^= EventValue.GetHashCode();
      if (solarEventZGEN_ != null) hash ^= SolarEventZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventValue);
      }
      if (solarEventZGEN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarEventZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventValue);
      }
      if (solarEventZGEN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarEventZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventValue);
      }
      if (solarEventZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarEventZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarEvent other) {
      if (other == null) {
        return;
      }
      if (other.eventValue_ != null) {
        if (eventValue_ == null) {
          EventValue = new global::openfmb.commonmodule.EventValue();
        }
        EventValue.MergeFrom(other.EventValue);
      }
      if (other.solarEventZGEN_ != null) {
        if (solarEventZGEN_ == null) {
          SolarEventZGEN = new global::openfmb.solarmodule.SolarEventZGEN();
        }
        SolarEventZGEN.MergeFrom(other.SolarEventZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eventValue_ == null) {
              EventValue = new global::openfmb.commonmodule.EventValue();
            }
            input.ReadMessage(EventValue);
            break;
          }
          case 18: {
            if (solarEventZGEN_ == null) {
              SolarEventZGEN = new global::openfmb.solarmodule.SolarEventZGEN();
            }
            input.ReadMessage(SolarEventZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eventValue_ == null) {
              EventValue = new global::openfmb.commonmodule.EventValue();
            }
            input.ReadMessage(EventValue);
            break;
          }
          case 18: {
            if (solarEventZGEN_ == null) {
              SolarEventZGEN = new global::openfmb.solarmodule.SolarEventZGEN();
            }
            input.ReadMessage(SolarEventZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar event profile
  /// </summary>
  public sealed partial class SolarEventProfile : pb::IMessage<SolarEventProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarEventProfile> _parser = new pb::MessageParser<SolarEventProfile>(() => new SolarEventProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarEventProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventProfile(SolarEventProfile other) : this() {
      eventMessageInfo_ = other.eventMessageInfo_ != null ? other.eventMessageInfo_.Clone() : null;
      solarEvent_ = other.solarEvent_ != null ? other.solarEvent_.Clone() : null;
      solarInverter_ = other.solarInverter_ != null ? other.solarInverter_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarEventProfile Clone() {
      return new SolarEventProfile(this);
    }

    /// <summary>Field number for the "eventMessageInfo" field.</summary>
    public const int EventMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.EventMessageInfo eventMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.EventMessageInfo EventMessageInfo {
      get { return eventMessageInfo_; }
      set {
        eventMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "solarEvent" field.</summary>
    public const int SolarEventFieldNumber = 2;
    private global::openfmb.solarmodule.SolarEvent solarEvent_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarEvent SolarEvent {
      get { return solarEvent_; }
      set {
        solarEvent_ = value;
      }
    }

    /// <summary>Field number for the "solarInverter" field.</summary>
    public const int SolarInverterFieldNumber = 3;
    private global::openfmb.solarmodule.SolarInverter solarInverter_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarInverter SolarInverter {
      get { return solarInverter_; }
      set {
        solarInverter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarEventProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarEventProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EventMessageInfo, other.EventMessageInfo)) return false;
      if (!object.Equals(SolarEvent, other.SolarEvent)) return false;
      if (!object.Equals(SolarInverter, other.SolarInverter)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventMessageInfo_ != null) hash ^= EventMessageInfo.GetHashCode();
      if (solarEvent_ != null) hash ^= SolarEvent.GetHashCode();
      if (solarInverter_ != null) hash ^= SolarInverter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventMessageInfo);
      }
      if (solarEvent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarEvent);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarInverter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EventMessageInfo);
      }
      if (solarEvent_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarEvent);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarInverter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventMessageInfo);
      }
      if (solarEvent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarEvent);
      }
      if (solarInverter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarInverter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarEventProfile other) {
      if (other == null) {
        return;
      }
      if (other.eventMessageInfo_ != null) {
        if (eventMessageInfo_ == null) {
          EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
        }
        EventMessageInfo.MergeFrom(other.EventMessageInfo);
      }
      if (other.solarEvent_ != null) {
        if (solarEvent_ == null) {
          SolarEvent = new global::openfmb.solarmodule.SolarEvent();
        }
        SolarEvent.MergeFrom(other.SolarEvent);
      }
      if (other.solarInverter_ != null) {
        if (solarInverter_ == null) {
          SolarInverter = new global::openfmb.solarmodule.SolarInverter();
        }
        SolarInverter.MergeFrom(other.SolarInverter);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (eventMessageInfo_ == null) {
              EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
            }
            input.ReadMessage(EventMessageInfo);
            break;
          }
          case 18: {
            if (solarEvent_ == null) {
              SolarEvent = new global::openfmb.solarmodule.SolarEvent();
            }
            input.ReadMessage(SolarEvent);
            break;
          }
          case 26: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (eventMessageInfo_ == null) {
              EventMessageInfo = new global::openfmb.commonmodule.EventMessageInfo();
            }
            input.ReadMessage(EventMessageInfo);
            break;
          }
          case 18: {
            if (solarEvent_ == null) {
              SolarEvent = new global::openfmb.solarmodule.SolarEvent();
            }
            input.ReadMessage(SolarEvent);
            break;
          }
          case 26: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar reading value
  /// </summary>
  public sealed partial class SolarReading : pb::IMessage<SolarReading>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarReading> _parser = new pb::MessageParser<SolarReading>(() => new SolarReading());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarReading> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReading() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReading(SolarReading other) : this() {
      conductingEquipmentTerminalReading_ = other.conductingEquipmentTerminalReading_ != null ? other.conductingEquipmentTerminalReading_.Clone() : null;
      phaseMMTN_ = other.phaseMMTN_ != null ? other.phaseMMTN_.Clone() : null;
      readingMMTR_ = other.readingMMTR_ != null ? other.readingMMTR_.Clone() : null;
      readingMMXU_ = other.readingMMXU_ != null ? other.readingMMXU_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReading Clone() {
      return new SolarReading(this);
    }

    /// <summary>Field number for the "conductingEquipmentTerminalReading" field.</summary>
    public const int ConductingEquipmentTerminalReadingFieldNumber = 1;
    private global::openfmb.commonmodule.ConductingEquipmentTerminalReading conductingEquipmentTerminalReading_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ConductingEquipmentTerminalReading ConductingEquipmentTerminalReading {
      get { return conductingEquipmentTerminalReading_; }
      set {
        conductingEquipmentTerminalReading_ = value;
      }
    }

    /// <summary>Field number for the "phaseMMTN" field.</summary>
    public const int PhaseMMTNFieldNumber = 2;
    private global::openfmb.commonmodule.PhaseMMTN phaseMMTN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.PhaseMMTN PhaseMMTN {
      get { return phaseMMTN_; }
      set {
        phaseMMTN_ = value;
      }
    }

    /// <summary>Field number for the "readingMMTR" field.</summary>
    public const int ReadingMMTRFieldNumber = 3;
    private global::openfmb.commonmodule.ReadingMMTR readingMMTR_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMMTR ReadingMMTR {
      get { return readingMMTR_; }
      set {
        readingMMTR_ = value;
      }
    }

    /// <summary>Field number for the "readingMMXU" field.</summary>
    public const int ReadingMMXUFieldNumber = 4;
    private global::openfmb.commonmodule.ReadingMMXU readingMMXU_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMMXU ReadingMMXU {
      get { return readingMMXU_; }
      set {
        readingMMXU_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarReading);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarReading other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ConductingEquipmentTerminalReading, other.ConductingEquipmentTerminalReading)) return false;
      if (!object.Equals(PhaseMMTN, other.PhaseMMTN)) return false;
      if (!object.Equals(ReadingMMTR, other.ReadingMMTR)) return false;
      if (!object.Equals(ReadingMMXU, other.ReadingMMXU)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (conductingEquipmentTerminalReading_ != null) hash ^= ConductingEquipmentTerminalReading.GetHashCode();
      if (phaseMMTN_ != null) hash ^= PhaseMMTN.GetHashCode();
      if (readingMMTR_ != null) hash ^= ReadingMMTR.GetHashCode();
      if (readingMMXU_ != null) hash ^= ReadingMMXU.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (conductingEquipmentTerminalReading_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadingMMXU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (conductingEquipmentTerminalReading_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ReadingMMXU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (conductingEquipmentTerminalReading_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConductingEquipmentTerminalReading);
      }
      if (phaseMMTN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhaseMMTN);
      }
      if (readingMMTR_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMMTR);
      }
      if (readingMMXU_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMMXU);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarReading other) {
      if (other == null) {
        return;
      }
      if (other.conductingEquipmentTerminalReading_ != null) {
        if (conductingEquipmentTerminalReading_ == null) {
          ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
        }
        ConductingEquipmentTerminalReading.MergeFrom(other.ConductingEquipmentTerminalReading);
      }
      if (other.phaseMMTN_ != null) {
        if (phaseMMTN_ == null) {
          PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
        }
        PhaseMMTN.MergeFrom(other.PhaseMMTN);
      }
      if (other.readingMMTR_ != null) {
        if (readingMMTR_ == null) {
          ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
        }
        ReadingMMTR.MergeFrom(other.ReadingMMTR);
      }
      if (other.readingMMXU_ != null) {
        if (readingMMXU_ == null) {
          ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
        }
        ReadingMMXU.MergeFrom(other.ReadingMMXU);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (conductingEquipmentTerminalReading_ == null) {
              ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
            }
            input.ReadMessage(ConductingEquipmentTerminalReading);
            break;
          }
          case 18: {
            if (phaseMMTN_ == null) {
              PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
            }
            input.ReadMessage(PhaseMMTN);
            break;
          }
          case 26: {
            if (readingMMTR_ == null) {
              ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
            }
            input.ReadMessage(ReadingMMTR);
            break;
          }
          case 34: {
            if (readingMMXU_ == null) {
              ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
            }
            input.ReadMessage(ReadingMMXU);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (conductingEquipmentTerminalReading_ == null) {
              ConductingEquipmentTerminalReading = new global::openfmb.commonmodule.ConductingEquipmentTerminalReading();
            }
            input.ReadMessage(ConductingEquipmentTerminalReading);
            break;
          }
          case 18: {
            if (phaseMMTN_ == null) {
              PhaseMMTN = new global::openfmb.commonmodule.PhaseMMTN();
            }
            input.ReadMessage(PhaseMMTN);
            break;
          }
          case 26: {
            if (readingMMTR_ == null) {
              ReadingMMTR = new global::openfmb.commonmodule.ReadingMMTR();
            }
            input.ReadMessage(ReadingMMTR);
            break;
          }
          case 34: {
            if (readingMMXU_ == null) {
              ReadingMMXU = new global::openfmb.commonmodule.ReadingMMXU();
            }
            input.ReadMessage(ReadingMMXU);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar reading profile
  /// </summary>
  public sealed partial class SolarReadingProfile : pb::IMessage<SolarReadingProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarReadingProfile> _parser = new pb::MessageParser<SolarReadingProfile>(() => new SolarReadingProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarReadingProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReadingProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReadingProfile(SolarReadingProfile other) : this() {
      readingMessageInfo_ = other.readingMessageInfo_ != null ? other.readingMessageInfo_.Clone() : null;
      solarInverter_ = other.solarInverter_ != null ? other.solarInverter_.Clone() : null;
      solarReading_ = other.solarReading_ != null ? other.solarReading_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarReadingProfile Clone() {
      return new SolarReadingProfile(this);
    }

    /// <summary>Field number for the "readingMessageInfo" field.</summary>
    public const int ReadingMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.ReadingMessageInfo readingMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ReadingMessageInfo ReadingMessageInfo {
      get { return readingMessageInfo_; }
      set {
        readingMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "solarInverter" field.</summary>
    public const int SolarInverterFieldNumber = 2;
    private global::openfmb.solarmodule.SolarInverter solarInverter_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarInverter SolarInverter {
      get { return solarInverter_; }
      set {
        solarInverter_ = value;
      }
    }

    /// <summary>Field number for the "solarReading" field.</summary>
    public const int SolarReadingFieldNumber = 3;
    private global::openfmb.solarmodule.SolarReading solarReading_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarReading SolarReading {
      get { return solarReading_; }
      set {
        solarReading_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarReadingProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarReadingProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ReadingMessageInfo, other.ReadingMessageInfo)) return false;
      if (!object.Equals(SolarInverter, other.SolarInverter)) return false;
      if (!object.Equals(SolarReading, other.SolarReading)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (readingMessageInfo_ != null) hash ^= ReadingMessageInfo.GetHashCode();
      if (solarInverter_ != null) hash ^= SolarInverter.GetHashCode();
      if (solarReading_ != null) hash ^= SolarReading.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (readingMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadingMessageInfo);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarInverter);
      }
      if (solarReading_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarReading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (readingMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReadingMessageInfo);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarInverter);
      }
      if (solarReading_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarReading);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (readingMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReadingMessageInfo);
      }
      if (solarInverter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarInverter);
      }
      if (solarReading_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarReading);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarReadingProfile other) {
      if (other == null) {
        return;
      }
      if (other.readingMessageInfo_ != null) {
        if (readingMessageInfo_ == null) {
          ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
        }
        ReadingMessageInfo.MergeFrom(other.ReadingMessageInfo);
      }
      if (other.solarInverter_ != null) {
        if (solarInverter_ == null) {
          SolarInverter = new global::openfmb.solarmodule.SolarInverter();
        }
        SolarInverter.MergeFrom(other.SolarInverter);
      }
      if (other.solarReading_ != null) {
        if (solarReading_ == null) {
          SolarReading = new global::openfmb.solarmodule.SolarReading();
        }
        SolarReading.MergeFrom(other.SolarReading);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (readingMessageInfo_ == null) {
              ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
            }
            input.ReadMessage(ReadingMessageInfo);
            break;
          }
          case 18: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
          case 26: {
            if (solarReading_ == null) {
              SolarReading = new global::openfmb.solarmodule.SolarReading();
            }
            input.ReadMessage(SolarReading);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (readingMessageInfo_ == null) {
              ReadingMessageInfo = new global::openfmb.commonmodule.ReadingMessageInfo();
            }
            input.ReadMessage(ReadingMessageInfo);
            break;
          }
          case 18: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
          case 26: {
            if (solarReading_ == null) {
              SolarReading = new global::openfmb.solarmodule.SolarReading();
            }
            input.ReadMessage(SolarReading);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Specialized 61850 ZGEN LN class
  /// </summary>
  public sealed partial class SolarStatusZGEN : pb::IMessage<SolarStatusZGEN>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarStatusZGEN> _parser = new pb::MessageParser<SolarStatusZGEN>(() => new SolarStatusZGEN());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarStatusZGEN> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusZGEN() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusZGEN(SolarStatusZGEN other) : this() {
      solarEventAndStatusZGEN_ = other.solarEventAndStatusZGEN_ != null ? other.solarEventAndStatusZGEN_.Clone() : null;
      griMod_ = other.griMod_ != null ? other.griMod_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusZGEN Clone() {
      return new SolarStatusZGEN(this);
    }

    /// <summary>Field number for the "solarEventAndStatusZGEN" field.</summary>
    public const int SolarEventAndStatusZGENFieldNumber = 1;
    private global::openfmb.solarmodule.SolarEventAndStatusZGEN solarEventAndStatusZGEN_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarEventAndStatusZGEN SolarEventAndStatusZGEN {
      get { return solarEventAndStatusZGEN_; }
      set {
        solarEventAndStatusZGEN_ = value;
      }
    }

    /// <summary>Field number for the "GriMod" field.</summary>
    public const int GriModFieldNumber = 2;
    private global::openfmb.commonmodule.ENG_GridConnectModeKind griMod_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.ENG_GridConnectModeKind GriMod {
      get { return griMod_; }
      set {
        griMod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarStatusZGEN);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarStatusZGEN other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SolarEventAndStatusZGEN, other.SolarEventAndStatusZGEN)) return false;
      if (!object.Equals(GriMod, other.GriMod)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (solarEventAndStatusZGEN_ != null) hash ^= SolarEventAndStatusZGEN.GetHashCode();
      if (griMod_ != null) hash ^= GriMod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (solarEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GriMod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (solarEventAndStatusZGEN_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GriMod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (solarEventAndStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarEventAndStatusZGEN);
      }
      if (griMod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GriMod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarStatusZGEN other) {
      if (other == null) {
        return;
      }
      if (other.solarEventAndStatusZGEN_ != null) {
        if (solarEventAndStatusZGEN_ == null) {
          SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
        }
        SolarEventAndStatusZGEN.MergeFrom(other.SolarEventAndStatusZGEN);
      }
      if (other.griMod_ != null) {
        if (griMod_ == null) {
          GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
        }
        GriMod.MergeFrom(other.GriMod);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (solarEventAndStatusZGEN_ == null) {
              SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
            }
            input.ReadMessage(SolarEventAndStatusZGEN);
            break;
          }
          case 18: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (solarEventAndStatusZGEN_ == null) {
              SolarEventAndStatusZGEN = new global::openfmb.solarmodule.SolarEventAndStatusZGEN();
            }
            input.ReadMessage(SolarEventAndStatusZGEN);
            break;
          }
          case 18: {
            if (griMod_ == null) {
              GriMod = new global::openfmb.commonmodule.ENG_GridConnectModeKind();
            }
            input.ReadMessage(GriMod);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar status
  /// </summary>
  public sealed partial class SolarStatus : pb::IMessage<SolarStatus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarStatus> _parser = new pb::MessageParser<SolarStatus>(() => new SolarStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatus(SolarStatus other) : this() {
      statusValue_ = other.statusValue_ != null ? other.statusValue_.Clone() : null;
      solarStatusZGEN_ = other.solarStatusZGEN_ != null ? other.solarStatusZGEN_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatus Clone() {
      return new SolarStatus(this);
    }

    /// <summary>Field number for the "statusValue" field.</summary>
    public const int StatusValueFieldNumber = 1;
    private global::openfmb.commonmodule.StatusValue statusValue_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusValue StatusValue {
      get { return statusValue_; }
      set {
        statusValue_ = value;
      }
    }

    /// <summary>Field number for the "solarStatusZGEN" field.</summary>
    public const int SolarStatusZGENFieldNumber = 2;
    private global::openfmb.solarmodule.SolarStatusZGEN solarStatusZGEN_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarStatusZGEN SolarStatusZGEN {
      get { return solarStatusZGEN_; }
      set {
        solarStatusZGEN_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusValue, other.StatusValue)) return false;
      if (!object.Equals(SolarStatusZGEN, other.SolarStatusZGEN)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusValue_ != null) hash ^= StatusValue.GetHashCode();
      if (solarStatusZGEN_ != null) hash ^= SolarStatusZGEN.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (statusValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusValue);
      }
      if (solarStatusZGEN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (statusValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusValue);
      }
      if (solarStatusZGEN_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarStatusZGEN);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusValue);
      }
      if (solarStatusZGEN_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarStatusZGEN);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarStatus other) {
      if (other == null) {
        return;
      }
      if (other.statusValue_ != null) {
        if (statusValue_ == null) {
          StatusValue = new global::openfmb.commonmodule.StatusValue();
        }
        StatusValue.MergeFrom(other.StatusValue);
      }
      if (other.solarStatusZGEN_ != null) {
        if (solarStatusZGEN_ == null) {
          SolarStatusZGEN = new global::openfmb.solarmodule.SolarStatusZGEN();
        }
        SolarStatusZGEN.MergeFrom(other.SolarStatusZGEN);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statusValue_ == null) {
              StatusValue = new global::openfmb.commonmodule.StatusValue();
            }
            input.ReadMessage(StatusValue);
            break;
          }
          case 18: {
            if (solarStatusZGEN_ == null) {
              SolarStatusZGEN = new global::openfmb.solarmodule.SolarStatusZGEN();
            }
            input.ReadMessage(SolarStatusZGEN);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (statusValue_ == null) {
              StatusValue = new global::openfmb.commonmodule.StatusValue();
            }
            input.ReadMessage(StatusValue);
            break;
          }
          case 18: {
            if (solarStatusZGEN_ == null) {
              SolarStatusZGEN = new global::openfmb.solarmodule.SolarStatusZGEN();
            }
            input.ReadMessage(SolarStatusZGEN);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Solar status profile
  /// </summary>
  public sealed partial class SolarStatusProfile : pb::IMessage<SolarStatusProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SolarStatusProfile> _parser = new pb::MessageParser<SolarStatusProfile>(() => new SolarStatusProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolarStatusProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::openfmb.solarmodule.SolarmoduleReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusProfile(SolarStatusProfile other) : this() {
      statusMessageInfo_ = other.statusMessageInfo_ != null ? other.statusMessageInfo_.Clone() : null;
      solarInverter_ = other.solarInverter_ != null ? other.solarInverter_.Clone() : null;
      solarStatus_ = other.solarStatus_ != null ? other.solarStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolarStatusProfile Clone() {
      return new SolarStatusProfile(this);
    }

    /// <summary>Field number for the "statusMessageInfo" field.</summary>
    public const int StatusMessageInfoFieldNumber = 1;
    private global::openfmb.commonmodule.StatusMessageInfo statusMessageInfo_;
    /// <summary>
    /// UML inherited base object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.commonmodule.StatusMessageInfo StatusMessageInfo {
      get { return statusMessageInfo_; }
      set {
        statusMessageInfo_ = value;
      }
    }

    /// <summary>Field number for the "solarInverter" field.</summary>
    public const int SolarInverterFieldNumber = 2;
    private global::openfmb.solarmodule.SolarInverter solarInverter_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarInverter SolarInverter {
      get { return solarInverter_; }
      set {
        solarInverter_ = value;
      }
    }

    /// <summary>Field number for the "solarStatus" field.</summary>
    public const int SolarStatusFieldNumber = 3;
    private global::openfmb.solarmodule.SolarStatus solarStatus_;
    /// <summary>
    /// MISSING DOCUMENTATION!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::openfmb.solarmodule.SolarStatus SolarStatus {
      get { return solarStatus_; }
      set {
        solarStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolarStatusProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolarStatusProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StatusMessageInfo, other.StatusMessageInfo)) return false;
      if (!object.Equals(SolarInverter, other.SolarInverter)) return false;
      if (!object.Equals(SolarStatus, other.SolarStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusMessageInfo_ != null) hash ^= StatusMessageInfo.GetHashCode();
      if (solarInverter_ != null) hash ^= SolarInverter.GetHashCode();
      if (solarStatus_ != null) hash ^= SolarStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (statusMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusMessageInfo);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarInverter);
      }
      if (solarStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (statusMessageInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StatusMessageInfo);
      }
      if (solarInverter_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SolarInverter);
      }
      if (solarStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SolarStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusMessageInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusMessageInfo);
      }
      if (solarInverter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarInverter);
      }
      if (solarStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolarStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolarStatusProfile other) {
      if (other == null) {
        return;
      }
      if (other.statusMessageInfo_ != null) {
        if (statusMessageInfo_ == null) {
          StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
        }
        StatusMessageInfo.MergeFrom(other.StatusMessageInfo);
      }
      if (other.solarInverter_ != null) {
        if (solarInverter_ == null) {
          SolarInverter = new global::openfmb.solarmodule.SolarInverter();
        }
        SolarInverter.MergeFrom(other.SolarInverter);
      }
      if (other.solarStatus_ != null) {
        if (solarStatus_ == null) {
          SolarStatus = new global::openfmb.solarmodule.SolarStatus();
        }
        SolarStatus.MergeFrom(other.SolarStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (statusMessageInfo_ == null) {
              StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
            }
            input.ReadMessage(StatusMessageInfo);
            break;
          }
          case 18: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
          case 26: {
            if (solarStatus_ == null) {
              SolarStatus = new global::openfmb.solarmodule.SolarStatus();
            }
            input.ReadMessage(SolarStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (statusMessageInfo_ == null) {
              StatusMessageInfo = new global::openfmb.commonmodule.StatusMessageInfo();
            }
            input.ReadMessage(StatusMessageInfo);
            break;
          }
          case 18: {
            if (solarInverter_ == null) {
              SolarInverter = new global::openfmb.solarmodule.SolarInverter();
            }
            input.ReadMessage(SolarInverter);
            break;
          }
          case 26: {
            if (solarStatus_ == null) {
              SolarStatus = new global::openfmb.solarmodule.SolarStatus();
            }
            input.ReadMessage(SolarStatus);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
